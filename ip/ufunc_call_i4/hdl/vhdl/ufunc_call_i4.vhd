-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ufunc_call_i4 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in1_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_s_TVALID : IN STD_LOGIC;
    in1_s_TREADY : OUT STD_LOGIC;
    in1_s_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in1_s_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in1_s_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in1_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in1_s_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in1_s_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_s_TVALID : IN STD_LOGIC;
    in2_s_TREADY : OUT STD_LOGIC;
    in2_s_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in2_s_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in2_s_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_s_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_s_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out1_s_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out1_s_TVALID : OUT STD_LOGIC;
    out1_s_TREADY : IN STD_LOGIC;
    out1_s_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out1_s_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out1_s_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out1_s_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out1_s_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out1_s_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out2_s_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out2_s_TVALID : OUT STD_LOGIC;
    out2_s_TREADY : IN STD_LOGIC;
    out2_s_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out2_s_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out2_s_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out2_s_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out2_s_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out2_s_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ufunc_call_i4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ufunc_call_i4_ufunc_call_i4,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.154625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=4824,HLS_SYN_LUT=4347,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal args : STD_LOGIC_VECTOR (7 downto 0);
    signal is_binary_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal is_binary_ce0 : STD_LOGIC;
    signal is_binary_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal returns_pair_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal returns_pair_ce0 : STD_LOGIC;
    signal returns_pair_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal in2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in1_s_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in2_s_TDATA_blk_n : STD_LOGIC;
    signal is_binary_load_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal out1_s_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal out2_s_TDATA_blk_n : STD_LOGIC;
    signal returns_pair_load_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ufunc_in_second_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ufunc_in_second_reg_256_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ufunc_in_second_reg_256_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal args_read_reg_383 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal in1_c_data_V_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_c_data_V_reg_405_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_keep_reg_417 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter28_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter29_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter30_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter31_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter32_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter33_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_keep_reg_417_pp0_iter34_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal in1_c_last_V_fu_328_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_c_last_V_reg_423_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_429_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_exp_32_32_s_fu_306_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_2_reg_433 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_296_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_438 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_3_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_log_32_32_s_fu_301_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln789_1_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln789_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_2_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal grp_sqrt_fixed_32_32_s_fu_296_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3_ignore_call0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4_ignore_call0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter5_ignore_call0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call0 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter7_ignore_call0 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter8_ignore_call0 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter9_ignore_call0 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter10_ignore_call0 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter11_ignore_call0 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12_ignore_call0 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter13_ignore_call0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter14_ignore_call0 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter15_ignore_call0 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter16_ignore_call0 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter17_ignore_call0 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter18_ignore_call0 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter19_ignore_call0 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter20_ignore_call0 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter21_ignore_call0 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter22_ignore_call0 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter23_ignore_call0 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter24_ignore_call0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter25_ignore_call0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter26_ignore_call0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter27_ignore_call0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter28_ignore_call0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter29_ignore_call0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter30_ignore_call0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter31_ignore_call0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter32_ignore_call0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter33_ignore_call0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter34_ignore_call0 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter35_ignore_call0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter36_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp128 : BOOLEAN;
    signal p_Val2_3_log_32_32_s_fu_301_ap_ready : STD_LOGIC;
    signal grp_exp_32_32_s_fu_306_ap_start : STD_LOGIC;
    signal grp_exp_32_32_s_fu_306_ap_done : STD_LOGIC;
    signal grp_exp_32_32_s_fu_306_ap_idle : STD_LOGIC;
    signal grp_exp_32_32_s_fu_306_ap_ready : STD_LOGIC;
    signal grp_exp_32_32_s_fu_306_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_ignoreCallOp108 : BOOLEAN;
    signal ap_phi_mux_ufunc_in_second_phi_fu_260_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ufunc_out_first_phi_fu_273_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exp_32_32_s_fu_306_ap_start_reg : STD_LOGIC := '0';
    signal idxprom_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_349_ce : STD_LOGIC;
    signal grp_fu_362_ce : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal regslice_both_out1_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state40 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in1_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_s_TVALID_int_regslice : STD_LOGIC;
    signal in1_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_s_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in1_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in1_s_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in1_s_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in1_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in1_s_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_s_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in1_s_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in1_s_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in1_s_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_s_TVALID_int_regslice : STD_LOGIC;
    signal in2_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_s_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in2_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in2_s_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in2_s_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in2_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in2_s_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_s_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in2_s_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in2_s_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in2_s_V_dest_V_U_ack_in : STD_LOGIC;
    signal out1_s_TVALID_int_regslice : STD_LOGIC;
    signal out1_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out1_s_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_s_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_s_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_s_V_dest_V_U_vld_out : STD_LOGIC;
    signal out2_s_TVALID_int_regslice : STD_LOGIC;
    signal out2_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out2_s_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_s_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_s_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_s_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_749 : BOOLEAN;
    signal ap_condition_627 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ufunc_call_i4_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component ufunc_call_i4_log_32_32_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ufunc_call_i4_exp_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component ufunc_call_i4_sdiv_32s_32s_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ufunc_call_i4_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ufunc_call_i4_is_binary IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ufunc_call_i4_returns_pair IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ufunc_call_i4_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        args : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component ufunc_call_i4_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    is_binary_U : component ufunc_call_i4_is_binary
    generic map (
        DataWidth => 1,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => is_binary_address0,
        ce0 => is_binary_ce0,
        q0 => is_binary_q0);

    returns_pair_U : component ufunc_call_i4_returns_pair
    generic map (
        DataWidth => 1,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => returns_pair_address0,
        ce0 => returns_pair_ce0,
        q0 => returns_pair_q0);

    control_s_axi_U : component ufunc_call_i4_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        args => args,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_sqrt_fixed_32_32_s_fu_296 : component ufunc_call_i4_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => in1_c_data_V_reg_405_pp0_iter24_reg,
        ap_return => grp_sqrt_fixed_32_32_s_fu_296_ap_return,
        ap_ce => grp_sqrt_fixed_32_32_s_fu_296_ap_ce);

    p_Val2_3_log_32_32_s_fu_301 : component ufunc_call_i4_log_32_32_s
    port map (
        ap_ready => p_Val2_3_log_32_32_s_fu_301_ap_ready,
        x => in1_c_data_V_reg_405_pp0_iter32_reg,
        ap_return => p_Val2_3_log_32_32_s_fu_301_ap_return);

    grp_exp_32_32_s_fu_306 : component ufunc_call_i4_exp_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_32_32_s_fu_306_ap_start,
        ap_done => grp_exp_32_32_s_fu_306_ap_done,
        ap_idle => grp_exp_32_32_s_fu_306_ap_idle,
        ap_ready => grp_exp_32_32_s_fu_306_ap_ready,
        ap_ce => grp_exp_32_32_s_fu_306_ap_ce,
        x => in1_c_data_V_reg_405_pp0_iter31_reg,
        ap_return => grp_exp_32_32_s_fu_306_ap_return);

    sdiv_32s_32s_32_36_1_U5 : component ufunc_call_i4_sdiv_32s_32s_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in1_s_TDATA_int_regslice,
        din1 => ap_phi_mux_ufunc_in_second_phi_fu_260_p4,
        ce => grp_fu_349_ce,
        dout => grp_fu_349_p2);

    mul_32s_32s_32_2_1_U6 : component ufunc_call_i4_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in1_c_data_V_reg_405_pp0_iter31_reg,
        din1 => ufunc_in_second_reg_256_pp0_iter31_reg,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    regslice_both_in1_s_V_data_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TDATA,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_data_V_U_ack_in,
        data_out => in1_s_TDATA_int_regslice,
        vld_out => in1_s_TVALID_int_regslice,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_data_V_U_apdone_blk);

    regslice_both_in1_s_V_keep_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TKEEP,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_keep_V_U_ack_in,
        data_out => in1_s_TKEEP_int_regslice,
        vld_out => regslice_both_in1_s_V_keep_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_keep_V_U_apdone_blk);

    regslice_both_in1_s_V_strb_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TSTRB,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_strb_V_U_ack_in,
        data_out => in1_s_TSTRB_int_regslice,
        vld_out => regslice_both_in1_s_V_strb_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_strb_V_U_apdone_blk);

    regslice_both_in1_s_V_user_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TUSER,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_user_V_U_ack_in,
        data_out => in1_s_TUSER_int_regslice,
        vld_out => regslice_both_in1_s_V_user_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_user_V_U_apdone_blk);

    regslice_both_in1_s_V_last_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TLAST,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_last_V_U_ack_in,
        data_out => in1_s_TLAST_int_regslice,
        vld_out => regslice_both_in1_s_V_last_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_last_V_U_apdone_blk);

    regslice_both_in1_s_V_id_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TID,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_id_V_U_ack_in,
        data_out => in1_s_TID_int_regslice,
        vld_out => regslice_both_in1_s_V_id_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_id_V_U_apdone_blk);

    regslice_both_in1_s_V_dest_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TDEST,
        vld_in => in1_s_TVALID,
        ack_in => regslice_both_in1_s_V_dest_V_U_ack_in,
        data_out => in1_s_TDEST_int_regslice,
        vld_out => regslice_both_in1_s_V_dest_V_U_vld_out,
        ack_out => in1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_s_V_dest_V_U_apdone_blk);

    regslice_both_in2_s_V_data_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TDATA,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_data_V_U_ack_in,
        data_out => in2_s_TDATA_int_regslice,
        vld_out => in2_s_TVALID_int_regslice,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_data_V_U_apdone_blk);

    regslice_both_in2_s_V_keep_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TKEEP,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_keep_V_U_ack_in,
        data_out => in2_s_TKEEP_int_regslice,
        vld_out => regslice_both_in2_s_V_keep_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_keep_V_U_apdone_blk);

    regslice_both_in2_s_V_strb_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TSTRB,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_strb_V_U_ack_in,
        data_out => in2_s_TSTRB_int_regslice,
        vld_out => regslice_both_in2_s_V_strb_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_strb_V_U_apdone_blk);

    regslice_both_in2_s_V_user_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TUSER,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_user_V_U_ack_in,
        data_out => in2_s_TUSER_int_regslice,
        vld_out => regslice_both_in2_s_V_user_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_user_V_U_apdone_blk);

    regslice_both_in2_s_V_last_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TLAST,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_last_V_U_ack_in,
        data_out => in2_s_TLAST_int_regslice,
        vld_out => regslice_both_in2_s_V_last_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_last_V_U_apdone_blk);

    regslice_both_in2_s_V_id_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TID,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_id_V_U_ack_in,
        data_out => in2_s_TID_int_regslice,
        vld_out => regslice_both_in2_s_V_id_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_id_V_U_apdone_blk);

    regslice_both_in2_s_V_dest_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_s_TDEST,
        vld_in => in2_s_TVALID,
        ack_in => regslice_both_in2_s_V_dest_V_U_ack_in,
        data_out => in2_s_TDEST_int_regslice,
        vld_out => regslice_both_in2_s_V_dest_V_U_vld_out,
        ack_out => in2_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_s_V_dest_V_U_apdone_blk);

    regslice_both_out1_s_V_data_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_ufunc_out_first_phi_fu_273_p18,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => out1_s_TREADY_int_regslice,
        data_out => out1_s_TDATA,
        vld_out => regslice_both_out1_s_V_data_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_data_V_U_apdone_blk);

    regslice_both_out1_s_V_keep_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_keep_reg_417_pp0_iter34_reg,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_keep_V_U_ack_in_dummy,
        data_out => out1_s_TKEEP,
        vld_out => regslice_both_out1_s_V_keep_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_keep_V_U_apdone_blk);

    regslice_both_out1_s_V_strb_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_strb_V_U_ack_in_dummy,
        data_out => out1_s_TSTRB,
        vld_out => regslice_both_out1_s_V_strb_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_strb_V_U_apdone_blk);

    regslice_both_out1_s_V_user_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_user_V_U_ack_in_dummy,
        data_out => out1_s_TUSER,
        vld_out => regslice_both_out1_s_V_user_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_user_V_U_apdone_blk);

    regslice_both_out1_s_V_last_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_c_last_V_reg_423_pp0_iter34_reg,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_last_V_U_ack_in_dummy,
        data_out => out1_s_TLAST,
        vld_out => regslice_both_out1_s_V_last_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_last_V_U_apdone_blk);

    regslice_both_out1_s_V_id_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_id_V_U_ack_in_dummy,
        data_out => out1_s_TID,
        vld_out => regslice_both_out1_s_V_id_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_id_V_U_apdone_blk);

    regslice_both_out1_s_V_dest_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out1_s_TVALID_int_regslice,
        ack_in => regslice_both_out1_s_V_dest_V_U_ack_in_dummy,
        data_out => out1_s_TDEST,
        vld_out => regslice_both_out1_s_V_dest_V_U_vld_out,
        ack_out => out1_s_TREADY,
        apdone_blk => regslice_both_out1_s_V_dest_V_U_apdone_blk);

    regslice_both_out2_s_V_data_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_ufunc_in_second_phi_fu_260_p4,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => out2_s_TREADY_int_regslice,
        data_out => out2_s_TDATA,
        vld_out => regslice_both_out2_s_V_data_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_data_V_U_apdone_blk);

    regslice_both_out2_s_V_keep_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TKEEP_int_regslice,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_keep_V_U_ack_in_dummy,
        data_out => out2_s_TKEEP,
        vld_out => regslice_both_out2_s_V_keep_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_keep_V_U_apdone_blk);

    regslice_both_out2_s_V_strb_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_strb_V_U_ack_in_dummy,
        data_out => out2_s_TSTRB,
        vld_out => regslice_both_out2_s_V_strb_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_strb_V_U_apdone_blk);

    regslice_both_out2_s_V_user_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_user_V_U_ack_in_dummy,
        data_out => out2_s_TUSER,
        vld_out => regslice_both_out2_s_V_user_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_user_V_U_apdone_blk);

    regslice_both_out2_s_V_last_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_s_TLAST_int_regslice,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_last_V_U_ack_in_dummy,
        data_out => out2_s_TLAST,
        vld_out => regslice_both_out2_s_V_last_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_last_V_U_apdone_blk);

    regslice_both_out2_s_V_id_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_id_V_U_ack_in_dummy,
        data_out => out2_s_TID,
        vld_out => regslice_both_out2_s_V_id_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_id_V_U_apdone_blk);

    regslice_both_out2_s_V_dest_V_U : component ufunc_call_i4_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out2_s_TVALID_int_regslice,
        ack_in => regslice_both_out2_s_V_dest_V_U_ack_in_dummy,
        data_out => out2_s_TDEST,
        vld_out => regslice_both_out2_s_V_dest_V_U_vld_out,
        ack_out => out2_s_TREADY,
        apdone_blk => regslice_both_out2_s_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_32_32_s_fu_306_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_32_32_s_fu_306_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1) and (args_read_reg_383 = ap_const_lv8_4))) then 
                    grp_exp_32_32_s_fu_306_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_32_32_s_fu_306_ap_ready = ap_const_logic_1)) then 
                    grp_exp_32_32_s_fu_306_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_627)) then
                if (((icmp_ln1452_fu_343_p2 = ap_const_lv1_1) and (args_read_reg_383 = ap_const_lv8_8))) then 
                    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_749)) then 
                    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= in1_s_TDATA_int_regslice;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                if ((args_read_reg_383 = ap_const_lv8_5)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= p_Val2_3_reg_448;
                elsif ((args_read_reg_383 = ap_const_lv8_1)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_fu_378_p2;
                elsif ((args_read_reg_383 = ap_const_lv8_7)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_2_fu_373_p2;
                elsif ((args_read_reg_383 = ap_const_lv8_2)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_3_reg_443;
                elsif ((args_read_reg_383 = ap_const_lv8_A)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= zext_ln789_fu_370_p1;
                elsif ((args_read_reg_383 = ap_const_lv8_4)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= zext_ln789_1_fu_367_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268;
                end if;
            end if; 
        end if;
    end process;

    ufunc_in_second_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_627)) then
                if ((is_binary_load_reg_397 = ap_const_lv1_1)) then 
                    ufunc_in_second_reg_256 <= in2_s_TDATA_int_regslice;
                elsif ((is_binary_load_reg_397 = ap_const_lv1_0)) then 
                    ufunc_in_second_reg_256 <= in2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ufunc_in_second_reg_256 <= ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                args_read_reg_383 <= args;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (args_read_reg_383 = ap_const_lv8_8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1452_reg_429 <= icmp_ln1452_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln1452_reg_429_pp0_iter10_reg <= icmp_ln1452_reg_429_pp0_iter9_reg;
                icmp_ln1452_reg_429_pp0_iter11_reg <= icmp_ln1452_reg_429_pp0_iter10_reg;
                icmp_ln1452_reg_429_pp0_iter12_reg <= icmp_ln1452_reg_429_pp0_iter11_reg;
                icmp_ln1452_reg_429_pp0_iter13_reg <= icmp_ln1452_reg_429_pp0_iter12_reg;
                icmp_ln1452_reg_429_pp0_iter14_reg <= icmp_ln1452_reg_429_pp0_iter13_reg;
                icmp_ln1452_reg_429_pp0_iter15_reg <= icmp_ln1452_reg_429_pp0_iter14_reg;
                icmp_ln1452_reg_429_pp0_iter16_reg <= icmp_ln1452_reg_429_pp0_iter15_reg;
                icmp_ln1452_reg_429_pp0_iter17_reg <= icmp_ln1452_reg_429_pp0_iter16_reg;
                icmp_ln1452_reg_429_pp0_iter18_reg <= icmp_ln1452_reg_429_pp0_iter17_reg;
                icmp_ln1452_reg_429_pp0_iter19_reg <= icmp_ln1452_reg_429_pp0_iter18_reg;
                icmp_ln1452_reg_429_pp0_iter20_reg <= icmp_ln1452_reg_429_pp0_iter19_reg;
                icmp_ln1452_reg_429_pp0_iter21_reg <= icmp_ln1452_reg_429_pp0_iter20_reg;
                icmp_ln1452_reg_429_pp0_iter22_reg <= icmp_ln1452_reg_429_pp0_iter21_reg;
                icmp_ln1452_reg_429_pp0_iter23_reg <= icmp_ln1452_reg_429_pp0_iter22_reg;
                icmp_ln1452_reg_429_pp0_iter24_reg <= icmp_ln1452_reg_429_pp0_iter23_reg;
                icmp_ln1452_reg_429_pp0_iter25_reg <= icmp_ln1452_reg_429_pp0_iter24_reg;
                icmp_ln1452_reg_429_pp0_iter26_reg <= icmp_ln1452_reg_429_pp0_iter25_reg;
                icmp_ln1452_reg_429_pp0_iter27_reg <= icmp_ln1452_reg_429_pp0_iter26_reg;
                icmp_ln1452_reg_429_pp0_iter28_reg <= icmp_ln1452_reg_429_pp0_iter27_reg;
                icmp_ln1452_reg_429_pp0_iter29_reg <= icmp_ln1452_reg_429_pp0_iter28_reg;
                icmp_ln1452_reg_429_pp0_iter2_reg <= icmp_ln1452_reg_429_pp0_iter1_reg;
                icmp_ln1452_reg_429_pp0_iter30_reg <= icmp_ln1452_reg_429_pp0_iter29_reg;
                icmp_ln1452_reg_429_pp0_iter31_reg <= icmp_ln1452_reg_429_pp0_iter30_reg;
                icmp_ln1452_reg_429_pp0_iter32_reg <= icmp_ln1452_reg_429_pp0_iter31_reg;
                icmp_ln1452_reg_429_pp0_iter33_reg <= icmp_ln1452_reg_429_pp0_iter32_reg;
                icmp_ln1452_reg_429_pp0_iter34_reg <= icmp_ln1452_reg_429_pp0_iter33_reg;
                icmp_ln1452_reg_429_pp0_iter3_reg <= icmp_ln1452_reg_429_pp0_iter2_reg;
                icmp_ln1452_reg_429_pp0_iter4_reg <= icmp_ln1452_reg_429_pp0_iter3_reg;
                icmp_ln1452_reg_429_pp0_iter5_reg <= icmp_ln1452_reg_429_pp0_iter4_reg;
                icmp_ln1452_reg_429_pp0_iter6_reg <= icmp_ln1452_reg_429_pp0_iter5_reg;
                icmp_ln1452_reg_429_pp0_iter7_reg <= icmp_ln1452_reg_429_pp0_iter6_reg;
                icmp_ln1452_reg_429_pp0_iter8_reg <= icmp_ln1452_reg_429_pp0_iter7_reg;
                icmp_ln1452_reg_429_pp0_iter9_reg <= icmp_ln1452_reg_429_pp0_iter8_reg;
                in1_c_data_V_reg_405_pp0_iter10_reg <= in1_c_data_V_reg_405_pp0_iter9_reg;
                in1_c_data_V_reg_405_pp0_iter11_reg <= in1_c_data_V_reg_405_pp0_iter10_reg;
                in1_c_data_V_reg_405_pp0_iter12_reg <= in1_c_data_V_reg_405_pp0_iter11_reg;
                in1_c_data_V_reg_405_pp0_iter13_reg <= in1_c_data_V_reg_405_pp0_iter12_reg;
                in1_c_data_V_reg_405_pp0_iter14_reg <= in1_c_data_V_reg_405_pp0_iter13_reg;
                in1_c_data_V_reg_405_pp0_iter15_reg <= in1_c_data_V_reg_405_pp0_iter14_reg;
                in1_c_data_V_reg_405_pp0_iter16_reg <= in1_c_data_V_reg_405_pp0_iter15_reg;
                in1_c_data_V_reg_405_pp0_iter17_reg <= in1_c_data_V_reg_405_pp0_iter16_reg;
                in1_c_data_V_reg_405_pp0_iter18_reg <= in1_c_data_V_reg_405_pp0_iter17_reg;
                in1_c_data_V_reg_405_pp0_iter19_reg <= in1_c_data_V_reg_405_pp0_iter18_reg;
                in1_c_data_V_reg_405_pp0_iter20_reg <= in1_c_data_V_reg_405_pp0_iter19_reg;
                in1_c_data_V_reg_405_pp0_iter21_reg <= in1_c_data_V_reg_405_pp0_iter20_reg;
                in1_c_data_V_reg_405_pp0_iter22_reg <= in1_c_data_V_reg_405_pp0_iter21_reg;
                in1_c_data_V_reg_405_pp0_iter23_reg <= in1_c_data_V_reg_405_pp0_iter22_reg;
                in1_c_data_V_reg_405_pp0_iter24_reg <= in1_c_data_V_reg_405_pp0_iter23_reg;
                in1_c_data_V_reg_405_pp0_iter25_reg <= in1_c_data_V_reg_405_pp0_iter24_reg;
                in1_c_data_V_reg_405_pp0_iter26_reg <= in1_c_data_V_reg_405_pp0_iter25_reg;
                in1_c_data_V_reg_405_pp0_iter27_reg <= in1_c_data_V_reg_405_pp0_iter26_reg;
                in1_c_data_V_reg_405_pp0_iter28_reg <= in1_c_data_V_reg_405_pp0_iter27_reg;
                in1_c_data_V_reg_405_pp0_iter29_reg <= in1_c_data_V_reg_405_pp0_iter28_reg;
                in1_c_data_V_reg_405_pp0_iter2_reg <= in1_c_data_V_reg_405_pp0_iter1_reg;
                in1_c_data_V_reg_405_pp0_iter30_reg <= in1_c_data_V_reg_405_pp0_iter29_reg;
                in1_c_data_V_reg_405_pp0_iter31_reg <= in1_c_data_V_reg_405_pp0_iter30_reg;
                in1_c_data_V_reg_405_pp0_iter32_reg <= in1_c_data_V_reg_405_pp0_iter31_reg;
                in1_c_data_V_reg_405_pp0_iter33_reg <= in1_c_data_V_reg_405_pp0_iter32_reg;
                in1_c_data_V_reg_405_pp0_iter3_reg <= in1_c_data_V_reg_405_pp0_iter2_reg;
                in1_c_data_V_reg_405_pp0_iter4_reg <= in1_c_data_V_reg_405_pp0_iter3_reg;
                in1_c_data_V_reg_405_pp0_iter5_reg <= in1_c_data_V_reg_405_pp0_iter4_reg;
                in1_c_data_V_reg_405_pp0_iter6_reg <= in1_c_data_V_reg_405_pp0_iter5_reg;
                in1_c_data_V_reg_405_pp0_iter7_reg <= in1_c_data_V_reg_405_pp0_iter6_reg;
                in1_c_data_V_reg_405_pp0_iter8_reg <= in1_c_data_V_reg_405_pp0_iter7_reg;
                in1_c_data_V_reg_405_pp0_iter9_reg <= in1_c_data_V_reg_405_pp0_iter8_reg;
                in1_c_last_V_reg_423_pp0_iter10_reg <= in1_c_last_V_reg_423_pp0_iter9_reg;
                in1_c_last_V_reg_423_pp0_iter11_reg <= in1_c_last_V_reg_423_pp0_iter10_reg;
                in1_c_last_V_reg_423_pp0_iter12_reg <= in1_c_last_V_reg_423_pp0_iter11_reg;
                in1_c_last_V_reg_423_pp0_iter13_reg <= in1_c_last_V_reg_423_pp0_iter12_reg;
                in1_c_last_V_reg_423_pp0_iter14_reg <= in1_c_last_V_reg_423_pp0_iter13_reg;
                in1_c_last_V_reg_423_pp0_iter15_reg <= in1_c_last_V_reg_423_pp0_iter14_reg;
                in1_c_last_V_reg_423_pp0_iter16_reg <= in1_c_last_V_reg_423_pp0_iter15_reg;
                in1_c_last_V_reg_423_pp0_iter17_reg <= in1_c_last_V_reg_423_pp0_iter16_reg;
                in1_c_last_V_reg_423_pp0_iter18_reg <= in1_c_last_V_reg_423_pp0_iter17_reg;
                in1_c_last_V_reg_423_pp0_iter19_reg <= in1_c_last_V_reg_423_pp0_iter18_reg;
                in1_c_last_V_reg_423_pp0_iter20_reg <= in1_c_last_V_reg_423_pp0_iter19_reg;
                in1_c_last_V_reg_423_pp0_iter21_reg <= in1_c_last_V_reg_423_pp0_iter20_reg;
                in1_c_last_V_reg_423_pp0_iter22_reg <= in1_c_last_V_reg_423_pp0_iter21_reg;
                in1_c_last_V_reg_423_pp0_iter23_reg <= in1_c_last_V_reg_423_pp0_iter22_reg;
                in1_c_last_V_reg_423_pp0_iter24_reg <= in1_c_last_V_reg_423_pp0_iter23_reg;
                in1_c_last_V_reg_423_pp0_iter25_reg <= in1_c_last_V_reg_423_pp0_iter24_reg;
                in1_c_last_V_reg_423_pp0_iter26_reg <= in1_c_last_V_reg_423_pp0_iter25_reg;
                in1_c_last_V_reg_423_pp0_iter27_reg <= in1_c_last_V_reg_423_pp0_iter26_reg;
                in1_c_last_V_reg_423_pp0_iter28_reg <= in1_c_last_V_reg_423_pp0_iter27_reg;
                in1_c_last_V_reg_423_pp0_iter29_reg <= in1_c_last_V_reg_423_pp0_iter28_reg;
                in1_c_last_V_reg_423_pp0_iter2_reg <= in1_c_last_V_reg_423_pp0_iter1_reg;
                in1_c_last_V_reg_423_pp0_iter30_reg <= in1_c_last_V_reg_423_pp0_iter29_reg;
                in1_c_last_V_reg_423_pp0_iter31_reg <= in1_c_last_V_reg_423_pp0_iter30_reg;
                in1_c_last_V_reg_423_pp0_iter32_reg <= in1_c_last_V_reg_423_pp0_iter31_reg;
                in1_c_last_V_reg_423_pp0_iter33_reg <= in1_c_last_V_reg_423_pp0_iter32_reg;
                in1_c_last_V_reg_423_pp0_iter34_reg <= in1_c_last_V_reg_423_pp0_iter33_reg;
                in1_c_last_V_reg_423_pp0_iter3_reg <= in1_c_last_V_reg_423_pp0_iter2_reg;
                in1_c_last_V_reg_423_pp0_iter4_reg <= in1_c_last_V_reg_423_pp0_iter3_reg;
                in1_c_last_V_reg_423_pp0_iter5_reg <= in1_c_last_V_reg_423_pp0_iter4_reg;
                in1_c_last_V_reg_423_pp0_iter6_reg <= in1_c_last_V_reg_423_pp0_iter5_reg;
                in1_c_last_V_reg_423_pp0_iter7_reg <= in1_c_last_V_reg_423_pp0_iter6_reg;
                in1_c_last_V_reg_423_pp0_iter8_reg <= in1_c_last_V_reg_423_pp0_iter7_reg;
                in1_c_last_V_reg_423_pp0_iter9_reg <= in1_c_last_V_reg_423_pp0_iter8_reg;
                ref_tmp_keep_reg_417_pp0_iter10_reg <= ref_tmp_keep_reg_417_pp0_iter9_reg;
                ref_tmp_keep_reg_417_pp0_iter11_reg <= ref_tmp_keep_reg_417_pp0_iter10_reg;
                ref_tmp_keep_reg_417_pp0_iter12_reg <= ref_tmp_keep_reg_417_pp0_iter11_reg;
                ref_tmp_keep_reg_417_pp0_iter13_reg <= ref_tmp_keep_reg_417_pp0_iter12_reg;
                ref_tmp_keep_reg_417_pp0_iter14_reg <= ref_tmp_keep_reg_417_pp0_iter13_reg;
                ref_tmp_keep_reg_417_pp0_iter15_reg <= ref_tmp_keep_reg_417_pp0_iter14_reg;
                ref_tmp_keep_reg_417_pp0_iter16_reg <= ref_tmp_keep_reg_417_pp0_iter15_reg;
                ref_tmp_keep_reg_417_pp0_iter17_reg <= ref_tmp_keep_reg_417_pp0_iter16_reg;
                ref_tmp_keep_reg_417_pp0_iter18_reg <= ref_tmp_keep_reg_417_pp0_iter17_reg;
                ref_tmp_keep_reg_417_pp0_iter19_reg <= ref_tmp_keep_reg_417_pp0_iter18_reg;
                ref_tmp_keep_reg_417_pp0_iter20_reg <= ref_tmp_keep_reg_417_pp0_iter19_reg;
                ref_tmp_keep_reg_417_pp0_iter21_reg <= ref_tmp_keep_reg_417_pp0_iter20_reg;
                ref_tmp_keep_reg_417_pp0_iter22_reg <= ref_tmp_keep_reg_417_pp0_iter21_reg;
                ref_tmp_keep_reg_417_pp0_iter23_reg <= ref_tmp_keep_reg_417_pp0_iter22_reg;
                ref_tmp_keep_reg_417_pp0_iter24_reg <= ref_tmp_keep_reg_417_pp0_iter23_reg;
                ref_tmp_keep_reg_417_pp0_iter25_reg <= ref_tmp_keep_reg_417_pp0_iter24_reg;
                ref_tmp_keep_reg_417_pp0_iter26_reg <= ref_tmp_keep_reg_417_pp0_iter25_reg;
                ref_tmp_keep_reg_417_pp0_iter27_reg <= ref_tmp_keep_reg_417_pp0_iter26_reg;
                ref_tmp_keep_reg_417_pp0_iter28_reg <= ref_tmp_keep_reg_417_pp0_iter27_reg;
                ref_tmp_keep_reg_417_pp0_iter29_reg <= ref_tmp_keep_reg_417_pp0_iter28_reg;
                ref_tmp_keep_reg_417_pp0_iter2_reg <= ref_tmp_keep_reg_417_pp0_iter1_reg;
                ref_tmp_keep_reg_417_pp0_iter30_reg <= ref_tmp_keep_reg_417_pp0_iter29_reg;
                ref_tmp_keep_reg_417_pp0_iter31_reg <= ref_tmp_keep_reg_417_pp0_iter30_reg;
                ref_tmp_keep_reg_417_pp0_iter32_reg <= ref_tmp_keep_reg_417_pp0_iter31_reg;
                ref_tmp_keep_reg_417_pp0_iter33_reg <= ref_tmp_keep_reg_417_pp0_iter32_reg;
                ref_tmp_keep_reg_417_pp0_iter34_reg <= ref_tmp_keep_reg_417_pp0_iter33_reg;
                ref_tmp_keep_reg_417_pp0_iter3_reg <= ref_tmp_keep_reg_417_pp0_iter2_reg;
                ref_tmp_keep_reg_417_pp0_iter4_reg <= ref_tmp_keep_reg_417_pp0_iter3_reg;
                ref_tmp_keep_reg_417_pp0_iter5_reg <= ref_tmp_keep_reg_417_pp0_iter4_reg;
                ref_tmp_keep_reg_417_pp0_iter6_reg <= ref_tmp_keep_reg_417_pp0_iter5_reg;
                ref_tmp_keep_reg_417_pp0_iter7_reg <= ref_tmp_keep_reg_417_pp0_iter6_reg;
                ref_tmp_keep_reg_417_pp0_iter8_reg <= ref_tmp_keep_reg_417_pp0_iter7_reg;
                ref_tmp_keep_reg_417_pp0_iter9_reg <= ref_tmp_keep_reg_417_pp0_iter8_reg;
                ufunc_in_second_reg_256_pp0_iter10_reg <= ufunc_in_second_reg_256_pp0_iter9_reg;
                ufunc_in_second_reg_256_pp0_iter11_reg <= ufunc_in_second_reg_256_pp0_iter10_reg;
                ufunc_in_second_reg_256_pp0_iter12_reg <= ufunc_in_second_reg_256_pp0_iter11_reg;
                ufunc_in_second_reg_256_pp0_iter13_reg <= ufunc_in_second_reg_256_pp0_iter12_reg;
                ufunc_in_second_reg_256_pp0_iter14_reg <= ufunc_in_second_reg_256_pp0_iter13_reg;
                ufunc_in_second_reg_256_pp0_iter15_reg <= ufunc_in_second_reg_256_pp0_iter14_reg;
                ufunc_in_second_reg_256_pp0_iter16_reg <= ufunc_in_second_reg_256_pp0_iter15_reg;
                ufunc_in_second_reg_256_pp0_iter17_reg <= ufunc_in_second_reg_256_pp0_iter16_reg;
                ufunc_in_second_reg_256_pp0_iter18_reg <= ufunc_in_second_reg_256_pp0_iter17_reg;
                ufunc_in_second_reg_256_pp0_iter19_reg <= ufunc_in_second_reg_256_pp0_iter18_reg;
                ufunc_in_second_reg_256_pp0_iter20_reg <= ufunc_in_second_reg_256_pp0_iter19_reg;
                ufunc_in_second_reg_256_pp0_iter21_reg <= ufunc_in_second_reg_256_pp0_iter20_reg;
                ufunc_in_second_reg_256_pp0_iter22_reg <= ufunc_in_second_reg_256_pp0_iter21_reg;
                ufunc_in_second_reg_256_pp0_iter23_reg <= ufunc_in_second_reg_256_pp0_iter22_reg;
                ufunc_in_second_reg_256_pp0_iter24_reg <= ufunc_in_second_reg_256_pp0_iter23_reg;
                ufunc_in_second_reg_256_pp0_iter25_reg <= ufunc_in_second_reg_256_pp0_iter24_reg;
                ufunc_in_second_reg_256_pp0_iter26_reg <= ufunc_in_second_reg_256_pp0_iter25_reg;
                ufunc_in_second_reg_256_pp0_iter27_reg <= ufunc_in_second_reg_256_pp0_iter26_reg;
                ufunc_in_second_reg_256_pp0_iter28_reg <= ufunc_in_second_reg_256_pp0_iter27_reg;
                ufunc_in_second_reg_256_pp0_iter29_reg <= ufunc_in_second_reg_256_pp0_iter28_reg;
                ufunc_in_second_reg_256_pp0_iter2_reg <= ufunc_in_second_reg_256_pp0_iter1_reg;
                ufunc_in_second_reg_256_pp0_iter30_reg <= ufunc_in_second_reg_256_pp0_iter29_reg;
                ufunc_in_second_reg_256_pp0_iter31_reg <= ufunc_in_second_reg_256_pp0_iter30_reg;
                ufunc_in_second_reg_256_pp0_iter32_reg <= ufunc_in_second_reg_256_pp0_iter31_reg;
                ufunc_in_second_reg_256_pp0_iter33_reg <= ufunc_in_second_reg_256_pp0_iter32_reg;
                ufunc_in_second_reg_256_pp0_iter3_reg <= ufunc_in_second_reg_256_pp0_iter2_reg;
                ufunc_in_second_reg_256_pp0_iter4_reg <= ufunc_in_second_reg_256_pp0_iter3_reg;
                ufunc_in_second_reg_256_pp0_iter5_reg <= ufunc_in_second_reg_256_pp0_iter4_reg;
                ufunc_in_second_reg_256_pp0_iter6_reg <= ufunc_in_second_reg_256_pp0_iter5_reg;
                ufunc_in_second_reg_256_pp0_iter7_reg <= ufunc_in_second_reg_256_pp0_iter6_reg;
                ufunc_in_second_reg_256_pp0_iter8_reg <= ufunc_in_second_reg_256_pp0_iter7_reg;
                ufunc_in_second_reg_256_pp0_iter9_reg <= ufunc_in_second_reg_256_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1452_reg_429_pp0_iter1_reg <= icmp_ln1452_reg_429;
                in1_c_data_V_reg_405 <= in1_s_TDATA_int_regslice;
                in1_c_data_V_reg_405_pp0_iter1_reg <= in1_c_data_V_reg_405;
                in1_c_last_V_reg_423 <= in1_s_TLAST_int_regslice;
                in1_c_last_V_reg_423_pp0_iter1_reg <= in1_c_last_V_reg_423;
                ref_tmp_keep_reg_417 <= in1_s_TKEEP_int_regslice;
                ref_tmp_keep_reg_417_pp0_iter1_reg <= ref_tmp_keep_reg_417;
                ufunc_in_second_reg_256_pp0_iter1_reg <= ufunc_in_second_reg_256;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in2 <= ap_phi_mux_ufunc_in_second_phi_fu_260_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                is_binary_load_reg_397 <= is_binary_q0;
                returns_pair_load_reg_401 <= returns_pair_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (args_read_reg_383 = ap_const_lv8_2))) then
                out_first_3_reg_443 <= grp_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (args_read_reg_383 = ap_const_lv8_4))) then
                p_Val2_2_reg_433 <= grp_exp_32_32_s_fu_306_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (args_read_reg_383 = ap_const_lv8_5))) then
                p_Val2_3_reg_448 <= p_Val2_3_log_32_32_s_fu_301_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (args_read_reg_383 = ap_const_lv8_A))) then
                p_Val2_s_reg_438 <= grp_sqrt_fixed_32_32_s_fu_296_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_block_pp0_stage0_subdone, ap_CS_fsm_state40, regslice_both_out1_s_V_data_V_U_apdone_blk, regslice_both_out2_s_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                if ((not(((regslice_both_out2_s_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_s_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state40 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out1_s_TREADY_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (out1_s_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (returns_pair_load_reg_401 = ap_const_lv1_1)) or ((out1_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state14_io, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out1_s_TREADY_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (out1_s_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) or ((out1_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp108_assign_proc : process(ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state14_io, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out1_s_TREADY_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp108 <= (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (out1_s_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) or ((out1_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp128_assign_proc : process(ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state14_io, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out1_s_TREADY_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp128 <= (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (out1_s_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) or ((out1_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state14_io, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out1_s_TREADY_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (out1_s_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) or ((out1_s_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)))));
    end process;

        ap_block_state10_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter28_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter29_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter30_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter31_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(returns_pair_load_reg_401, out2_s_TREADY_int_regslice)
    begin
                ap_block_state14_io <= ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1));
    end process;


    ap_block_state14_pp0_stage0_iter1_assign_proc : process(returns_pair_load_reg_401, out2_s_TREADY_int_regslice)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1));
    end process;


    ap_block_state14_pp0_stage0_iter1_ignore_call0_assign_proc : process(returns_pair_load_reg_401, out2_s_TREADY_int_regslice)
    begin
                ap_block_state14_pp0_stage0_iter1_ignore_call0 <= ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1));
    end process;

        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter5_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter7_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter8_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter9_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter10_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter11_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter13_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter14_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter15_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter16_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter17_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter18_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter19_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter20_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter21_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter22_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter23_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter24_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_pp0_stage0_iter35_assign_proc : process(out1_s_TREADY_int_regslice)
    begin
                ap_block_state38_pp0_stage0_iter35 <= (out1_s_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state38_pp0_stage0_iter35_ignore_call0_assign_proc : process(out1_s_TREADY_int_regslice)
    begin
                ap_block_state38_pp0_stage0_iter35_ignore_call0 <= (out1_s_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state39_pp0_stage0_iter36_assign_proc : process(out1_s_TREADY_int_regslice)
    begin
                ap_block_state39_pp0_stage0_iter36 <= (out1_s_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state39_pp0_stage0_iter36_ignore_call0_assign_proc : process(out1_s_TREADY_int_regslice)
    begin
                ap_block_state39_pp0_stage0_iter36_ignore_call0 <= (out1_s_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state3_io_assign_proc : process(returns_pair_load_reg_401, out2_s_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(is_binary_load_reg_397, returns_pair_load_reg_401, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)));
    end process;


    ap_block_state3_pp0_stage0_iter0_ignore_call0_assign_proc : process(is_binary_load_reg_397, returns_pair_load_reg_401, in1_s_TVALID_int_regslice, in2_s_TVALID_int_regslice, out2_s_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter0_ignore_call0 <= ((in1_s_TVALID_int_regslice = ap_const_logic_0) or ((is_binary_load_reg_397 = ap_const_lv1_1) and (in2_s_TVALID_int_regslice = ap_const_logic_0)) or ((out2_s_TREADY_int_regslice = ap_const_logic_0) and (returns_pair_load_reg_401 = ap_const_lv1_1)));
    end process;


    ap_block_state40_assign_proc : process(regslice_both_out1_s_V_data_V_U_apdone_blk, regslice_both_out2_s_V_data_V_U_apdone_blk)
    begin
                ap_block_state40 <= ((regslice_both_out2_s_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_s_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter32_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter33_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter34_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter25_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter26_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter27_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_627_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_627 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_749_assign_proc : process(args_read_reg_383)
    begin
                ap_condition_749 <= (not((args_read_reg_383 = ap_const_lv8_1)) and not((args_read_reg_383 = ap_const_lv8_7)) and not((args_read_reg_383 = ap_const_lv8_5)) and not((args_read_reg_383 = ap_const_lv8_2)) and not((args_read_reg_383 = ap_const_lv8_A)) and not((args_read_reg_383 = ap_const_lv8_4)) and not((args_read_reg_383 = ap_const_lv8_8)));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, in1_c_last_V_fu_328_p1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (in1_c_last_V_fu_328_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state40, regslice_both_out1_s_V_data_V_U_apdone_blk, regslice_both_out2_s_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_out2_s_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_s_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ufunc_in_second_phi_fu_260_p4_assign_proc : process(in2, is_binary_load_reg_397, ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256, in2_s_TDATA_int_regslice)
    begin
        if ((is_binary_load_reg_397 = ap_const_lv1_1)) then 
            ap_phi_mux_ufunc_in_second_phi_fu_260_p4 <= in2_s_TDATA_int_regslice;
        elsif ((is_binary_load_reg_397 = ap_const_lv1_0)) then 
            ap_phi_mux_ufunc_in_second_phi_fu_260_p4 <= in2;
        else 
            ap_phi_mux_ufunc_in_second_phi_fu_260_p4 <= ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256;
        end if; 
    end process;


    ap_phi_mux_ufunc_out_first_phi_fu_273_p18_assign_proc : process(args_read_reg_383, icmp_ln1452_reg_429_pp0_iter34_reg, ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268, grp_fu_349_p2)
    begin
        if (((icmp_ln1452_reg_429_pp0_iter34_reg = ap_const_lv1_0) and (args_read_reg_383 = ap_const_lv8_8))) then 
            ap_phi_mux_ufunc_out_first_phi_fu_273_p18 <= grp_fu_349_p2;
        else 
            ap_phi_mux_ufunc_out_first_phi_fu_273_p18 <= ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state40, regslice_both_out1_s_V_data_V_U_apdone_blk, regslice_both_out2_s_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_out2_s_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_s_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_exp_32_32_s_fu_306_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp108) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_exp_32_32_s_fu_306_ap_ce <= ap_const_logic_1;
        else 
            grp_exp_32_32_s_fu_306_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_32_32_s_fu_306_ap_start <= grp_exp_32_32_s_fu_306_ap_start_reg;

    grp_fu_349_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_349_ce <= ap_const_logic_1;
        else 
            grp_fu_349_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_sqrt_fixed_32_32_s_fu_296_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp128) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_sqrt_fixed_32_32_s_fu_296_ap_ce <= ap_const_logic_1;
        else 
            grp_sqrt_fixed_32_32_s_fu_296_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1452_fu_343_p2 <= "1" when (ap_phi_mux_ufunc_in_second_phi_fu_260_p4 = ap_const_lv32_0) else "0";
    idxprom_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(args),64));
    in1_c_last_V_fu_328_p1 <= in1_s_TLAST_int_regslice;

    in1_s_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, in1_s_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_s_TDATA_blk_n <= in1_s_TVALID_int_regslice;
        else 
            in1_s_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_s_TREADY <= regslice_both_in1_s_V_data_V_U_ack_in;

    in1_s_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_s_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_s_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in2_s_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, is_binary_load_reg_397, in2_s_TVALID_int_regslice)
    begin
        if (((is_binary_load_reg_397 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_s_TDATA_blk_n <= in2_s_TVALID_int_regslice;
        else 
            in2_s_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_s_TREADY <= regslice_both_in2_s_V_data_V_U_ack_in;

    in2_s_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, is_binary_load_reg_397, ap_block_pp0_stage0_11001)
    begin
        if (((is_binary_load_reg_397 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_s_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_s_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    is_binary_address0 <= idxprom_fu_313_p1(4 - 1 downto 0);

    is_binary_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            is_binary_ce0 <= ap_const_logic_1;
        else 
            is_binary_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out1_s_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, out1_s_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            out1_s_TDATA_blk_n <= out1_s_TREADY_int_regslice;
        else 
            out1_s_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out1_s_TVALID <= regslice_both_out1_s_V_data_V_U_vld_out;

    out1_s_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter35, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out1_s_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out1_s_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out2_s_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, returns_pair_load_reg_401, ap_enable_reg_pp0_iter1, out2_s_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (returns_pair_load_reg_401 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (returns_pair_load_reg_401 = ap_const_lv1_1)))) then 
            out2_s_TDATA_blk_n <= out2_s_TREADY_int_regslice;
        else 
            out2_s_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out2_s_TVALID <= regslice_both_out2_s_V_data_V_U_vld_out;

    out2_s_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, returns_pair_load_reg_401, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (returns_pair_load_reg_401 = ap_const_lv1_1))) then 
            out2_s_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out2_s_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    out_first_2_fu_373_p2 <= std_logic_vector(signed(in1_c_data_V_reg_405_pp0_iter33_reg) - signed(ufunc_in_second_reg_256_pp0_iter33_reg));
    out_first_fu_378_p2 <= std_logic_vector(signed(in1_c_data_V_reg_405_pp0_iter33_reg) + signed(ufunc_in_second_reg_256_pp0_iter33_reg));
    returns_pair_address0 <= idxprom_fu_313_p1(4 - 1 downto 0);

    returns_pair_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            returns_pair_ce0 <= ap_const_logic_1;
        else 
            returns_pair_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln789_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_433),32));
    zext_ln789_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_438),32));
end behav;
