-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ufunc_reduce_all_i4_do_operation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    op_read : IN STD_LOGIC_VECTOR (7 downto 0);
    x_read : IN STD_LOGIC_VECTOR (31 downto 0);
    y_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ufunc_reduce_all_i4_do_operation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal y_read_1_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_1_reg_143_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_1_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_1_reg_150_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal op_read_1_read_fu_50_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_read_1_reg_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_read_1_reg_162_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op_read_1_reg_162_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_log_32_32_s_fu_75_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_3_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_2_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_4_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_first_4_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exp_32_32_s_fu_80_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_4_reg_186 : STD_LOGIC_VECTOR (30 downto 0);
    signal out_first_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_Val2_5_log_32_32_s_fu_75_ap_ready : STD_LOGIC;
    signal grp_exp_32_32_s_fu_80_ap_start : STD_LOGIC;
    signal grp_exp_32_32_s_fu_80_ap_done : STD_LOGIC;
    signal grp_exp_32_32_s_fu_80_ap_idle : STD_LOGIC;
    signal grp_exp_32_32_s_fu_80_ap_ready : STD_LOGIC;
    signal grp_exp_32_32_s_fu_80_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp12 : BOOLEAN;
    signal ap_phi_mux_ufunc_out_first_phi_fu_59_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln789_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exp_32_32_s_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal p_Val2_1_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_119_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_109_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_ce : STD_LOGIC;
    signal grp_fu_93_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_177 : BOOLEAN;
    signal ap_condition_54 : BOOLEAN;
    signal ap_condition_145 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ufunc_reduce_all_i4_log_32_32_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ufunc_reduce_all_i4_exp_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component ufunc_reduce_all_i4_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    p_Val2_5_log_32_32_s_fu_75 : component ufunc_reduce_all_i4_log_32_32_s
    port map (
        ap_ready => p_Val2_5_log_32_32_s_fu_75_ap_ready,
        x => x_read_1_reg_150,
        ap_return => p_Val2_5_log_32_32_s_fu_75_ap_return);

    grp_exp_32_32_s_fu_80 : component ufunc_reduce_all_i4_exp_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_32_32_s_fu_80_ap_start,
        ap_done => grp_exp_32_32_s_fu_80_ap_done,
        ap_idle => grp_exp_32_32_s_fu_80_ap_idle,
        ap_ready => grp_exp_32_32_s_fu_80_ap_ready,
        ap_ce => grp_exp_32_32_s_fu_80_ap_ce,
        x => x_read_1_reg_150,
        ap_return => grp_exp_32_32_s_fu_80_ap_return);

    mul_32s_32s_32_2_1_U4 : component ufunc_reduce_all_i4_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_read,
        din1 => x_read,
        ce => grp_fu_87_ce,
        dout => grp_fu_87_p2);

    mul_32s_32s_32_2_1_U5 : component ufunc_reduce_all_i4_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_read,
        din1 => x_read,
        ce => grp_fu_93_ce,
        dout => grp_fu_93_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_32_32_s_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_32_32_s_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((op_read_1_read_fu_50_p2 = ap_const_lv8_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grp_exp_32_32_s_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_32_32_s_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_exp_32_32_s_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_54)) then
                if ((ap_const_boolean_1 = ap_condition_177)) then 
                    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56 <= x_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_145)) then
                if ((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_1)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_fu_135_p2;
                elsif ((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_2)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_2_reg_176;
                elsif ((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_3)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_3_reg_171;
                elsif ((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_5)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= p_Val2_5_reg_166;
                elsif ((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_6)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_4_reg_181;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                op_read_1_reg_162 <= op_read;
                op_read_1_reg_162_pp0_iter1_reg <= op_read_1_reg_162;
                x_read_1_reg_150 <= x_read;
                x_read_1_reg_150_pp0_iter1_reg <= x_read_1_reg_150;
                y_read_1_reg_143 <= y_read;
                y_read_1_reg_143_pp0_iter1_reg <= y_read_1_reg_143;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                op_read_1_reg_162_pp0_iter2_reg <= op_read_1_reg_162_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_read_1_reg_162 = ap_const_lv8_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_first_2_reg_176 <= grp_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_read_1_reg_162 = ap_const_lv8_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_first_3_reg_171 <= grp_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_read_1_reg_162 = ap_const_lv8_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_first_4_reg_181 <= out_first_4_fu_127_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_read_1_reg_162_pp0_iter1_reg = ap_const_lv8_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                p_Val2_4_reg_186 <= grp_exp_32_32_s_fu_80_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_read_1_reg_162 = ap_const_lv8_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_5_reg_166 <= p_Val2_5_log_32_32_s_fu_75_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_145_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
                ap_condition_145 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce));
    end process;


    ap_condition_177_assign_proc : process(op_read_1_read_fu_50_p2)
    begin
                ap_condition_177 <= (not((op_read_1_read_fu_50_p2 = ap_const_lv8_5)) and not((op_read_1_read_fu_50_p2 = ap_const_lv8_4)) and not((op_read_1_read_fu_50_p2 = ap_const_lv8_3)) and not((op_read_1_read_fu_50_p2 = ap_const_lv8_2)) and not((op_read_1_read_fu_50_p2 = ap_const_lv8_1)) and not((op_read_1_read_fu_50_p2 = ap_const_lv8_6)));
    end process;


    ap_condition_54_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
                ap_condition_54 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ufunc_out_first_phi_fu_59_p14_assign_proc : process(op_read_1_reg_162_pp0_iter2_reg, ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56, zext_ln789_fu_139_p1)
    begin
        if ((op_read_1_reg_162_pp0_iter2_reg = ap_const_lv8_4)) then 
            ap_phi_mux_ufunc_out_first_phi_fu_59_p14 <= zext_ln789_fu_139_p1;
        else 
            ap_phi_mux_ufunc_out_first_phi_fu_59_p14 <= ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_ufunc_out_first_phi_fu_59_p14;

    grp_exp_32_32_s_fu_80_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp12) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_exp_32_32_s_fu_80_ap_ce <= ap_const_logic_1;
        else 
            grp_exp_32_32_s_fu_80_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_32_32_s_fu_80_ap_start <= grp_exp_32_32_s_fu_80_ap_start_reg;

    grp_fu_87_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_87_ce <= ap_const_logic_1;
        else 
            grp_fu_87_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_93_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_93_ce <= ap_const_logic_1;
        else 
            grp_fu_93_ce <= ap_const_logic_0;
        end if; 
    end process;

    op_read_1_read_fu_50_p2 <= op_read;
    out_first_4_fu_127_p3 <= 
        p_Result_32_fu_109_p4 when (p_Result_s_fu_119_p3(0) = '1') else 
        p_Val2_1_fu_99_p2;
    out_first_fu_135_p2 <= std_logic_vector(signed(y_read_1_reg_143_pp0_iter1_reg) + signed(x_read_1_reg_150_pp0_iter1_reg));
    
    p_Result_32_fu_109_p4_proc : process(p_Val2_s_fu_103_p2)
    begin
        p_Result_32_fu_109_p4 <= p_Val2_s_fu_103_p2;
        p_Result_32_fu_109_p4(31) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_119_p3 <= p_Val2_1_fu_99_p2(31 downto 31);
    p_Val2_1_fu_99_p2 <= std_logic_vector(unsigned(x_read_1_reg_150) - unsigned(y_read_1_reg_143));
    p_Val2_s_fu_103_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_1_fu_99_p2));
    zext_ln789_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_reg_186),32));
end behav;
