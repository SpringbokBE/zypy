// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ufunc_call_f4_sin_or_cos_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        t_in,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] t_in;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] ref_4oPi_table_100_V_address0;
reg    ref_4oPi_table_100_V_ce0;
wire   [99:0] ref_4oPi_table_100_V_q0;
wire   [7:0] second_order_float_sin_cos_K0_V_address0;
reg    second_order_float_sin_cos_K0_V_ce0;
wire   [29:0] second_order_float_sin_cos_K0_V_q0;
wire   [7:0] second_order_float_sin_cos_K1_V_address0;
reg    second_order_float_sin_cos_K1_V_ce0;
wire   [22:0] second_order_float_sin_cos_K1_V_q0;
wire   [7:0] second_order_float_sin_cos_K2_V_address0;
reg    second_order_float_sin_cos_K2_V_ce0;
wire  signed [14:0] second_order_float_sin_cos_K2_V_q0;
reg   [0:0] p_Result_67_reg_1095;
reg   [0:0] p_Result_67_reg_1095_pp0_iter1_reg;
reg   [0:0] p_Result_67_reg_1095_pp0_iter2_reg;
reg   [0:0] p_Result_67_reg_1095_pp0_iter3_reg;
reg   [0:0] p_Result_67_reg_1095_pp0_iter4_reg;
reg   [0:0] p_Result_67_reg_1095_pp0_iter5_reg;
reg   [0:0] p_Result_67_reg_1095_pp0_iter6_reg;
wire   [7:0] tmp_118_fu_242_p4;
reg   [7:0] tmp_118_reg_1101;
reg   [7:0] tmp_118_reg_1101_pp0_iter1_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter2_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter3_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter4_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter5_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter6_reg;
reg   [7:0] tmp_118_reg_1101_pp0_iter7_reg;
wire   [22:0] tmp_119_fu_252_p1;
reg   [22:0] tmp_119_reg_1109;
reg   [22:0] tmp_119_reg_1109_pp0_iter1_reg;
wire   [0:0] closepath_fu_256_p2;
reg   [0:0] closepath_reg_1115;
reg   [0:0] closepath_reg_1115_pp0_iter1_reg;
reg   [0:0] closepath_reg_1115_pp0_iter2_reg;
reg   [0:0] closepath_reg_1115_pp0_iter3_reg;
reg   [0:0] closepath_reg_1115_pp0_iter4_reg;
reg   [0:0] closepath_reg_1115_pp0_iter5_reg;
reg   [0:0] closepath_reg_1115_pp0_iter6_reg;
reg   [0:0] closepath_reg_1115_pp0_iter7_reg;
wire   [3:0] trunc_ln628_fu_291_p1;
reg   [3:0] trunc_ln628_reg_1127;
reg  signed [79:0] Med_V_reg_1132;
wire   [0:0] icmp_ln824_fu_330_p2;
reg   [0:0] icmp_ln824_reg_1142;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter3_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter4_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter5_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter6_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter7_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter8_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter9_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter10_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter11_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter12_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter13_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter14_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter15_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter16_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter17_reg;
reg   [0:0] icmp_ln824_reg_1142_pp0_iter18_reg;
wire   [79:0] grp_fu_325_p2;
reg   [79:0] ret_18_reg_1149;
reg   [57:0] Mx_bits_V_reg_1154;
reg   [2:0] k_V_reg_1161;
wire   [57:0] Mx_bits_V_3_fu_380_p3;
reg   [57:0] Mx_bits_V_3_reg_1166;
wire   [5:0] Mx_zeros_fu_430_p1;
reg   [5:0] Mx_zeros_reg_1171;
wire   [0:0] cos_basis_fu_434_p10;
reg   [0:0] cos_basis_reg_1177;
reg   [0:0] cos_basis_reg_1177_pp0_iter8_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter9_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter10_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter11_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter12_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter13_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter14_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter15_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter16_reg;
reg   [0:0] cos_basis_reg_1177_pp0_iter17_reg;
wire   [0:0] icmp_ln300_1_fu_564_p2;
reg   [0:0] icmp_ln300_1_reg_1184;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter8_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter9_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter10_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter11_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter12_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter13_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter14_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter15_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter16_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter17_reg;
reg   [0:0] icmp_ln300_1_reg_1184_pp0_iter18_reg;
wire   [0:0] results_sign_V_fu_569_p3;
reg   [0:0] results_sign_V_reg_1190;
reg   [0:0] results_sign_V_reg_1190_pp0_iter8_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter9_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter10_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter11_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter12_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter13_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter14_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter15_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter16_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter17_reg;
reg   [0:0] results_sign_V_reg_1190_pp0_iter18_reg;
reg   [28:0] Mx_V_reg_1195;
reg   [28:0] Mx_V_reg_1195_pp0_iter9_reg;
reg   [28:0] Mx_V_reg_1195_pp0_iter10_reg;
reg   [28:0] Mx_V_reg_1195_pp0_iter11_reg;
reg   [28:0] Mx_V_reg_1195_pp0_iter12_reg;
reg   [28:0] Mx_V_reg_1195_pp0_iter13_reg;
reg   [28:0] Mx_V_reg_1195_pp0_iter14_reg;
wire  signed [7:0] Ex_V_3_fu_610_p2;
reg  signed [7:0] Ex_V_3_reg_1201;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter9_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter10_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter11_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter12_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter13_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter14_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter15_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter16_reg;
reg  signed [7:0] Ex_V_3_reg_1201_pp0_iter17_reg;
wire   [0:0] isNeg_fu_620_p3;
reg   [0:0] isNeg_reg_1206;
wire   [8:0] ush_fu_634_p3;
reg   [8:0] ush_reg_1211;
wire   [0:0] icmp_ln300_2_fu_642_p2;
reg   [0:0] icmp_ln300_2_reg_1216;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter9_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter10_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter11_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter12_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter13_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter14_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter15_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter16_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter17_reg;
reg   [0:0] icmp_ln300_2_reg_1216_pp0_iter18_reg;
wire   [21:0] B_fu_672_p1;
reg   [21:0] B_reg_1222;
reg   [21:0] B_reg_1222_pp0_iter10_reg;
reg   [21:0] B_reg_1222_pp0_iter11_reg;
reg   [21:0] B_reg_1222_pp0_iter12_reg;
reg   [6:0] p_Result_5_reg_1227;
reg   [6:0] p_Result_5_reg_1227_pp0_iter10_reg;
wire   [29:0] zext_ln1070_fu_696_p1;
reg   [28:0] t1_reg_1258;
reg   [28:0] t1_reg_1258_pp0_iter13_reg;
reg   [28:0] t1_reg_1258_pp0_iter14_reg;
reg  signed [22:0] second_order_float_sin_cos_K1_V_load_reg_1263;
reg   [21:0] rhs_1_reg_1273;
reg   [21:0] rhs_1_reg_1273_pp0_iter14_reg;
wire   [28:0] Mx_V_1_fu_768_p3;
reg   [28:0] Mx_V_1_reg_1278;
wire   [29:0] ret_V_1_fu_799_p2;
reg  signed [29:0] ret_V_1_reg_1283;
reg   [28:0] result_V_reg_1298;
reg   [15:0] p_Result_7_reg_1304;
reg   [12:0] p_Result_9_reg_1309;
reg   [31:0] tmp_1_fu_889_p3;
reg   [31:0] tmp_1_reg_1314;
wire   [31:0] shl_ln1253_2_fu_910_p2;
reg   [31:0] shl_ln1253_2_reg_1319;
wire   [0:0] icmp_ln321_fu_916_p2;
reg   [0:0] icmp_ln321_reg_1325;
wire   [0:0] or_ln335_fu_965_p2;
reg   [0:0] or_ln335_reg_1330;
wire   [7:0] trunc_ln255_fu_971_p1;
reg   [7:0] trunc_ln255_reg_1336;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln488_fu_286_p1;
wire   [63:0] zext_ln488_1_fu_712_p1;
wire   [31:0] data_V_fu_230_p1;
wire   [7:0] add_ln116_fu_262_p2;
wire   [7:0] addr_V_fu_268_p3;
wire   [3:0] r_fu_276_p4;
wire   [99:0] zext_ln735_fu_295_p1;
wire   [99:0] r_3_fu_298_p2;
wire   [23:0] p_Result_68_fu_314_p3;
wire   [23:0] grp_fu_325_p1;
wire   [0:0] tmp_113_fu_355_p3;
wire   [57:0] Mx_bits_V_1_fu_362_p2;
wire   [57:0] select_ln520_fu_367_p3;
wire   [28:0] p_Result_2_fu_386_p4;
wire   [29:0] p_Result_69_fu_396_p3;
reg   [29:0] p_Result_s_fu_404_p4;
wire   [31:0] p_Result_70_fu_414_p3;
reg   [31:0] val_assign_fu_422_p3;
wire   [2:0] select_ln832_fu_374_p3;
wire   [3:0] p_Result_72_fu_456_p3;
wire   [0:0] tmp_fu_463_p18;
wire   [0:0] tmp_5_fu_501_p18;
wire   [0:0] results_sign_V_1_fu_539_p3;
wire   [0:0] icmp_ln300_fu_553_p2;
wire   [0:0] select_ln311_fu_547_p3;
wire   [0:0] and_ln300_fu_558_p2;
wire   [7:0] Ex_V_fu_577_p2;
wire   [57:0] zext_ln1253_fu_592_p1;
wire   [57:0] r_2_fu_595_p2;
wire   [7:0] select_ln482_fu_582_p3;
wire   [7:0] zext_ln646_fu_589_p1;
wire  signed [8:0] sext_ln1334_fu_616_p1;
wire   [8:0] sub_ln1311_fu_628_p2;
wire   [31:0] conv_i_i_i_i166_fu_650_p1;
wire  signed [31:0] sext_ln1311_fu_647_p1;
wire   [31:0] lshr_ln1287_fu_653_p2;
wire   [31:0] shl_ln1253_fu_659_p2;
wire   [31:0] select_ln1312_fu_665_p3;
wire   [14:0] B_trunc_fu_686_p4;
wire   [0:0] sin_basis_fu_700_p2;
wire   [7:0] p_Result_71_fu_705_p3;
wire   [29:0] grp_fu_1081_p2;
wire   [14:0] B_squared_fu_719_p4;
wire   [21:0] r_V_5_fu_752_p1;
wire   [44:0] r_V_5_fu_752_p2;
wire  signed [29:0] grp_fu_1088_p2;
wire  signed [29:0] sext_ln657_fu_783_p1;
wire  signed [29:0] sext_ln657_1_fu_786_p1;
wire   [13:0] rhs_2_fu_774_p4;
wire   [29:0] ret_V_fu_789_p2;
wire  signed [29:0] sext_ln1146_fu_795_p1;
wire   [28:0] grp_fu_811_p1;
wire   [57:0] grp_fu_811_p2;
wire   [31:0] p_Result_6_fu_847_p3;
reg   [31:0] p_Result_s_49_fu_861_p4;
wire   [31:0] p_Result_8_fu_854_p3;
reg   [31:0] p_Result_77_1_fu_879_p4;
wire   [7:0] Ex_V_4_fu_897_p3;
wire   [31:0] conv_i_i25_i_0_fu_907_p1;
reg   [31:0] tmp1_fu_871_p3;
wire   [31:0] add_ln319_fu_922_p2;
wire  signed [8:0] sext_ln169_fu_903_p1;
wire   [8:0] add_ln329_fu_936_p2;
wire  signed [31:0] sext_ln329_fu_942_p1;
wire   [31:0] select_ln321_fu_928_p3;
wire   [31:0] newexp_fu_946_p2;
wire   [0:0] tmp_115_fu_952_p3;
wire   [0:0] icmp_ln1452_fu_960_p2;
wire   [27:0] trunc_ln1312_fu_975_p1;
wire   [31:0] conv_i_i25_i_1_fu_978_p1;
wire   [31:0] shl_ln1253_3_fu_982_p2;
wire   [22:0] tmp_s_fu_987_p4;
wire   [22:0] tmp_3_fu_997_p4;
wire   [22:0] select_ln321_1_fu_1006_p3;
wire   [7:0] out_exp_V_fu_1020_p3;
wire   [22:0] significand_fu_1013_p3;
wire   [7:0] select_ln311_1_fu_1026_p3;
wire   [7:0] select_ln300_1_fu_1040_p3;
wire   [22:0] select_ln311_2_fu_1033_p3;
wire   [22:0] select_ln300_3_fu_1054_p3;
wire   [7:0] results_exp_V_fu_1047_p3;
wire   [22:0] results_sig_V_fu_1061_p3;
wire   [31:0] p_Result_73_fu_1068_p4;
wire   [14:0] grp_fu_1081_p0;
wire   [14:0] grp_fu_1081_p1;
wire   [14:0] grp_fu_1088_p0;
reg    grp_fu_325_ce;
reg    grp_fu_811_ce;
reg    grp_fu_1081_ce;
reg    grp_fu_1088_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to18;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [29:0] grp_fu_1088_p00;
wire   [79:0] grp_fu_325_p10;
wire   [57:0] grp_fu_811_p10;
wire   [44:0] r_V_5_fu_752_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

ufunc_call_f4_sin_or_cos_float_s_ref_4oPi_table_100_V #(
    .DataWidth( 100 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
ref_4oPi_table_100_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ref_4oPi_table_100_V_address0),
    .ce0(ref_4oPi_table_100_V_ce0),
    .q0(ref_4oPi_table_100_V_q0)
);

ufunc_call_f4_sin_or_cos_float_s_second_order_float_sin_cos_K0_V #(
    .DataWidth( 30 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_sin_cos_K0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_order_float_sin_cos_K0_V_address0),
    .ce0(second_order_float_sin_cos_K0_V_ce0),
    .q0(second_order_float_sin_cos_K0_V_q0)
);

ufunc_call_f4_sin_or_cos_float_s_second_order_float_sin_cos_K1_V #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_sin_cos_K1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_order_float_sin_cos_K1_V_address0),
    .ce0(second_order_float_sin_cos_K1_V_ce0),
    .q0(second_order_float_sin_cos_K1_V_q0)
);

ufunc_call_f4_sin_or_cos_float_s_second_order_float_sin_cos_K2_V #(
    .DataWidth( 15 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
second_order_float_sin_cos_K2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_order_float_sin_cos_K2_V_address0),
    .ce0(second_order_float_sin_cos_K2_V_ce0),
    .q0(second_order_float_sin_cos_K2_V_q0)
);

ufunc_call_f4_mul_80s_24ns_80_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 80 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 80 ))
mul_80s_24ns_80_5_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Med_V_reg_1132),
    .din1(grp_fu_325_p1),
    .ce(grp_fu_325_ce),
    .dout(grp_fu_325_p2)
);

ufunc_call_f4_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U38(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd1),
    .din6(1'd1),
    .din7(1'd0),
    .din8(select_ln832_fu_374_p3),
    .dout(cos_basis_fu_434_p10)
);

ufunc_call_f4_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U39(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd1),
    .din4(1'd1),
    .din5(1'd1),
    .din6(1'd1),
    .din7(1'd0),
    .din8(1'd0),
    .din9(1'd1),
    .din10(1'd1),
    .din11(1'd1),
    .din12(1'd1),
    .din13(1'd0),
    .din14(1'd0),
    .din15(1'd0),
    .din16(p_Result_72_fu_456_p3),
    .dout(tmp_fu_463_p18)
);

ufunc_call_f4_mux_164_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 1 ))
mux_164_1_1_1_U40(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd1),
    .din5(1'd1),
    .din6(1'd0),
    .din7(1'd1),
    .din8(1'd1),
    .din9(1'd0),
    .din10(1'd1),
    .din11(1'd1),
    .din12(1'd0),
    .din13(1'd1),
    .din14(1'd0),
    .din15(1'd0),
    .din16(p_Result_72_fu_456_p3),
    .dout(tmp_5_fu_501_p18)
);

ufunc_call_f4_mul_23s_22ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 45 ))
mul_23s_22ns_45_1_1_U41(
    .din0(second_order_float_sin_cos_K1_V_load_reg_1263),
    .din1(r_V_5_fu_752_p1),
    .dout(r_V_5_fu_752_p2)
);

ufunc_call_f4_mul_30s_29ns_58_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mul_30s_29ns_58_2_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_V_1_reg_1283),
    .din1(grp_fu_811_p1),
    .ce(grp_fu_811_ce),
    .dout(grp_fu_811_p2)
);

ufunc_call_f4_mul_mul_15ns_15ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mul_mul_15ns_15ns_30_4_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1081_p0),
    .din1(grp_fu_1081_p1),
    .ce(grp_fu_1081_ce),
    .dout(grp_fu_1081_p2)
);

ufunc_call_f4_mul_mul_15ns_15s_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mul_mul_15ns_15s_30_4_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1088_p0),
    .din1(second_order_float_sin_cos_K2_V_q0),
    .ce(grp_fu_1088_ce),
    .dout(grp_fu_1088_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        B_reg_1222 <= B_fu_672_p1;
        B_reg_1222_pp0_iter10_reg <= B_reg_1222;
        B_reg_1222_pp0_iter11_reg <= B_reg_1222_pp0_iter10_reg;
        B_reg_1222_pp0_iter12_reg <= B_reg_1222_pp0_iter11_reg;
        Ex_V_3_reg_1201 <= Ex_V_3_fu_610_p2;
        Ex_V_3_reg_1201_pp0_iter10_reg <= Ex_V_3_reg_1201_pp0_iter9_reg;
        Ex_V_3_reg_1201_pp0_iter11_reg <= Ex_V_3_reg_1201_pp0_iter10_reg;
        Ex_V_3_reg_1201_pp0_iter12_reg <= Ex_V_3_reg_1201_pp0_iter11_reg;
        Ex_V_3_reg_1201_pp0_iter13_reg <= Ex_V_3_reg_1201_pp0_iter12_reg;
        Ex_V_3_reg_1201_pp0_iter14_reg <= Ex_V_3_reg_1201_pp0_iter13_reg;
        Ex_V_3_reg_1201_pp0_iter15_reg <= Ex_V_3_reg_1201_pp0_iter14_reg;
        Ex_V_3_reg_1201_pp0_iter16_reg <= Ex_V_3_reg_1201_pp0_iter15_reg;
        Ex_V_3_reg_1201_pp0_iter17_reg <= Ex_V_3_reg_1201_pp0_iter16_reg;
        Ex_V_3_reg_1201_pp0_iter9_reg <= Ex_V_3_reg_1201;
        Mx_V_1_reg_1278 <= Mx_V_1_fu_768_p3;
        Mx_V_reg_1195 <= {{r_2_fu_595_p2[57:29]}};
        Mx_V_reg_1195_pp0_iter10_reg <= Mx_V_reg_1195_pp0_iter9_reg;
        Mx_V_reg_1195_pp0_iter11_reg <= Mx_V_reg_1195_pp0_iter10_reg;
        Mx_V_reg_1195_pp0_iter12_reg <= Mx_V_reg_1195_pp0_iter11_reg;
        Mx_V_reg_1195_pp0_iter13_reg <= Mx_V_reg_1195_pp0_iter12_reg;
        Mx_V_reg_1195_pp0_iter14_reg <= Mx_V_reg_1195_pp0_iter13_reg;
        Mx_V_reg_1195_pp0_iter9_reg <= Mx_V_reg_1195;
        Mx_bits_V_3_reg_1166 <= Mx_bits_V_3_fu_380_p3;
        Mx_bits_V_reg_1154 <= {{grp_fu_325_p2[76:19]}};
        Mx_zeros_reg_1171 <= Mx_zeros_fu_430_p1;
        closepath_reg_1115_pp0_iter2_reg <= closepath_reg_1115_pp0_iter1_reg;
        closepath_reg_1115_pp0_iter3_reg <= closepath_reg_1115_pp0_iter2_reg;
        closepath_reg_1115_pp0_iter4_reg <= closepath_reg_1115_pp0_iter3_reg;
        closepath_reg_1115_pp0_iter5_reg <= closepath_reg_1115_pp0_iter4_reg;
        closepath_reg_1115_pp0_iter6_reg <= closepath_reg_1115_pp0_iter5_reg;
        closepath_reg_1115_pp0_iter7_reg <= closepath_reg_1115_pp0_iter6_reg;
        cos_basis_reg_1177 <= cos_basis_fu_434_p10;
        cos_basis_reg_1177_pp0_iter10_reg <= cos_basis_reg_1177_pp0_iter9_reg;
        cos_basis_reg_1177_pp0_iter11_reg <= cos_basis_reg_1177_pp0_iter10_reg;
        cos_basis_reg_1177_pp0_iter12_reg <= cos_basis_reg_1177_pp0_iter11_reg;
        cos_basis_reg_1177_pp0_iter13_reg <= cos_basis_reg_1177_pp0_iter12_reg;
        cos_basis_reg_1177_pp0_iter14_reg <= cos_basis_reg_1177_pp0_iter13_reg;
        cos_basis_reg_1177_pp0_iter15_reg <= cos_basis_reg_1177_pp0_iter14_reg;
        cos_basis_reg_1177_pp0_iter16_reg <= cos_basis_reg_1177_pp0_iter15_reg;
        cos_basis_reg_1177_pp0_iter17_reg <= cos_basis_reg_1177_pp0_iter16_reg;
        cos_basis_reg_1177_pp0_iter8_reg <= cos_basis_reg_1177;
        cos_basis_reg_1177_pp0_iter9_reg <= cos_basis_reg_1177_pp0_iter8_reg;
        icmp_ln300_1_reg_1184 <= icmp_ln300_1_fu_564_p2;
        icmp_ln300_1_reg_1184_pp0_iter10_reg <= icmp_ln300_1_reg_1184_pp0_iter9_reg;
        icmp_ln300_1_reg_1184_pp0_iter11_reg <= icmp_ln300_1_reg_1184_pp0_iter10_reg;
        icmp_ln300_1_reg_1184_pp0_iter12_reg <= icmp_ln300_1_reg_1184_pp0_iter11_reg;
        icmp_ln300_1_reg_1184_pp0_iter13_reg <= icmp_ln300_1_reg_1184_pp0_iter12_reg;
        icmp_ln300_1_reg_1184_pp0_iter14_reg <= icmp_ln300_1_reg_1184_pp0_iter13_reg;
        icmp_ln300_1_reg_1184_pp0_iter15_reg <= icmp_ln300_1_reg_1184_pp0_iter14_reg;
        icmp_ln300_1_reg_1184_pp0_iter16_reg <= icmp_ln300_1_reg_1184_pp0_iter15_reg;
        icmp_ln300_1_reg_1184_pp0_iter17_reg <= icmp_ln300_1_reg_1184_pp0_iter16_reg;
        icmp_ln300_1_reg_1184_pp0_iter18_reg <= icmp_ln300_1_reg_1184_pp0_iter17_reg;
        icmp_ln300_1_reg_1184_pp0_iter8_reg <= icmp_ln300_1_reg_1184;
        icmp_ln300_1_reg_1184_pp0_iter9_reg <= icmp_ln300_1_reg_1184_pp0_iter8_reg;
        icmp_ln300_2_reg_1216 <= icmp_ln300_2_fu_642_p2;
        icmp_ln300_2_reg_1216_pp0_iter10_reg <= icmp_ln300_2_reg_1216_pp0_iter9_reg;
        icmp_ln300_2_reg_1216_pp0_iter11_reg <= icmp_ln300_2_reg_1216_pp0_iter10_reg;
        icmp_ln300_2_reg_1216_pp0_iter12_reg <= icmp_ln300_2_reg_1216_pp0_iter11_reg;
        icmp_ln300_2_reg_1216_pp0_iter13_reg <= icmp_ln300_2_reg_1216_pp0_iter12_reg;
        icmp_ln300_2_reg_1216_pp0_iter14_reg <= icmp_ln300_2_reg_1216_pp0_iter13_reg;
        icmp_ln300_2_reg_1216_pp0_iter15_reg <= icmp_ln300_2_reg_1216_pp0_iter14_reg;
        icmp_ln300_2_reg_1216_pp0_iter16_reg <= icmp_ln300_2_reg_1216_pp0_iter15_reg;
        icmp_ln300_2_reg_1216_pp0_iter17_reg <= icmp_ln300_2_reg_1216_pp0_iter16_reg;
        icmp_ln300_2_reg_1216_pp0_iter18_reg <= icmp_ln300_2_reg_1216_pp0_iter17_reg;
        icmp_ln300_2_reg_1216_pp0_iter9_reg <= icmp_ln300_2_reg_1216;
        icmp_ln321_reg_1325 <= icmp_ln321_fu_916_p2;
        icmp_ln824_reg_1142 <= icmp_ln824_fu_330_p2;
        icmp_ln824_reg_1142_pp0_iter10_reg <= icmp_ln824_reg_1142_pp0_iter9_reg;
        icmp_ln824_reg_1142_pp0_iter11_reg <= icmp_ln824_reg_1142_pp0_iter10_reg;
        icmp_ln824_reg_1142_pp0_iter12_reg <= icmp_ln824_reg_1142_pp0_iter11_reg;
        icmp_ln824_reg_1142_pp0_iter13_reg <= icmp_ln824_reg_1142_pp0_iter12_reg;
        icmp_ln824_reg_1142_pp0_iter14_reg <= icmp_ln824_reg_1142_pp0_iter13_reg;
        icmp_ln824_reg_1142_pp0_iter15_reg <= icmp_ln824_reg_1142_pp0_iter14_reg;
        icmp_ln824_reg_1142_pp0_iter16_reg <= icmp_ln824_reg_1142_pp0_iter15_reg;
        icmp_ln824_reg_1142_pp0_iter17_reg <= icmp_ln824_reg_1142_pp0_iter16_reg;
        icmp_ln824_reg_1142_pp0_iter18_reg <= icmp_ln824_reg_1142_pp0_iter17_reg;
        icmp_ln824_reg_1142_pp0_iter3_reg <= icmp_ln824_reg_1142;
        icmp_ln824_reg_1142_pp0_iter4_reg <= icmp_ln824_reg_1142_pp0_iter3_reg;
        icmp_ln824_reg_1142_pp0_iter5_reg <= icmp_ln824_reg_1142_pp0_iter4_reg;
        icmp_ln824_reg_1142_pp0_iter6_reg <= icmp_ln824_reg_1142_pp0_iter5_reg;
        icmp_ln824_reg_1142_pp0_iter7_reg <= icmp_ln824_reg_1142_pp0_iter6_reg;
        icmp_ln824_reg_1142_pp0_iter8_reg <= icmp_ln824_reg_1142_pp0_iter7_reg;
        icmp_ln824_reg_1142_pp0_iter9_reg <= icmp_ln824_reg_1142_pp0_iter8_reg;
        isNeg_reg_1206 <= Ex_V_3_fu_610_p2[32'd7];
        or_ln335_reg_1330 <= or_ln335_fu_965_p2;
        p_Result_5_reg_1227 <= {{select_ln1312_fu_665_p3[28:22]}};
        p_Result_5_reg_1227_pp0_iter10_reg <= p_Result_5_reg_1227;
        p_Result_67_reg_1095_pp0_iter2_reg <= p_Result_67_reg_1095_pp0_iter1_reg;
        p_Result_67_reg_1095_pp0_iter3_reg <= p_Result_67_reg_1095_pp0_iter2_reg;
        p_Result_67_reg_1095_pp0_iter4_reg <= p_Result_67_reg_1095_pp0_iter3_reg;
        p_Result_67_reg_1095_pp0_iter5_reg <= p_Result_67_reg_1095_pp0_iter4_reg;
        p_Result_67_reg_1095_pp0_iter6_reg <= p_Result_67_reg_1095_pp0_iter5_reg;
        p_Result_7_reg_1304 <= {{grp_fu_811_p2[57:42]}};
        p_Result_9_reg_1309 <= {{grp_fu_811_p2[41:29]}};
        result_V_reg_1298 <= {{grp_fu_811_p2[57:29]}};
        results_sign_V_reg_1190 <= results_sign_V_fu_569_p3;
        results_sign_V_reg_1190_pp0_iter10_reg <= results_sign_V_reg_1190_pp0_iter9_reg;
        results_sign_V_reg_1190_pp0_iter11_reg <= results_sign_V_reg_1190_pp0_iter10_reg;
        results_sign_V_reg_1190_pp0_iter12_reg <= results_sign_V_reg_1190_pp0_iter11_reg;
        results_sign_V_reg_1190_pp0_iter13_reg <= results_sign_V_reg_1190_pp0_iter12_reg;
        results_sign_V_reg_1190_pp0_iter14_reg <= results_sign_V_reg_1190_pp0_iter13_reg;
        results_sign_V_reg_1190_pp0_iter15_reg <= results_sign_V_reg_1190_pp0_iter14_reg;
        results_sign_V_reg_1190_pp0_iter16_reg <= results_sign_V_reg_1190_pp0_iter15_reg;
        results_sign_V_reg_1190_pp0_iter17_reg <= results_sign_V_reg_1190_pp0_iter16_reg;
        results_sign_V_reg_1190_pp0_iter18_reg <= results_sign_V_reg_1190_pp0_iter17_reg;
        results_sign_V_reg_1190_pp0_iter8_reg <= results_sign_V_reg_1190;
        results_sign_V_reg_1190_pp0_iter9_reg <= results_sign_V_reg_1190_pp0_iter8_reg;
        ret_18_reg_1149 <= grp_fu_325_p2;
        ret_V_1_reg_1283 <= ret_V_1_fu_799_p2;
        rhs_1_reg_1273 <= {{r_V_5_fu_752_p2[44:23]}};
        rhs_1_reg_1273_pp0_iter14_reg <= rhs_1_reg_1273;
        second_order_float_sin_cos_K1_V_load_reg_1263 <= second_order_float_sin_cos_K1_V_q0;
        shl_ln1253_2_reg_1319 <= shl_ln1253_2_fu_910_p2;
        t1_reg_1258 <= {{second_order_float_sin_cos_K0_V_q0[29:1]}};
        t1_reg_1258_pp0_iter13_reg <= t1_reg_1258;
        t1_reg_1258_pp0_iter14_reg <= t1_reg_1258_pp0_iter13_reg;
        tmp_118_reg_1101_pp0_iter2_reg <= tmp_118_reg_1101_pp0_iter1_reg;
        tmp_118_reg_1101_pp0_iter3_reg <= tmp_118_reg_1101_pp0_iter2_reg;
        tmp_118_reg_1101_pp0_iter4_reg <= tmp_118_reg_1101_pp0_iter3_reg;
        tmp_118_reg_1101_pp0_iter5_reg <= tmp_118_reg_1101_pp0_iter4_reg;
        tmp_118_reg_1101_pp0_iter6_reg <= tmp_118_reg_1101_pp0_iter5_reg;
        tmp_118_reg_1101_pp0_iter7_reg <= tmp_118_reg_1101_pp0_iter6_reg;
        tmp_1_reg_1314 <= tmp_1_fu_889_p3;
        trunc_ln255_reg_1336 <= trunc_ln255_fu_971_p1;
        ush_reg_1211 <= ush_fu_634_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        Med_V_reg_1132 <= {{r_3_fu_298_p2[99:20]}};
        closepath_reg_1115 <= closepath_fu_256_p2;
        closepath_reg_1115_pp0_iter1_reg <= closepath_reg_1115;
        p_Result_67_reg_1095 <= data_V_fu_230_p1[32'd31];
        p_Result_67_reg_1095_pp0_iter1_reg <= p_Result_67_reg_1095;
        tmp_118_reg_1101 <= {{data_V_fu_230_p1[30:23]}};
        tmp_118_reg_1101_pp0_iter1_reg <= tmp_118_reg_1101;
        tmp_119_reg_1109 <= tmp_119_fu_252_p1;
        tmp_119_reg_1109_pp0_iter1_reg <= tmp_119_reg_1109;
        trunc_ln628_reg_1127 <= trunc_ln628_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (closepath_reg_1115_pp0_iter5_reg == 1'd0))) begin
        k_V_reg_1161 <= {{grp_fu_325_p2[79:77]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to18 = 1'b1;
    end else begin
        ap_idle_pp0_0to18 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to18 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        grp_fu_1081_ce = 1'b1;
    end else begin
        grp_fu_1081_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        grp_fu_1088_ce = 1'b1;
    end else begin
        grp_fu_1088_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        grp_fu_325_ce = 1'b1;
    end else begin
        grp_fu_325_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        grp_fu_811_ce = 1'b1;
    end else begin
        grp_fu_811_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ref_4oPi_table_100_V_ce0 = 1'b1;
    end else begin
        ref_4oPi_table_100_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        second_order_float_sin_cos_K0_V_ce0 = 1'b1;
    end else begin
        second_order_float_sin_cos_K0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        second_order_float_sin_cos_K1_V_ce0 = 1'b1;
    end else begin
        second_order_float_sin_cos_K1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        second_order_float_sin_cos_K2_V_ce0 = 1'b1;
    end else begin
        second_order_float_sin_cos_K2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_672_p1 = select_ln1312_fu_665_p3[21:0];

assign B_squared_fu_719_p4 = {{grp_fu_1081_p2[29:15]}};

assign B_trunc_fu_686_p4 = {{select_ln1312_fu_665_p3[21:7]}};

assign Ex_V_3_fu_610_p2 = (select_ln482_fu_582_p3 - zext_ln646_fu_589_p1);

assign Ex_V_4_fu_897_p3 = ((cos_basis_reg_1177_pp0_iter17_reg[0:0] == 1'b1) ? 8'd0 : Ex_V_3_reg_1201_pp0_iter17_reg);

assign Ex_V_fu_577_p2 = ($signed(tmp_118_reg_1101_pp0_iter7_reg) + $signed(8'd131));

assign Mx_V_1_fu_768_p3 = ((cos_basis_reg_1177_pp0_iter14_reg[0:0] == 1'b1) ? 29'd536870911 : Mx_V_reg_1195_pp0_iter14_reg);

assign Mx_bits_V_1_fu_362_p2 = (58'd0 - Mx_bits_V_reg_1154);

assign Mx_bits_V_3_fu_380_p3 = ((closepath_reg_1115_pp0_iter6_reg[0:0] == 1'b1) ? Mx_bits_V_reg_1154 : select_ln520_fu_367_p3);

assign Mx_zeros_fu_430_p1 = val_assign_fu_422_p3[5:0];

assign add_ln116_fu_262_p2 = ($signed(tmp_118_fu_242_p4) + $signed(8'd194));

assign add_ln319_fu_922_p2 = (tmp_1_fu_889_p3 + 32'd16);

assign add_ln329_fu_936_p2 = ($signed(sext_ln169_fu_903_p1) + $signed(9'd127));

assign addr_V_fu_268_p3 = ((closepath_fu_256_p2[0:0] == 1'b1) ? 8'd63 : add_ln116_fu_262_p2);

assign and_ln300_fu_558_p2 = (results_sign_V_1_fu_539_p3 & icmp_ln300_fu_553_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = p_Result_73_fu_1068_p4;

assign closepath_fu_256_p2 = ((tmp_118_fu_242_p4 < 8'd126) ? 1'b1 : 1'b0);

assign conv_i_i25_i_0_fu_907_p1 = result_V_reg_1298;

assign conv_i_i25_i_1_fu_978_p1 = trunc_ln1312_fu_975_p1;

assign conv_i_i_i_i166_fu_650_p1 = Mx_V_reg_1195;

assign data_V_fu_230_p1 = t_in;

assign grp_fu_1081_p0 = zext_ln1070_fu_696_p1;

assign grp_fu_1081_p1 = zext_ln1070_fu_696_p1;

assign grp_fu_1088_p0 = grp_fu_1088_p00;

assign grp_fu_1088_p00 = B_squared_fu_719_p4;

assign grp_fu_325_p1 = grp_fu_325_p10;

assign grp_fu_325_p10 = p_Result_68_fu_314_p3;

assign grp_fu_811_p1 = grp_fu_811_p10;

assign grp_fu_811_p10 = Mx_V_1_reg_1278;

assign icmp_ln1452_fu_960_p2 = ((result_V_reg_1298 == 29'd0) ? 1'b1 : 1'b0);

assign icmp_ln300_1_fu_564_p2 = ((tmp_118_reg_1101_pp0_iter6_reg == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln300_2_fu_642_p2 = ((tmp_118_reg_1101_pp0_iter7_reg == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_553_p2 = ((tmp_118_reg_1101_pp0_iter6_reg != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_916_p2 = ((tmp1_fu_871_p3 == 32'd16) ? 1'b1 : 1'b0);

assign icmp_ln824_fu_330_p2 = ((tmp_119_reg_1109_pp0_iter1_reg == 23'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_620_p3 = Ex_V_3_fu_610_p2[32'd7];

assign lshr_ln1287_fu_653_p2 = conv_i_i_i_i166_fu_650_p1 >> sext_ln1311_fu_647_p1;

assign newexp_fu_946_p2 = ($signed(sext_ln329_fu_942_p1) - $signed(select_ln321_fu_928_p3));

assign or_ln335_fu_965_p2 = (tmp_115_fu_952_p3 | icmp_ln1452_fu_960_p2);

assign out_exp_V_fu_1020_p3 = ((or_ln335_reg_1330[0:0] == 1'b1) ? 8'd0 : trunc_ln255_reg_1336);

assign p_Result_2_fu_386_p4 = {{Mx_bits_V_3_fu_380_p3[57:29]}};

assign p_Result_68_fu_314_p3 = {{1'd1}, {tmp_119_reg_1109_pp0_iter1_reg}};

assign p_Result_69_fu_396_p3 = {{p_Result_2_fu_386_p4}, {1'd1}};

assign p_Result_6_fu_847_p3 = {{p_Result_7_reg_1304}, {16'd32768}};

assign p_Result_70_fu_414_p3 = {{2'd3}, {p_Result_s_fu_404_p4}};

assign p_Result_71_fu_705_p3 = {{sin_basis_fu_700_p2}, {p_Result_5_reg_1227_pp0_iter10_reg}};

assign p_Result_72_fu_456_p3 = {{p_Result_67_reg_1095_pp0_iter6_reg}, {select_ln832_fu_374_p3}};

assign p_Result_73_fu_1068_p4 = {{{results_sign_V_reg_1190_pp0_iter18_reg}, {results_exp_V_fu_1047_p3}}, {results_sig_V_fu_1061_p3}};

integer ap_tvar_int_0;

always @ (p_Result_8_fu_854_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_77_1_fu_879_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_77_1_fu_879_p4[ap_tvar_int_0] = p_Result_8_fu_854_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_8_fu_854_p3 = {{p_Result_9_reg_1309}, {19'd262144}};

integer ap_tvar_int_1;

always @ (p_Result_6_fu_847_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_s_49_fu_861_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_s_49_fu_861_p4[ap_tvar_int_1] = p_Result_6_fu_847_p3[31 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Result_69_fu_396_p3) begin
    for (ap_tvar_int_2 = 30 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 29 - 0) begin
            p_Result_s_fu_404_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_s_fu_404_p4[ap_tvar_int_2] = p_Result_69_fu_396_p3[29 - ap_tvar_int_2];
        end
    end
end

assign r_2_fu_595_p2 = Mx_bits_V_3_reg_1166 << zext_ln1253_fu_592_p1;

assign r_3_fu_298_p2 = ref_4oPi_table_100_V_q0 << zext_ln735_fu_295_p1;

assign r_V_5_fu_752_p1 = r_V_5_fu_752_p10;

assign r_V_5_fu_752_p10 = B_reg_1222_pp0_iter12_reg;

assign r_fu_276_p4 = {{addr_V_fu_268_p3[7:4]}};

assign ref_4oPi_table_100_V_address0 = zext_ln488_fu_286_p1;

assign results_exp_V_fu_1047_p3 = ((icmp_ln300_1_reg_1184_pp0_iter18_reg[0:0] == 1'b1) ? select_ln311_1_fu_1026_p3 : select_ln300_1_fu_1040_p3);

assign results_sig_V_fu_1061_p3 = ((icmp_ln300_1_reg_1184_pp0_iter18_reg[0:0] == 1'b1) ? select_ln311_2_fu_1033_p3 : select_ln300_3_fu_1054_p3);

assign results_sign_V_1_fu_539_p3 = ((cos_basis_fu_434_p10[0:0] == 1'b1) ? tmp_fu_463_p18 : tmp_5_fu_501_p18);

assign results_sign_V_fu_569_p3 = ((icmp_ln300_1_fu_564_p2[0:0] == 1'b1) ? select_ln311_fu_547_p3 : and_ln300_fu_558_p2);

assign ret_V_1_fu_799_p2 = ($signed(ret_V_fu_789_p2) + $signed(sext_ln1146_fu_795_p1));

assign ret_V_fu_789_p2 = ($signed(sext_ln657_fu_783_p1) + $signed(sext_ln657_1_fu_786_p1));

assign rhs_2_fu_774_p4 = {{grp_fu_1088_p2[29:16]}};

assign second_order_float_sin_cos_K0_V_address0 = zext_ln488_1_fu_712_p1;

assign second_order_float_sin_cos_K1_V_address0 = zext_ln488_1_fu_712_p1;

assign second_order_float_sin_cos_K2_V_address0 = zext_ln488_1_fu_712_p1;

assign select_ln1312_fu_665_p3 = ((isNeg_reg_1206[0:0] == 1'b1) ? lshr_ln1287_fu_653_p2 : shl_ln1253_fu_659_p2);

assign select_ln300_1_fu_1040_p3 = ((icmp_ln300_2_reg_1216_pp0_iter18_reg[0:0] == 1'b1) ? 8'd255 : out_exp_V_fu_1020_p3);

assign select_ln300_3_fu_1054_p3 = ((icmp_ln300_2_reg_1216_pp0_iter18_reg[0:0] == 1'b1) ? 23'd8388607 : significand_fu_1013_p3);

assign select_ln311_1_fu_1026_p3 = ((icmp_ln824_reg_1142_pp0_iter18_reg[0:0] == 1'b1) ? 8'd0 : out_exp_V_fu_1020_p3);

assign select_ln311_2_fu_1033_p3 = ((icmp_ln824_reg_1142_pp0_iter18_reg[0:0] == 1'b1) ? 23'd0 : significand_fu_1013_p3);

assign select_ln311_fu_547_p3 = ((icmp_ln824_reg_1142_pp0_iter6_reg[0:0] == 1'b1) ? p_Result_67_reg_1095_pp0_iter6_reg : results_sign_V_1_fu_539_p3);

assign select_ln321_1_fu_1006_p3 = ((icmp_ln321_reg_1325[0:0] == 1'b1) ? tmp_s_fu_987_p4 : tmp_3_fu_997_p4);

assign select_ln321_fu_928_p3 = ((icmp_ln321_fu_916_p2[0:0] == 1'b1) ? add_ln319_fu_922_p2 : tmp1_fu_871_p3);

assign select_ln482_fu_582_p3 = ((closepath_reg_1115_pp0_iter7_reg[0:0] == 1'b1) ? Ex_V_fu_577_p2 : 8'd0);

assign select_ln520_fu_367_p3 = ((tmp_113_fu_355_p3[0:0] == 1'b1) ? Mx_bits_V_1_fu_362_p2 : Mx_bits_V_reg_1154);

assign select_ln832_fu_374_p3 = ((closepath_reg_1115_pp0_iter6_reg[0:0] == 1'b1) ? 3'd0 : k_V_reg_1161);

assign sext_ln1146_fu_795_p1 = $signed(rhs_2_fu_774_p4);

assign sext_ln1311_fu_647_p1 = $signed(ush_reg_1211);

assign sext_ln1334_fu_616_p1 = Ex_V_3_fu_610_p2;

assign sext_ln169_fu_903_p1 = $signed(Ex_V_4_fu_897_p3);

assign sext_ln329_fu_942_p1 = $signed(add_ln329_fu_936_p2);

assign sext_ln657_1_fu_786_p1 = $signed(rhs_1_reg_1273_pp0_iter14_reg);

assign sext_ln657_fu_783_p1 = $signed(t1_reg_1258_pp0_iter14_reg);

assign shl_ln1253_2_fu_910_p2 = conv_i_i25_i_0_fu_907_p1 << tmp1_fu_871_p3;

assign shl_ln1253_3_fu_982_p2 = conv_i_i25_i_1_fu_978_p1 << tmp_1_reg_1314;

assign shl_ln1253_fu_659_p2 = conv_i_i_i_i166_fu_650_p1 << sext_ln1311_fu_647_p1;

assign significand_fu_1013_p3 = ((or_ln335_reg_1330[0:0] == 1'b1) ? 23'd0 : select_ln321_1_fu_1006_p3);

assign sin_basis_fu_700_p2 = (cos_basis_reg_1177_pp0_iter10_reg ^ 1'd1);

assign sub_ln1311_fu_628_p2 = ($signed(9'd0) - $signed(sext_ln1334_fu_616_p1));


always @ (p_Result_s_49_fu_861_p4) begin
    if (p_Result_s_49_fu_861_p4[0] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd0;
    end else if (p_Result_s_49_fu_861_p4[1] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd1;
    end else if (p_Result_s_49_fu_861_p4[2] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd2;
    end else if (p_Result_s_49_fu_861_p4[3] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd3;
    end else if (p_Result_s_49_fu_861_p4[4] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd4;
    end else if (p_Result_s_49_fu_861_p4[5] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd5;
    end else if (p_Result_s_49_fu_861_p4[6] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd6;
    end else if (p_Result_s_49_fu_861_p4[7] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd7;
    end else if (p_Result_s_49_fu_861_p4[8] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd8;
    end else if (p_Result_s_49_fu_861_p4[9] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd9;
    end else if (p_Result_s_49_fu_861_p4[10] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd10;
    end else if (p_Result_s_49_fu_861_p4[11] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd11;
    end else if (p_Result_s_49_fu_861_p4[12] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd12;
    end else if (p_Result_s_49_fu_861_p4[13] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd13;
    end else if (p_Result_s_49_fu_861_p4[14] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd14;
    end else if (p_Result_s_49_fu_861_p4[15] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd15;
    end else if (p_Result_s_49_fu_861_p4[16] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd16;
    end else if (p_Result_s_49_fu_861_p4[17] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd17;
    end else if (p_Result_s_49_fu_861_p4[18] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd18;
    end else if (p_Result_s_49_fu_861_p4[19] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd19;
    end else if (p_Result_s_49_fu_861_p4[20] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd20;
    end else if (p_Result_s_49_fu_861_p4[21] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd21;
    end else if (p_Result_s_49_fu_861_p4[22] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd22;
    end else if (p_Result_s_49_fu_861_p4[23] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd23;
    end else if (p_Result_s_49_fu_861_p4[24] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd24;
    end else if (p_Result_s_49_fu_861_p4[25] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd25;
    end else if (p_Result_s_49_fu_861_p4[26] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd26;
    end else if (p_Result_s_49_fu_861_p4[27] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd27;
    end else if (p_Result_s_49_fu_861_p4[28] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd28;
    end else if (p_Result_s_49_fu_861_p4[29] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd29;
    end else if (p_Result_s_49_fu_861_p4[30] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd30;
    end else if (p_Result_s_49_fu_861_p4[31] == 1'b1) begin
        tmp1_fu_871_p3 = 32'd31;
    end else begin
        tmp1_fu_871_p3 = 32'd32;
    end
end

assign tmp_113_fu_355_p3 = ret_18_reg_1149[32'd77];

assign tmp_115_fu_952_p3 = newexp_fu_946_p2[32'd31];

assign tmp_118_fu_242_p4 = {{data_V_fu_230_p1[30:23]}};

assign tmp_119_fu_252_p1 = data_V_fu_230_p1[22:0];


always @ (p_Result_77_1_fu_879_p4) begin
    if (p_Result_77_1_fu_879_p4[0] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd0;
    end else if (p_Result_77_1_fu_879_p4[1] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd1;
    end else if (p_Result_77_1_fu_879_p4[2] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd2;
    end else if (p_Result_77_1_fu_879_p4[3] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd3;
    end else if (p_Result_77_1_fu_879_p4[4] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd4;
    end else if (p_Result_77_1_fu_879_p4[5] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd5;
    end else if (p_Result_77_1_fu_879_p4[6] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd6;
    end else if (p_Result_77_1_fu_879_p4[7] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd7;
    end else if (p_Result_77_1_fu_879_p4[8] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd8;
    end else if (p_Result_77_1_fu_879_p4[9] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd9;
    end else if (p_Result_77_1_fu_879_p4[10] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd10;
    end else if (p_Result_77_1_fu_879_p4[11] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd11;
    end else if (p_Result_77_1_fu_879_p4[12] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd12;
    end else if (p_Result_77_1_fu_879_p4[13] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd13;
    end else if (p_Result_77_1_fu_879_p4[14] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd14;
    end else if (p_Result_77_1_fu_879_p4[15] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd15;
    end else if (p_Result_77_1_fu_879_p4[16] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd16;
    end else if (p_Result_77_1_fu_879_p4[17] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd17;
    end else if (p_Result_77_1_fu_879_p4[18] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd18;
    end else if (p_Result_77_1_fu_879_p4[19] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd19;
    end else if (p_Result_77_1_fu_879_p4[20] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd20;
    end else if (p_Result_77_1_fu_879_p4[21] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd21;
    end else if (p_Result_77_1_fu_879_p4[22] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd22;
    end else if (p_Result_77_1_fu_879_p4[23] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd23;
    end else if (p_Result_77_1_fu_879_p4[24] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd24;
    end else if (p_Result_77_1_fu_879_p4[25] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd25;
    end else if (p_Result_77_1_fu_879_p4[26] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd26;
    end else if (p_Result_77_1_fu_879_p4[27] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd27;
    end else if (p_Result_77_1_fu_879_p4[28] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd28;
    end else if (p_Result_77_1_fu_879_p4[29] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd29;
    end else if (p_Result_77_1_fu_879_p4[30] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd30;
    end else if (p_Result_77_1_fu_879_p4[31] == 1'b1) begin
        tmp_1_fu_889_p3 = 32'd31;
    end else begin
        tmp_1_fu_889_p3 = 32'd32;
    end
end

assign tmp_3_fu_997_p4 = {{shl_ln1253_2_reg_1319[27:5]}};

assign tmp_s_fu_987_p4 = {{shl_ln1253_3_fu_982_p2[27:5]}};

assign trunc_ln1312_fu_975_p1 = shl_ln1253_2_reg_1319[27:0];

assign trunc_ln255_fu_971_p1 = newexp_fu_946_p2[7:0];

assign trunc_ln628_fu_291_p1 = addr_V_fu_268_p3[3:0];

assign ush_fu_634_p3 = ((isNeg_fu_620_p3[0:0] == 1'b1) ? sub_ln1311_fu_628_p2 : sext_ln1334_fu_616_p1);


always @ (p_Result_70_fu_414_p3) begin
    if (p_Result_70_fu_414_p3[0] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd0;
    end else if (p_Result_70_fu_414_p3[1] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd1;
    end else if (p_Result_70_fu_414_p3[2] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd2;
    end else if (p_Result_70_fu_414_p3[3] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd3;
    end else if (p_Result_70_fu_414_p3[4] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd4;
    end else if (p_Result_70_fu_414_p3[5] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd5;
    end else if (p_Result_70_fu_414_p3[6] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd6;
    end else if (p_Result_70_fu_414_p3[7] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd7;
    end else if (p_Result_70_fu_414_p3[8] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd8;
    end else if (p_Result_70_fu_414_p3[9] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd9;
    end else if (p_Result_70_fu_414_p3[10] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd10;
    end else if (p_Result_70_fu_414_p3[11] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd11;
    end else if (p_Result_70_fu_414_p3[12] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd12;
    end else if (p_Result_70_fu_414_p3[13] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd13;
    end else if (p_Result_70_fu_414_p3[14] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd14;
    end else if (p_Result_70_fu_414_p3[15] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd15;
    end else if (p_Result_70_fu_414_p3[16] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd16;
    end else if (p_Result_70_fu_414_p3[17] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd17;
    end else if (p_Result_70_fu_414_p3[18] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd18;
    end else if (p_Result_70_fu_414_p3[19] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd19;
    end else if (p_Result_70_fu_414_p3[20] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd20;
    end else if (p_Result_70_fu_414_p3[21] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd21;
    end else if (p_Result_70_fu_414_p3[22] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd22;
    end else if (p_Result_70_fu_414_p3[23] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd23;
    end else if (p_Result_70_fu_414_p3[24] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd24;
    end else if (p_Result_70_fu_414_p3[25] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd25;
    end else if (p_Result_70_fu_414_p3[26] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd26;
    end else if (p_Result_70_fu_414_p3[27] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd27;
    end else if (p_Result_70_fu_414_p3[28] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd28;
    end else if (p_Result_70_fu_414_p3[29] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd29;
    end else if (p_Result_70_fu_414_p3[30] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd30;
    end else if (p_Result_70_fu_414_p3[31] == 1'b1) begin
        val_assign_fu_422_p3 = 32'd31;
    end else begin
        val_assign_fu_422_p3 = 32'd32;
    end
end

assign zext_ln1070_fu_696_p1 = B_trunc_fu_686_p4;

assign zext_ln1253_fu_592_p1 = Mx_zeros_reg_1171;

assign zext_ln488_1_fu_712_p1 = p_Result_71_fu_705_p3;

assign zext_ln488_fu_286_p1 = r_fu_276_p4;

assign zext_ln646_fu_589_p1 = Mx_zeros_reg_1171;

assign zext_ln735_fu_295_p1 = trunc_ln628_reg_1127;

endmodule //ufunc_call_f4_sin_or_cos_float_s
