// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ufunc_call_i4_ufunc_call_i4,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.154625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=4824,HLS_SYN_LUT=4347,HLS_VERSION=2020_2}" *)

module ufunc_call_i4 (
        ap_clk,
        ap_rst_n,
        in1_s_TDATA,
        in1_s_TVALID,
        in1_s_TREADY,
        in1_s_TKEEP,
        in1_s_TSTRB,
        in1_s_TUSER,
        in1_s_TLAST,
        in1_s_TID,
        in1_s_TDEST,
        in2_s_TDATA,
        in2_s_TVALID,
        in2_s_TREADY,
        in2_s_TKEEP,
        in2_s_TSTRB,
        in2_s_TUSER,
        in2_s_TLAST,
        in2_s_TID,
        in2_s_TDEST,
        out1_s_TDATA,
        out1_s_TVALID,
        out1_s_TREADY,
        out1_s_TKEEP,
        out1_s_TSTRB,
        out1_s_TUSER,
        out1_s_TLAST,
        out1_s_TID,
        out1_s_TDEST,
        out2_s_TDATA,
        out2_s_TVALID,
        out2_s_TREADY,
        out2_s_TKEEP,
        out2_s_TSTRB,
        out2_s_TUSER,
        out2_s_TLAST,
        out2_s_TID,
        out2_s_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state40 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in1_s_TDATA;
input   in1_s_TVALID;
output   in1_s_TREADY;
input  [3:0] in1_s_TKEEP;
input  [3:0] in1_s_TSTRB;
input  [0:0] in1_s_TUSER;
input  [0:0] in1_s_TLAST;
input  [0:0] in1_s_TID;
input  [0:0] in1_s_TDEST;
input  [31:0] in2_s_TDATA;
input   in2_s_TVALID;
output   in2_s_TREADY;
input  [3:0] in2_s_TKEEP;
input  [3:0] in2_s_TSTRB;
input  [0:0] in2_s_TUSER;
input  [0:0] in2_s_TLAST;
input  [0:0] in2_s_TID;
input  [0:0] in2_s_TDEST;
output  [31:0] out1_s_TDATA;
output   out1_s_TVALID;
input   out1_s_TREADY;
output  [3:0] out1_s_TKEEP;
output  [3:0] out1_s_TSTRB;
output  [0:0] out1_s_TUSER;
output  [0:0] out1_s_TLAST;
output  [0:0] out1_s_TID;
output  [0:0] out1_s_TDEST;
output  [31:0] out2_s_TDATA;
output   out2_s_TVALID;
input   out2_s_TREADY;
output  [3:0] out2_s_TKEEP;
output  [3:0] out2_s_TSTRB;
output  [0:0] out2_s_TUSER;
output  [0:0] out2_s_TLAST;
output  [0:0] out2_s_TID;
output  [0:0] out2_s_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] args;
wire   [3:0] is_binary_address0;
reg    is_binary_ce0;
wire   [0:0] is_binary_q0;
wire   [3:0] returns_pair_address0;
reg    returns_pair_ce0;
wire   [0:0] returns_pair_q0;
reg   [31:0] in2;
reg    in1_s_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    in2_s_TDATA_blk_n;
reg   [0:0] is_binary_load_reg_397;
reg    out1_s_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    out2_s_TDATA_blk_n;
reg   [0:0] returns_pair_load_reg_401;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] ufunc_in_second_reg_256;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state3_io;
reg    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_state14_io;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state18_pp0_stage0_iter5;
wire    ap_block_state19_pp0_stage0_iter6;
wire    ap_block_state20_pp0_stage0_iter7;
wire    ap_block_state21_pp0_stage0_iter8;
wire    ap_block_state22_pp0_stage0_iter9;
wire    ap_block_state23_pp0_stage0_iter10;
wire    ap_block_state24_pp0_stage0_iter11;
wire    ap_block_state25_pp0_stage0_iter12;
wire    ap_block_state26_pp0_stage0_iter13;
wire    ap_block_state27_pp0_stage0_iter14;
wire    ap_block_state28_pp0_stage0_iter15;
wire    ap_block_state29_pp0_stage0_iter16;
wire    ap_block_state30_pp0_stage0_iter17;
wire    ap_block_state31_pp0_stage0_iter18;
wire    ap_block_state32_pp0_stage0_iter19;
wire    ap_block_state33_pp0_stage0_iter20;
wire    ap_block_state34_pp0_stage0_iter21;
wire    ap_block_state35_pp0_stage0_iter22;
wire    ap_block_state36_pp0_stage0_iter23;
wire    ap_block_state37_pp0_stage0_iter24;
wire    ap_block_state7_pp0_stage0_iter25;
wire    ap_block_state8_pp0_stage0_iter26;
wire    ap_block_state9_pp0_stage0_iter27;
wire    ap_block_state10_pp0_stage0_iter28;
wire    ap_block_state11_pp0_stage0_iter29;
wire    ap_block_state12_pp0_stage0_iter30;
wire    ap_block_state13_pp0_stage0_iter31;
wire    ap_block_state4_pp0_stage0_iter32;
wire    ap_block_state5_pp0_stage0_iter33;
wire    ap_block_state6_pp0_stage0_iter34;
reg    ap_block_state38_pp0_stage0_iter35;
reg    ap_block_state39_pp0_stage0_iter36;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter2_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter3_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter4_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter5_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter6_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter7_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter8_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter9_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter10_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter11_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter12_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter13_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter14_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter15_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter16_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter17_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter18_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter19_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter20_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter21_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter22_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter23_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter24_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter25_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter26_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter27_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter28_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter29_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter30_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter31_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter32_reg;
reg  signed [31:0] ufunc_in_second_reg_256_pp0_iter33_reg;
reg   [7:0] args_read_reg_383;
wire    ap_CS_fsm_state2;
reg  signed [31:0] in1_c_data_V_reg_405;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter1_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter2_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter3_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter4_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter5_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter6_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter7_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter8_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter9_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter10_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter11_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter12_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter13_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter14_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter15_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter16_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter17_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter18_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter19_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter20_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter21_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter22_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter23_reg;
reg   [31:0] in1_c_data_V_reg_405_pp0_iter24_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter25_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter26_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter27_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter28_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter29_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter30_reg;
reg   [31:0] in1_c_data_V_reg_405_pp0_iter31_reg;
reg   [31:0] in1_c_data_V_reg_405_pp0_iter32_reg;
reg  signed [31:0] in1_c_data_V_reg_405_pp0_iter33_reg;
reg   [3:0] ref_tmp_keep_reg_417;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter1_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter2_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter3_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter4_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter5_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter6_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter7_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter8_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter9_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter10_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter11_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter12_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter13_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter14_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter15_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter16_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter17_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter18_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter19_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter20_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter21_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter22_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter23_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter24_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter25_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter26_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter27_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter28_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter29_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter30_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter31_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter32_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter33_reg;
reg   [3:0] ref_tmp_keep_reg_417_pp0_iter34_reg;
wire   [0:0] in1_c_last_V_fu_328_p1;
reg   [0:0] in1_c_last_V_reg_423;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter1_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter2_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter3_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter4_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter5_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter6_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter7_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter8_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter9_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter10_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter11_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter12_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter13_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter14_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter15_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter16_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter17_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter18_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter19_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter20_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter21_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter22_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter23_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter24_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter25_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter26_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter27_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter28_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter29_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter30_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter31_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter32_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter33_reg;
reg   [0:0] in1_c_last_V_reg_423_pp0_iter34_reg;
wire   [0:0] icmp_ln1452_fu_343_p2;
reg   [0:0] icmp_ln1452_reg_429;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter1_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter2_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter3_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter4_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter5_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter6_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter7_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter8_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter9_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter10_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter11_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter12_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter13_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter14_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter15_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter16_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter17_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter18_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter19_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter20_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter21_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter22_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter23_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter24_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter25_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter26_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter27_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter28_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter29_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter30_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter31_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter32_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter33_reg;
reg   [0:0] icmp_ln1452_reg_429_pp0_iter34_reg;
wire   [30:0] grp_exp_32_32_s_fu_306_ap_return;
reg   [30:0] p_Val2_2_reg_433;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_296_ap_return;
reg   [15:0] p_Val2_s_reg_438;
wire   [31:0] grp_fu_362_p2;
reg   [31:0] out_first_3_reg_443;
wire   [31:0] p_Val2_3_log_32_32_s_fu_301_ap_return;
reg   [31:0] p_Val2_3_reg_448;
wire   [31:0] zext_ln789_1_fu_367_p1;
wire   [31:0] zext_ln789_fu_370_p1;
wire   [31:0] out_first_2_fu_373_p2;
wire   [31:0] out_first_fu_378_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    grp_sqrt_fixed_32_32_s_fu_296_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call0;
reg    ap_block_state14_pp0_stage0_iter1_ignore_call0;
wire    ap_block_state15_pp0_stage0_iter2_ignore_call0;
wire    ap_block_state16_pp0_stage0_iter3_ignore_call0;
wire    ap_block_state17_pp0_stage0_iter4_ignore_call0;
wire    ap_block_state18_pp0_stage0_iter5_ignore_call0;
wire    ap_block_state19_pp0_stage0_iter6_ignore_call0;
wire    ap_block_state20_pp0_stage0_iter7_ignore_call0;
wire    ap_block_state21_pp0_stage0_iter8_ignore_call0;
wire    ap_block_state22_pp0_stage0_iter9_ignore_call0;
wire    ap_block_state23_pp0_stage0_iter10_ignore_call0;
wire    ap_block_state24_pp0_stage0_iter11_ignore_call0;
wire    ap_block_state25_pp0_stage0_iter12_ignore_call0;
wire    ap_block_state26_pp0_stage0_iter13_ignore_call0;
wire    ap_block_state27_pp0_stage0_iter14_ignore_call0;
wire    ap_block_state28_pp0_stage0_iter15_ignore_call0;
wire    ap_block_state29_pp0_stage0_iter16_ignore_call0;
wire    ap_block_state30_pp0_stage0_iter17_ignore_call0;
wire    ap_block_state31_pp0_stage0_iter18_ignore_call0;
wire    ap_block_state32_pp0_stage0_iter19_ignore_call0;
wire    ap_block_state33_pp0_stage0_iter20_ignore_call0;
wire    ap_block_state34_pp0_stage0_iter21_ignore_call0;
wire    ap_block_state35_pp0_stage0_iter22_ignore_call0;
wire    ap_block_state36_pp0_stage0_iter23_ignore_call0;
wire    ap_block_state37_pp0_stage0_iter24_ignore_call0;
wire    ap_block_state7_pp0_stage0_iter25_ignore_call0;
wire    ap_block_state8_pp0_stage0_iter26_ignore_call0;
wire    ap_block_state9_pp0_stage0_iter27_ignore_call0;
wire    ap_block_state10_pp0_stage0_iter28_ignore_call0;
wire    ap_block_state11_pp0_stage0_iter29_ignore_call0;
wire    ap_block_state12_pp0_stage0_iter30_ignore_call0;
wire    ap_block_state13_pp0_stage0_iter31_ignore_call0;
wire    ap_block_state4_pp0_stage0_iter32_ignore_call0;
wire    ap_block_state5_pp0_stage0_iter33_ignore_call0;
wire    ap_block_state6_pp0_stage0_iter34_ignore_call0;
reg    ap_block_state38_pp0_stage0_iter35_ignore_call0;
reg    ap_block_state39_pp0_stage0_iter36_ignore_call0;
reg    ap_block_pp0_stage0_11001_ignoreCallOp128;
wire    p_Val2_3_log_32_32_s_fu_301_ap_ready;
wire    grp_exp_32_32_s_fu_306_ap_start;
wire    grp_exp_32_32_s_fu_306_ap_done;
wire    grp_exp_32_32_s_fu_306_ap_idle;
wire    grp_exp_32_32_s_fu_306_ap_ready;
reg    grp_exp_32_32_s_fu_306_ap_ce;
reg    ap_block_pp0_stage0_11001_ignoreCallOp108;
reg   [31:0] ap_phi_mux_ufunc_in_second_phi_fu_260_p4;
wire  signed [31:0] ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256;
reg   [31:0] ap_phi_mux_ufunc_out_first_phi_fu_273_p18;
wire   [31:0] ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268;
reg   [31:0] ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268;
wire   [31:0] grp_fu_349_p2;
reg    grp_exp_32_32_s_fu_306_ap_start_reg;
wire   [63:0] idxprom_fu_313_p1;
reg    ap_block_pp0_stage0_01001;
reg    grp_fu_349_ce;
reg    grp_fu_362_ce;
wire    ap_CS_fsm_state40;
wire    regslice_both_out1_s_V_data_V_U_apdone_blk;
wire    regslice_both_out2_s_V_data_V_U_apdone_blk;
reg    ap_block_state40;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in1_s_V_data_V_U_apdone_blk;
wire  signed [31:0] in1_s_TDATA_int_regslice;
wire    in1_s_TVALID_int_regslice;
reg    in1_s_TREADY_int_regslice;
wire    regslice_both_in1_s_V_data_V_U_ack_in;
wire    regslice_both_in1_s_V_keep_V_U_apdone_blk;
wire   [3:0] in1_s_TKEEP_int_regslice;
wire    regslice_both_in1_s_V_keep_V_U_vld_out;
wire    regslice_both_in1_s_V_keep_V_U_ack_in;
wire    regslice_both_in1_s_V_strb_V_U_apdone_blk;
wire   [3:0] in1_s_TSTRB_int_regslice;
wire    regslice_both_in1_s_V_strb_V_U_vld_out;
wire    regslice_both_in1_s_V_strb_V_U_ack_in;
wire    regslice_both_in1_s_V_user_V_U_apdone_blk;
wire   [0:0] in1_s_TUSER_int_regslice;
wire    regslice_both_in1_s_V_user_V_U_vld_out;
wire    regslice_both_in1_s_V_user_V_U_ack_in;
wire    regslice_both_in1_s_V_last_V_U_apdone_blk;
wire   [0:0] in1_s_TLAST_int_regslice;
wire    regslice_both_in1_s_V_last_V_U_vld_out;
wire    regslice_both_in1_s_V_last_V_U_ack_in;
wire    regslice_both_in1_s_V_id_V_U_apdone_blk;
wire   [0:0] in1_s_TID_int_regslice;
wire    regslice_both_in1_s_V_id_V_U_vld_out;
wire    regslice_both_in1_s_V_id_V_U_ack_in;
wire    regslice_both_in1_s_V_dest_V_U_apdone_blk;
wire   [0:0] in1_s_TDEST_int_regslice;
wire    regslice_both_in1_s_V_dest_V_U_vld_out;
wire    regslice_both_in1_s_V_dest_V_U_ack_in;
wire    regslice_both_in2_s_V_data_V_U_apdone_blk;
wire   [31:0] in2_s_TDATA_int_regslice;
wire    in2_s_TVALID_int_regslice;
reg    in2_s_TREADY_int_regslice;
wire    regslice_both_in2_s_V_data_V_U_ack_in;
wire    regslice_both_in2_s_V_keep_V_U_apdone_blk;
wire   [3:0] in2_s_TKEEP_int_regslice;
wire    regslice_both_in2_s_V_keep_V_U_vld_out;
wire    regslice_both_in2_s_V_keep_V_U_ack_in;
wire    regslice_both_in2_s_V_strb_V_U_apdone_blk;
wire   [3:0] in2_s_TSTRB_int_regslice;
wire    regslice_both_in2_s_V_strb_V_U_vld_out;
wire    regslice_both_in2_s_V_strb_V_U_ack_in;
wire    regslice_both_in2_s_V_user_V_U_apdone_blk;
wire   [0:0] in2_s_TUSER_int_regslice;
wire    regslice_both_in2_s_V_user_V_U_vld_out;
wire    regslice_both_in2_s_V_user_V_U_ack_in;
wire    regslice_both_in2_s_V_last_V_U_apdone_blk;
wire   [0:0] in2_s_TLAST_int_regslice;
wire    regslice_both_in2_s_V_last_V_U_vld_out;
wire    regslice_both_in2_s_V_last_V_U_ack_in;
wire    regslice_both_in2_s_V_id_V_U_apdone_blk;
wire   [0:0] in2_s_TID_int_regslice;
wire    regslice_both_in2_s_V_id_V_U_vld_out;
wire    regslice_both_in2_s_V_id_V_U_ack_in;
wire    regslice_both_in2_s_V_dest_V_U_apdone_blk;
wire   [0:0] in2_s_TDEST_int_regslice;
wire    regslice_both_in2_s_V_dest_V_U_vld_out;
wire    regslice_both_in2_s_V_dest_V_U_ack_in;
reg    out1_s_TVALID_int_regslice;
wire    out1_s_TREADY_int_regslice;
wire    regslice_both_out1_s_V_data_V_U_vld_out;
wire    regslice_both_out1_s_V_keep_V_U_apdone_blk;
wire    regslice_both_out1_s_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_keep_V_U_vld_out;
wire    regslice_both_out1_s_V_strb_V_U_apdone_blk;
wire    regslice_both_out1_s_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_strb_V_U_vld_out;
wire    regslice_both_out1_s_V_user_V_U_apdone_blk;
wire    regslice_both_out1_s_V_user_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_user_V_U_vld_out;
wire    regslice_both_out1_s_V_last_V_U_apdone_blk;
wire    regslice_both_out1_s_V_last_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_last_V_U_vld_out;
wire    regslice_both_out1_s_V_id_V_U_apdone_blk;
wire    regslice_both_out1_s_V_id_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_id_V_U_vld_out;
wire    regslice_both_out1_s_V_dest_V_U_apdone_blk;
wire    regslice_both_out1_s_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out1_s_V_dest_V_U_vld_out;
reg    out2_s_TVALID_int_regslice;
wire    out2_s_TREADY_int_regslice;
wire    regslice_both_out2_s_V_data_V_U_vld_out;
wire    regslice_both_out2_s_V_keep_V_U_apdone_blk;
wire    regslice_both_out2_s_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_keep_V_U_vld_out;
wire    regslice_both_out2_s_V_strb_V_U_apdone_blk;
wire    regslice_both_out2_s_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_strb_V_U_vld_out;
wire    regslice_both_out2_s_V_user_V_U_apdone_blk;
wire    regslice_both_out2_s_V_user_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_user_V_U_vld_out;
wire    regslice_both_out2_s_V_last_V_U_apdone_blk;
wire    regslice_both_out2_s_V_last_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_last_V_U_vld_out;
wire    regslice_both_out2_s_V_id_V_U_apdone_blk;
wire    regslice_both_out2_s_V_id_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_id_V_U_vld_out;
wire    regslice_both_out2_s_V_dest_V_U_apdone_blk;
wire    regslice_both_out2_s_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out2_s_V_dest_V_U_vld_out;
reg    ap_condition_749;
reg    ap_condition_627;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 in2 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 grp_exp_32_32_s_fu_306_ap_start_reg = 1'b0;
end

ufunc_call_i4_is_binary #(
    .DataWidth( 1 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
is_binary_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(is_binary_address0),
    .ce0(is_binary_ce0),
    .q0(is_binary_q0)
);

ufunc_call_i4_returns_pair #(
    .DataWidth( 1 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
returns_pair_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(returns_pair_address0),
    .ce0(returns_pair_ce0),
    .q0(returns_pair_q0)
);

ufunc_call_i4_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .args(args),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ufunc_call_i4_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x(in1_c_data_V_reg_405_pp0_iter24_reg),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_296_ap_return),
    .ap_ce(grp_sqrt_fixed_32_32_s_fu_296_ap_ce)
);

ufunc_call_i4_log_32_32_s p_Val2_3_log_32_32_s_fu_301(
    .ap_ready(p_Val2_3_log_32_32_s_fu_301_ap_ready),
    .x(in1_c_data_V_reg_405_pp0_iter32_reg),
    .ap_return(p_Val2_3_log_32_32_s_fu_301_ap_return)
);

ufunc_call_i4_exp_32_32_s grp_exp_32_32_s_fu_306(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_exp_32_32_s_fu_306_ap_start),
    .ap_done(grp_exp_32_32_s_fu_306_ap_done),
    .ap_idle(grp_exp_32_32_s_fu_306_ap_idle),
    .ap_ready(grp_exp_32_32_s_fu_306_ap_ready),
    .ap_ce(grp_exp_32_32_s_fu_306_ap_ce),
    .x(in1_c_data_V_reg_405_pp0_iter31_reg),
    .ap_return(grp_exp_32_32_s_fu_306_ap_return)
);

ufunc_call_i4_sdiv_32s_32s_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32s_32s_32_36_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in1_s_TDATA_int_regslice),
    .din1(ap_phi_mux_ufunc_in_second_phi_fu_260_p4),
    .ce(grp_fu_349_ce),
    .dout(grp_fu_349_p2)
);

ufunc_call_i4_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in1_c_data_V_reg_405_pp0_iter31_reg),
    .din1(ufunc_in_second_reg_256_pp0_iter31_reg),
    .ce(grp_fu_362_ce),
    .dout(grp_fu_362_p2)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TDATA),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_data_V_U_ack_in),
    .data_out(in1_s_TDATA_int_regslice),
    .vld_out(in1_s_TVALID_int_regslice),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_data_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in1_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TKEEP),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_keep_V_U_ack_in),
    .data_out(in1_s_TKEEP_int_regslice),
    .vld_out(regslice_both_in1_s_V_keep_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_keep_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in1_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TSTRB),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_strb_V_U_ack_in),
    .data_out(in1_s_TSTRB_int_regslice),
    .vld_out(regslice_both_in1_s_V_strb_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_strb_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in1_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TUSER),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_user_V_U_ack_in),
    .data_out(in1_s_TUSER_int_regslice),
    .vld_out(regslice_both_in1_s_V_user_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_user_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in1_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TLAST),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_last_V_U_ack_in),
    .data_out(in1_s_TLAST_int_regslice),
    .vld_out(regslice_both_in1_s_V_last_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_last_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in1_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TID),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_id_V_U_ack_in),
    .data_out(in1_s_TID_int_regslice),
    .vld_out(regslice_both_in1_s_V_id_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_id_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in1_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TDEST),
    .vld_in(in1_s_TVALID),
    .ack_in(regslice_both_in1_s_V_dest_V_U_ack_in),
    .data_out(in1_s_TDEST_int_regslice),
    .vld_out(regslice_both_in1_s_V_dest_V_U_vld_out),
    .ack_out(in1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_s_V_dest_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TDATA),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_data_V_U_ack_in),
    .data_out(in2_s_TDATA_int_regslice),
    .vld_out(in2_s_TVALID_int_regslice),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_data_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in2_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TKEEP),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_keep_V_U_ack_in),
    .data_out(in2_s_TKEEP_int_regslice),
    .vld_out(regslice_both_in2_s_V_keep_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_keep_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in2_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TSTRB),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_strb_V_U_ack_in),
    .data_out(in2_s_TSTRB_int_regslice),
    .vld_out(regslice_both_in2_s_V_strb_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_strb_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in2_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TUSER),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_user_V_U_ack_in),
    .data_out(in2_s_TUSER_int_regslice),
    .vld_out(regslice_both_in2_s_V_user_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_user_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in2_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TLAST),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_last_V_U_ack_in),
    .data_out(in2_s_TLAST_int_regslice),
    .vld_out(regslice_both_in2_s_V_last_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_last_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in2_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TID),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_id_V_U_ack_in),
    .data_out(in2_s_TID_int_regslice),
    .vld_out(regslice_both_in2_s_V_id_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_id_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in2_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_s_TDEST),
    .vld_in(in2_s_TVALID),
    .ack_in(regslice_both_in2_s_V_dest_V_U_ack_in),
    .data_out(in2_s_TDEST_int_regslice),
    .vld_out(regslice_both_in2_s_V_dest_V_U_vld_out),
    .ack_out(in2_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_s_V_dest_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out1_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_ufunc_out_first_phi_fu_273_p18),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(out1_s_TREADY_int_regslice),
    .data_out(out1_s_TDATA),
    .vld_out(regslice_both_out1_s_V_data_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_data_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out1_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_keep_reg_417_pp0_iter34_reg),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_keep_V_U_ack_in_dummy),
    .data_out(out1_s_TKEEP),
    .vld_out(regslice_both_out1_s_V_keep_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_keep_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out1_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_strb_V_U_ack_in_dummy),
    .data_out(out1_s_TSTRB),
    .vld_out(regslice_both_out1_s_V_strb_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_strb_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out1_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_user_V_U_ack_in_dummy),
    .data_out(out1_s_TUSER),
    .vld_out(regslice_both_out1_s_V_user_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_user_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out1_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_c_last_V_reg_423_pp0_iter34_reg),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_last_V_U_ack_in_dummy),
    .data_out(out1_s_TLAST),
    .vld_out(regslice_both_out1_s_V_last_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_last_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out1_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_id_V_U_ack_in_dummy),
    .data_out(out1_s_TID),
    .vld_out(regslice_both_out1_s_V_id_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_id_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out1_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out1_s_TVALID_int_regslice),
    .ack_in(regslice_both_out1_s_V_dest_V_U_ack_in_dummy),
    .data_out(out1_s_TDEST),
    .vld_out(regslice_both_out1_s_V_dest_V_U_vld_out),
    .ack_out(out1_s_TREADY),
    .apdone_blk(regslice_both_out1_s_V_dest_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out2_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_ufunc_in_second_phi_fu_260_p4),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(out2_s_TREADY_int_regslice),
    .data_out(out2_s_TDATA),
    .vld_out(regslice_both_out2_s_V_data_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_data_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out2_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TKEEP_int_regslice),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_keep_V_U_ack_in_dummy),
    .data_out(out2_s_TKEEP),
    .vld_out(regslice_both_out2_s_V_keep_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_keep_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out2_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_strb_V_U_ack_in_dummy),
    .data_out(out2_s_TSTRB),
    .vld_out(regslice_both_out2_s_V_strb_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_strb_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out2_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_user_V_U_ack_in_dummy),
    .data_out(out2_s_TUSER),
    .vld_out(regslice_both_out2_s_V_user_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_user_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out2_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_s_TLAST_int_regslice),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_last_V_U_ack_in_dummy),
    .data_out(out2_s_TLAST),
    .vld_out(regslice_both_out2_s_V_last_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_last_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out2_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_id_V_U_ack_in_dummy),
    .data_out(out2_s_TID),
    .vld_out(regslice_both_out2_s_V_id_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_id_V_U_apdone_blk)
);

ufunc_call_i4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out2_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out2_s_TVALID_int_regslice),
    .ack_in(regslice_both_out2_s_V_dest_V_U_ack_in_dummy),
    .data_out(out2_s_TDEST),
    .vld_out(regslice_both_out2_s_V_dest_V_U_vld_out),
    .ack_out(out2_s_TREADY),
    .apdone_blk(regslice_both_out2_s_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter36 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_exp_32_32_s_fu_306_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1) & (args_read_reg_383 == 8'd4))) begin
            grp_exp_32_32_s_fu_306_ap_start_reg <= 1'b1;
        end else if ((grp_exp_32_32_s_fu_306_ap_ready == 1'b1)) begin
            grp_exp_32_32_s_fu_306_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_627)) begin
        if (((icmp_ln1452_fu_343_p2 == 1'd1) & (args_read_reg_383 == 8'd8))) begin
            ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= 32'd0;
        end else if ((1'b1 == ap_condition_749)) begin
            ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= in1_s_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter34 == 1'b1))) begin
        if ((args_read_reg_383 == 8'd5)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= p_Val2_3_reg_448;
        end else if ((args_read_reg_383 == 8'd1)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_fu_378_p2;
        end else if ((args_read_reg_383 == 8'd7)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_2_fu_373_p2;
        end else if ((args_read_reg_383 == 8'd2)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= out_first_3_reg_443;
        end else if ((args_read_reg_383 == 8'd10)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= zext_ln789_fu_370_p1;
        end else if ((args_read_reg_383 == 8'd4)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= zext_ln789_1_fu_367_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_627)) begin
        if ((is_binary_load_reg_397 == 1'd1)) begin
            ufunc_in_second_reg_256 <= in2_s_TDATA_int_regslice;
        end else if ((is_binary_load_reg_397 == 1'd0)) begin
            ufunc_in_second_reg_256 <= in2;
        end else if ((1'b1 == 1'b1)) begin
            ufunc_in_second_reg_256 <= ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter10_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter11_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter12_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter13_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter14_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter15_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter16_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter17_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter18_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter19_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter20_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter21_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter22 == 1'b1))) begin
        ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter22_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter23_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter24_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter25_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter26_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter27_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter28_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter1_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter29_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter30_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter31_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter32_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter33 == 1'b1))) begin
        ap_phi_reg_pp0_iter34_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter33_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter2_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter3_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter4_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter5_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter6_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter7_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_phi_reg_pp0_iter9_ufunc_out_first_reg_268 <= ap_phi_reg_pp0_iter8_ufunc_out_first_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        args_read_reg_383 <= args;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (args_read_reg_383 == 8'd8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1452_reg_429 <= icmp_ln1452_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1452_reg_429_pp0_iter10_reg <= icmp_ln1452_reg_429_pp0_iter9_reg;
        icmp_ln1452_reg_429_pp0_iter11_reg <= icmp_ln1452_reg_429_pp0_iter10_reg;
        icmp_ln1452_reg_429_pp0_iter12_reg <= icmp_ln1452_reg_429_pp0_iter11_reg;
        icmp_ln1452_reg_429_pp0_iter13_reg <= icmp_ln1452_reg_429_pp0_iter12_reg;
        icmp_ln1452_reg_429_pp0_iter14_reg <= icmp_ln1452_reg_429_pp0_iter13_reg;
        icmp_ln1452_reg_429_pp0_iter15_reg <= icmp_ln1452_reg_429_pp0_iter14_reg;
        icmp_ln1452_reg_429_pp0_iter16_reg <= icmp_ln1452_reg_429_pp0_iter15_reg;
        icmp_ln1452_reg_429_pp0_iter17_reg <= icmp_ln1452_reg_429_pp0_iter16_reg;
        icmp_ln1452_reg_429_pp0_iter18_reg <= icmp_ln1452_reg_429_pp0_iter17_reg;
        icmp_ln1452_reg_429_pp0_iter19_reg <= icmp_ln1452_reg_429_pp0_iter18_reg;
        icmp_ln1452_reg_429_pp0_iter20_reg <= icmp_ln1452_reg_429_pp0_iter19_reg;
        icmp_ln1452_reg_429_pp0_iter21_reg <= icmp_ln1452_reg_429_pp0_iter20_reg;
        icmp_ln1452_reg_429_pp0_iter22_reg <= icmp_ln1452_reg_429_pp0_iter21_reg;
        icmp_ln1452_reg_429_pp0_iter23_reg <= icmp_ln1452_reg_429_pp0_iter22_reg;
        icmp_ln1452_reg_429_pp0_iter24_reg <= icmp_ln1452_reg_429_pp0_iter23_reg;
        icmp_ln1452_reg_429_pp0_iter25_reg <= icmp_ln1452_reg_429_pp0_iter24_reg;
        icmp_ln1452_reg_429_pp0_iter26_reg <= icmp_ln1452_reg_429_pp0_iter25_reg;
        icmp_ln1452_reg_429_pp0_iter27_reg <= icmp_ln1452_reg_429_pp0_iter26_reg;
        icmp_ln1452_reg_429_pp0_iter28_reg <= icmp_ln1452_reg_429_pp0_iter27_reg;
        icmp_ln1452_reg_429_pp0_iter29_reg <= icmp_ln1452_reg_429_pp0_iter28_reg;
        icmp_ln1452_reg_429_pp0_iter2_reg <= icmp_ln1452_reg_429_pp0_iter1_reg;
        icmp_ln1452_reg_429_pp0_iter30_reg <= icmp_ln1452_reg_429_pp0_iter29_reg;
        icmp_ln1452_reg_429_pp0_iter31_reg <= icmp_ln1452_reg_429_pp0_iter30_reg;
        icmp_ln1452_reg_429_pp0_iter32_reg <= icmp_ln1452_reg_429_pp0_iter31_reg;
        icmp_ln1452_reg_429_pp0_iter33_reg <= icmp_ln1452_reg_429_pp0_iter32_reg;
        icmp_ln1452_reg_429_pp0_iter34_reg <= icmp_ln1452_reg_429_pp0_iter33_reg;
        icmp_ln1452_reg_429_pp0_iter3_reg <= icmp_ln1452_reg_429_pp0_iter2_reg;
        icmp_ln1452_reg_429_pp0_iter4_reg <= icmp_ln1452_reg_429_pp0_iter3_reg;
        icmp_ln1452_reg_429_pp0_iter5_reg <= icmp_ln1452_reg_429_pp0_iter4_reg;
        icmp_ln1452_reg_429_pp0_iter6_reg <= icmp_ln1452_reg_429_pp0_iter5_reg;
        icmp_ln1452_reg_429_pp0_iter7_reg <= icmp_ln1452_reg_429_pp0_iter6_reg;
        icmp_ln1452_reg_429_pp0_iter8_reg <= icmp_ln1452_reg_429_pp0_iter7_reg;
        icmp_ln1452_reg_429_pp0_iter9_reg <= icmp_ln1452_reg_429_pp0_iter8_reg;
        in1_c_data_V_reg_405_pp0_iter10_reg <= in1_c_data_V_reg_405_pp0_iter9_reg;
        in1_c_data_V_reg_405_pp0_iter11_reg <= in1_c_data_V_reg_405_pp0_iter10_reg;
        in1_c_data_V_reg_405_pp0_iter12_reg <= in1_c_data_V_reg_405_pp0_iter11_reg;
        in1_c_data_V_reg_405_pp0_iter13_reg <= in1_c_data_V_reg_405_pp0_iter12_reg;
        in1_c_data_V_reg_405_pp0_iter14_reg <= in1_c_data_V_reg_405_pp0_iter13_reg;
        in1_c_data_V_reg_405_pp0_iter15_reg <= in1_c_data_V_reg_405_pp0_iter14_reg;
        in1_c_data_V_reg_405_pp0_iter16_reg <= in1_c_data_V_reg_405_pp0_iter15_reg;
        in1_c_data_V_reg_405_pp0_iter17_reg <= in1_c_data_V_reg_405_pp0_iter16_reg;
        in1_c_data_V_reg_405_pp0_iter18_reg <= in1_c_data_V_reg_405_pp0_iter17_reg;
        in1_c_data_V_reg_405_pp0_iter19_reg <= in1_c_data_V_reg_405_pp0_iter18_reg;
        in1_c_data_V_reg_405_pp0_iter20_reg <= in1_c_data_V_reg_405_pp0_iter19_reg;
        in1_c_data_V_reg_405_pp0_iter21_reg <= in1_c_data_V_reg_405_pp0_iter20_reg;
        in1_c_data_V_reg_405_pp0_iter22_reg <= in1_c_data_V_reg_405_pp0_iter21_reg;
        in1_c_data_V_reg_405_pp0_iter23_reg <= in1_c_data_V_reg_405_pp0_iter22_reg;
        in1_c_data_V_reg_405_pp0_iter24_reg <= in1_c_data_V_reg_405_pp0_iter23_reg;
        in1_c_data_V_reg_405_pp0_iter25_reg <= in1_c_data_V_reg_405_pp0_iter24_reg;
        in1_c_data_V_reg_405_pp0_iter26_reg <= in1_c_data_V_reg_405_pp0_iter25_reg;
        in1_c_data_V_reg_405_pp0_iter27_reg <= in1_c_data_V_reg_405_pp0_iter26_reg;
        in1_c_data_V_reg_405_pp0_iter28_reg <= in1_c_data_V_reg_405_pp0_iter27_reg;
        in1_c_data_V_reg_405_pp0_iter29_reg <= in1_c_data_V_reg_405_pp0_iter28_reg;
        in1_c_data_V_reg_405_pp0_iter2_reg <= in1_c_data_V_reg_405_pp0_iter1_reg;
        in1_c_data_V_reg_405_pp0_iter30_reg <= in1_c_data_V_reg_405_pp0_iter29_reg;
        in1_c_data_V_reg_405_pp0_iter31_reg <= in1_c_data_V_reg_405_pp0_iter30_reg;
        in1_c_data_V_reg_405_pp0_iter32_reg <= in1_c_data_V_reg_405_pp0_iter31_reg;
        in1_c_data_V_reg_405_pp0_iter33_reg <= in1_c_data_V_reg_405_pp0_iter32_reg;
        in1_c_data_V_reg_405_pp0_iter3_reg <= in1_c_data_V_reg_405_pp0_iter2_reg;
        in1_c_data_V_reg_405_pp0_iter4_reg <= in1_c_data_V_reg_405_pp0_iter3_reg;
        in1_c_data_V_reg_405_pp0_iter5_reg <= in1_c_data_V_reg_405_pp0_iter4_reg;
        in1_c_data_V_reg_405_pp0_iter6_reg <= in1_c_data_V_reg_405_pp0_iter5_reg;
        in1_c_data_V_reg_405_pp0_iter7_reg <= in1_c_data_V_reg_405_pp0_iter6_reg;
        in1_c_data_V_reg_405_pp0_iter8_reg <= in1_c_data_V_reg_405_pp0_iter7_reg;
        in1_c_data_V_reg_405_pp0_iter9_reg <= in1_c_data_V_reg_405_pp0_iter8_reg;
        in1_c_last_V_reg_423_pp0_iter10_reg <= in1_c_last_V_reg_423_pp0_iter9_reg;
        in1_c_last_V_reg_423_pp0_iter11_reg <= in1_c_last_V_reg_423_pp0_iter10_reg;
        in1_c_last_V_reg_423_pp0_iter12_reg <= in1_c_last_V_reg_423_pp0_iter11_reg;
        in1_c_last_V_reg_423_pp0_iter13_reg <= in1_c_last_V_reg_423_pp0_iter12_reg;
        in1_c_last_V_reg_423_pp0_iter14_reg <= in1_c_last_V_reg_423_pp0_iter13_reg;
        in1_c_last_V_reg_423_pp0_iter15_reg <= in1_c_last_V_reg_423_pp0_iter14_reg;
        in1_c_last_V_reg_423_pp0_iter16_reg <= in1_c_last_V_reg_423_pp0_iter15_reg;
        in1_c_last_V_reg_423_pp0_iter17_reg <= in1_c_last_V_reg_423_pp0_iter16_reg;
        in1_c_last_V_reg_423_pp0_iter18_reg <= in1_c_last_V_reg_423_pp0_iter17_reg;
        in1_c_last_V_reg_423_pp0_iter19_reg <= in1_c_last_V_reg_423_pp0_iter18_reg;
        in1_c_last_V_reg_423_pp0_iter20_reg <= in1_c_last_V_reg_423_pp0_iter19_reg;
        in1_c_last_V_reg_423_pp0_iter21_reg <= in1_c_last_V_reg_423_pp0_iter20_reg;
        in1_c_last_V_reg_423_pp0_iter22_reg <= in1_c_last_V_reg_423_pp0_iter21_reg;
        in1_c_last_V_reg_423_pp0_iter23_reg <= in1_c_last_V_reg_423_pp0_iter22_reg;
        in1_c_last_V_reg_423_pp0_iter24_reg <= in1_c_last_V_reg_423_pp0_iter23_reg;
        in1_c_last_V_reg_423_pp0_iter25_reg <= in1_c_last_V_reg_423_pp0_iter24_reg;
        in1_c_last_V_reg_423_pp0_iter26_reg <= in1_c_last_V_reg_423_pp0_iter25_reg;
        in1_c_last_V_reg_423_pp0_iter27_reg <= in1_c_last_V_reg_423_pp0_iter26_reg;
        in1_c_last_V_reg_423_pp0_iter28_reg <= in1_c_last_V_reg_423_pp0_iter27_reg;
        in1_c_last_V_reg_423_pp0_iter29_reg <= in1_c_last_V_reg_423_pp0_iter28_reg;
        in1_c_last_V_reg_423_pp0_iter2_reg <= in1_c_last_V_reg_423_pp0_iter1_reg;
        in1_c_last_V_reg_423_pp0_iter30_reg <= in1_c_last_V_reg_423_pp0_iter29_reg;
        in1_c_last_V_reg_423_pp0_iter31_reg <= in1_c_last_V_reg_423_pp0_iter30_reg;
        in1_c_last_V_reg_423_pp0_iter32_reg <= in1_c_last_V_reg_423_pp0_iter31_reg;
        in1_c_last_V_reg_423_pp0_iter33_reg <= in1_c_last_V_reg_423_pp0_iter32_reg;
        in1_c_last_V_reg_423_pp0_iter34_reg <= in1_c_last_V_reg_423_pp0_iter33_reg;
        in1_c_last_V_reg_423_pp0_iter3_reg <= in1_c_last_V_reg_423_pp0_iter2_reg;
        in1_c_last_V_reg_423_pp0_iter4_reg <= in1_c_last_V_reg_423_pp0_iter3_reg;
        in1_c_last_V_reg_423_pp0_iter5_reg <= in1_c_last_V_reg_423_pp0_iter4_reg;
        in1_c_last_V_reg_423_pp0_iter6_reg <= in1_c_last_V_reg_423_pp0_iter5_reg;
        in1_c_last_V_reg_423_pp0_iter7_reg <= in1_c_last_V_reg_423_pp0_iter6_reg;
        in1_c_last_V_reg_423_pp0_iter8_reg <= in1_c_last_V_reg_423_pp0_iter7_reg;
        in1_c_last_V_reg_423_pp0_iter9_reg <= in1_c_last_V_reg_423_pp0_iter8_reg;
        ref_tmp_keep_reg_417_pp0_iter10_reg <= ref_tmp_keep_reg_417_pp0_iter9_reg;
        ref_tmp_keep_reg_417_pp0_iter11_reg <= ref_tmp_keep_reg_417_pp0_iter10_reg;
        ref_tmp_keep_reg_417_pp0_iter12_reg <= ref_tmp_keep_reg_417_pp0_iter11_reg;
        ref_tmp_keep_reg_417_pp0_iter13_reg <= ref_tmp_keep_reg_417_pp0_iter12_reg;
        ref_tmp_keep_reg_417_pp0_iter14_reg <= ref_tmp_keep_reg_417_pp0_iter13_reg;
        ref_tmp_keep_reg_417_pp0_iter15_reg <= ref_tmp_keep_reg_417_pp0_iter14_reg;
        ref_tmp_keep_reg_417_pp0_iter16_reg <= ref_tmp_keep_reg_417_pp0_iter15_reg;
        ref_tmp_keep_reg_417_pp0_iter17_reg <= ref_tmp_keep_reg_417_pp0_iter16_reg;
        ref_tmp_keep_reg_417_pp0_iter18_reg <= ref_tmp_keep_reg_417_pp0_iter17_reg;
        ref_tmp_keep_reg_417_pp0_iter19_reg <= ref_tmp_keep_reg_417_pp0_iter18_reg;
        ref_tmp_keep_reg_417_pp0_iter20_reg <= ref_tmp_keep_reg_417_pp0_iter19_reg;
        ref_tmp_keep_reg_417_pp0_iter21_reg <= ref_tmp_keep_reg_417_pp0_iter20_reg;
        ref_tmp_keep_reg_417_pp0_iter22_reg <= ref_tmp_keep_reg_417_pp0_iter21_reg;
        ref_tmp_keep_reg_417_pp0_iter23_reg <= ref_tmp_keep_reg_417_pp0_iter22_reg;
        ref_tmp_keep_reg_417_pp0_iter24_reg <= ref_tmp_keep_reg_417_pp0_iter23_reg;
        ref_tmp_keep_reg_417_pp0_iter25_reg <= ref_tmp_keep_reg_417_pp0_iter24_reg;
        ref_tmp_keep_reg_417_pp0_iter26_reg <= ref_tmp_keep_reg_417_pp0_iter25_reg;
        ref_tmp_keep_reg_417_pp0_iter27_reg <= ref_tmp_keep_reg_417_pp0_iter26_reg;
        ref_tmp_keep_reg_417_pp0_iter28_reg <= ref_tmp_keep_reg_417_pp0_iter27_reg;
        ref_tmp_keep_reg_417_pp0_iter29_reg <= ref_tmp_keep_reg_417_pp0_iter28_reg;
        ref_tmp_keep_reg_417_pp0_iter2_reg <= ref_tmp_keep_reg_417_pp0_iter1_reg;
        ref_tmp_keep_reg_417_pp0_iter30_reg <= ref_tmp_keep_reg_417_pp0_iter29_reg;
        ref_tmp_keep_reg_417_pp0_iter31_reg <= ref_tmp_keep_reg_417_pp0_iter30_reg;
        ref_tmp_keep_reg_417_pp0_iter32_reg <= ref_tmp_keep_reg_417_pp0_iter31_reg;
        ref_tmp_keep_reg_417_pp0_iter33_reg <= ref_tmp_keep_reg_417_pp0_iter32_reg;
        ref_tmp_keep_reg_417_pp0_iter34_reg <= ref_tmp_keep_reg_417_pp0_iter33_reg;
        ref_tmp_keep_reg_417_pp0_iter3_reg <= ref_tmp_keep_reg_417_pp0_iter2_reg;
        ref_tmp_keep_reg_417_pp0_iter4_reg <= ref_tmp_keep_reg_417_pp0_iter3_reg;
        ref_tmp_keep_reg_417_pp0_iter5_reg <= ref_tmp_keep_reg_417_pp0_iter4_reg;
        ref_tmp_keep_reg_417_pp0_iter6_reg <= ref_tmp_keep_reg_417_pp0_iter5_reg;
        ref_tmp_keep_reg_417_pp0_iter7_reg <= ref_tmp_keep_reg_417_pp0_iter6_reg;
        ref_tmp_keep_reg_417_pp0_iter8_reg <= ref_tmp_keep_reg_417_pp0_iter7_reg;
        ref_tmp_keep_reg_417_pp0_iter9_reg <= ref_tmp_keep_reg_417_pp0_iter8_reg;
        ufunc_in_second_reg_256_pp0_iter10_reg <= ufunc_in_second_reg_256_pp0_iter9_reg;
        ufunc_in_second_reg_256_pp0_iter11_reg <= ufunc_in_second_reg_256_pp0_iter10_reg;
        ufunc_in_second_reg_256_pp0_iter12_reg <= ufunc_in_second_reg_256_pp0_iter11_reg;
        ufunc_in_second_reg_256_pp0_iter13_reg <= ufunc_in_second_reg_256_pp0_iter12_reg;
        ufunc_in_second_reg_256_pp0_iter14_reg <= ufunc_in_second_reg_256_pp0_iter13_reg;
        ufunc_in_second_reg_256_pp0_iter15_reg <= ufunc_in_second_reg_256_pp0_iter14_reg;
        ufunc_in_second_reg_256_pp0_iter16_reg <= ufunc_in_second_reg_256_pp0_iter15_reg;
        ufunc_in_second_reg_256_pp0_iter17_reg <= ufunc_in_second_reg_256_pp0_iter16_reg;
        ufunc_in_second_reg_256_pp0_iter18_reg <= ufunc_in_second_reg_256_pp0_iter17_reg;
        ufunc_in_second_reg_256_pp0_iter19_reg <= ufunc_in_second_reg_256_pp0_iter18_reg;
        ufunc_in_second_reg_256_pp0_iter20_reg <= ufunc_in_second_reg_256_pp0_iter19_reg;
        ufunc_in_second_reg_256_pp0_iter21_reg <= ufunc_in_second_reg_256_pp0_iter20_reg;
        ufunc_in_second_reg_256_pp0_iter22_reg <= ufunc_in_second_reg_256_pp0_iter21_reg;
        ufunc_in_second_reg_256_pp0_iter23_reg <= ufunc_in_second_reg_256_pp0_iter22_reg;
        ufunc_in_second_reg_256_pp0_iter24_reg <= ufunc_in_second_reg_256_pp0_iter23_reg;
        ufunc_in_second_reg_256_pp0_iter25_reg <= ufunc_in_second_reg_256_pp0_iter24_reg;
        ufunc_in_second_reg_256_pp0_iter26_reg <= ufunc_in_second_reg_256_pp0_iter25_reg;
        ufunc_in_second_reg_256_pp0_iter27_reg <= ufunc_in_second_reg_256_pp0_iter26_reg;
        ufunc_in_second_reg_256_pp0_iter28_reg <= ufunc_in_second_reg_256_pp0_iter27_reg;
        ufunc_in_second_reg_256_pp0_iter29_reg <= ufunc_in_second_reg_256_pp0_iter28_reg;
        ufunc_in_second_reg_256_pp0_iter2_reg <= ufunc_in_second_reg_256_pp0_iter1_reg;
        ufunc_in_second_reg_256_pp0_iter30_reg <= ufunc_in_second_reg_256_pp0_iter29_reg;
        ufunc_in_second_reg_256_pp0_iter31_reg <= ufunc_in_second_reg_256_pp0_iter30_reg;
        ufunc_in_second_reg_256_pp0_iter32_reg <= ufunc_in_second_reg_256_pp0_iter31_reg;
        ufunc_in_second_reg_256_pp0_iter33_reg <= ufunc_in_second_reg_256_pp0_iter32_reg;
        ufunc_in_second_reg_256_pp0_iter3_reg <= ufunc_in_second_reg_256_pp0_iter2_reg;
        ufunc_in_second_reg_256_pp0_iter4_reg <= ufunc_in_second_reg_256_pp0_iter3_reg;
        ufunc_in_second_reg_256_pp0_iter5_reg <= ufunc_in_second_reg_256_pp0_iter4_reg;
        ufunc_in_second_reg_256_pp0_iter6_reg <= ufunc_in_second_reg_256_pp0_iter5_reg;
        ufunc_in_second_reg_256_pp0_iter7_reg <= ufunc_in_second_reg_256_pp0_iter6_reg;
        ufunc_in_second_reg_256_pp0_iter8_reg <= ufunc_in_second_reg_256_pp0_iter7_reg;
        ufunc_in_second_reg_256_pp0_iter9_reg <= ufunc_in_second_reg_256_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1452_reg_429_pp0_iter1_reg <= icmp_ln1452_reg_429;
        in1_c_data_V_reg_405 <= in1_s_TDATA_int_regslice;
        in1_c_data_V_reg_405_pp0_iter1_reg <= in1_c_data_V_reg_405;
        in1_c_last_V_reg_423 <= in1_s_TLAST_int_regslice;
        in1_c_last_V_reg_423_pp0_iter1_reg <= in1_c_last_V_reg_423;
        ref_tmp_keep_reg_417 <= in1_s_TKEEP_int_regslice;
        ref_tmp_keep_reg_417_pp0_iter1_reg <= ref_tmp_keep_reg_417;
        ufunc_in_second_reg_256_pp0_iter1_reg <= ufunc_in_second_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2 <= ap_phi_mux_ufunc_in_second_phi_fu_260_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        is_binary_load_reg_397 <= is_binary_q0;
        returns_pair_load_reg_401 <= returns_pair_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (args_read_reg_383 == 8'd2))) begin
        out_first_3_reg_443 <= grp_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (args_read_reg_383 == 8'd4))) begin
        p_Val2_2_reg_433 <= grp_exp_32_32_s_fu_306_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (args_read_reg_383 == 8'd5))) begin
        p_Val2_3_reg_448 <= p_Val2_3_log_32_32_s_fu_301_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (args_read_reg_383 == 8'd10))) begin
        p_Val2_s_reg_438 <= grp_sqrt_fixed_32_32_s_fu_296_ap_return;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (in1_c_last_V_fu_328_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out2_s_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out1_s_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state40))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((is_binary_load_reg_397 == 1'd1)) begin
        ap_phi_mux_ufunc_in_second_phi_fu_260_p4 = in2_s_TDATA_int_regslice;
    end else if ((is_binary_load_reg_397 == 1'd0)) begin
        ap_phi_mux_ufunc_in_second_phi_fu_260_p4 = in2;
    end else begin
        ap_phi_mux_ufunc_in_second_phi_fu_260_p4 = ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256;
    end
end

always @ (*) begin
    if (((icmp_ln1452_reg_429_pp0_iter34_reg == 1'd0) & (args_read_reg_383 == 8'd8))) begin
        ap_phi_mux_ufunc_out_first_phi_fu_273_p18 = grp_fu_349_p2;
    end else begin
        ap_phi_mux_ufunc_out_first_phi_fu_273_p18 = ap_phi_reg_pp0_iter35_ufunc_out_first_reg_268;
    end
end

always @ (*) begin
    if ((~((regslice_both_out2_s_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out1_s_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state40))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp108) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_exp_32_32_s_fu_306_ap_ce = 1'b1;
    end else begin
        grp_exp_32_32_s_fu_306_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_349_ce = 1'b1;
    end else begin
        grp_fu_349_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_362_ce = 1'b1;
    end else begin
        grp_fu_362_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp128) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_sqrt_fixed_32_32_s_fu_296_ap_ce = 1'b1;
    end else begin
        grp_sqrt_fixed_32_32_s_fu_296_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_s_TDATA_blk_n = in1_s_TVALID_int_regslice;
    end else begin
        in1_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_s_TREADY_int_regslice = 1'b1;
    end else begin
        in1_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((is_binary_load_reg_397 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_s_TDATA_blk_n = in2_s_TVALID_int_regslice;
    end else begin
        in2_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((is_binary_load_reg_397 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_s_TREADY_int_regslice = 1'b1;
    end else begin
        in2_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        is_binary_ce0 = 1'b1;
    end else begin
        is_binary_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter35 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        out1_s_TDATA_blk_n = out1_s_TREADY_int_regslice;
    end else begin
        out1_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter35 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out1_s_TVALID_int_regslice = 1'b1;
    end else begin
        out1_s_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (returns_pair_load_reg_401 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (returns_pair_load_reg_401 == 1'd1)))) begin
        out2_s_TDATA_blk_n = out2_s_TREADY_int_regslice;
    end else begin
        out2_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (returns_pair_load_reg_401 == 1'd1))) begin
        out2_s_TVALID_int_regslice = 1'b1;
    end else begin
        out2_s_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        returns_pair_ce0 = 1'b1;
    end else begin
        returns_pair_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter35 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter35 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state40 : begin
            if ((~((regslice_both_out2_s_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out1_s_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter35 == 1'b1) & (out1_s_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))) | ((out2_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (returns_pair_load_reg_401 == 1'd1)) | ((out1_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter35 == 1'b1) & (out1_s_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))) | ((out1_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp108 = (((ap_enable_reg_pp0_iter35 == 1'b1) & (out1_s_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))) | ((out1_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp128 = (((ap_enable_reg_pp0_iter35 == 1'b1) & (out1_s_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))) | ((out1_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter35 == 1'b1) & (out1_s_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))) | ((out1_s_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)))));
end

assign ap_block_state10_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter28_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter29_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter30_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter31_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1_ignore_call0 = ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1));
end

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter9_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter10_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter11_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter13_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter14_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter15_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter16_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter17_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter18_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter19_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter20_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter21_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter22_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter23_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter24_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_pp0_stage0_iter35 = (out1_s_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state38_pp0_stage0_iter35_ignore_call0 = (out1_s_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state39_pp0_stage0_iter36 = (out1_s_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state39_pp0_stage0_iter36_ignore_call0 = (out1_s_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_io = ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call0 = ((in1_s_TVALID_int_regslice == 1'b0) | ((is_binary_load_reg_397 == 1'd1) & (in2_s_TVALID_int_regslice == 1'b0)) | ((out2_s_TREADY_int_regslice == 1'b0) & (returns_pair_load_reg_401 == 1'd1)));
end

always @ (*) begin
    ap_block_state40 = ((regslice_both_out2_s_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out1_s_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter32_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter33_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter34_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter25_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter26_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter27_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_627 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_749 = (~(args_read_reg_383 == 8'd1) & ~(args_read_reg_383 == 8'd7) & ~(args_read_reg_383 == 8'd5) & ~(args_read_reg_383 == 8'd2) & ~(args_read_reg_383 == 8'd10) & ~(args_read_reg_383 == 8'd4) & ~(args_read_reg_383 == 8'd8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_ufunc_in_second_reg_256 = 'bx;

assign ap_phi_reg_pp0_iter0_ufunc_out_first_reg_268 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_exp_32_32_s_fu_306_ap_start = grp_exp_32_32_s_fu_306_ap_start_reg;

assign icmp_ln1452_fu_343_p2 = ((ap_phi_mux_ufunc_in_second_phi_fu_260_p4 == 32'd0) ? 1'b1 : 1'b0);

assign idxprom_fu_313_p1 = args;

assign in1_c_last_V_fu_328_p1 = in1_s_TLAST_int_regslice;

assign in1_s_TREADY = regslice_both_in1_s_V_data_V_U_ack_in;

assign in2_s_TREADY = regslice_both_in2_s_V_data_V_U_ack_in;

assign is_binary_address0 = idxprom_fu_313_p1;

assign out1_s_TVALID = regslice_both_out1_s_V_data_V_U_vld_out;

assign out2_s_TVALID = regslice_both_out2_s_V_data_V_U_vld_out;

assign out_first_2_fu_373_p2 = ($signed(in1_c_data_V_reg_405_pp0_iter33_reg) - $signed(ufunc_in_second_reg_256_pp0_iter33_reg));

assign out_first_fu_378_p2 = ($signed(in1_c_data_V_reg_405_pp0_iter33_reg) + $signed(ufunc_in_second_reg_256_pp0_iter33_reg));

assign returns_pair_address0 = idxprom_fu_313_p1;

assign zext_ln789_1_fu_367_p1 = p_Val2_2_reg_433;

assign zext_ln789_fu_370_p1 = p_Val2_s_reg_438;

endmodule //ufunc_call_i4
