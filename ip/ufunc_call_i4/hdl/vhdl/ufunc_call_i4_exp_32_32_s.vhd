-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ufunc_call_i4_exp_32_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of ufunc_call_i4_exp_32_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (67 downto 0);
    signal p_Result_121_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_121_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_6_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_6_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_12_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_12_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_19_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_19_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_24_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_24_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln488_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_119_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_96_fu_127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_97_fu_135_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_98_fu_143_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_100_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_101_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_102_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_103_fu_183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_104_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_105_fu_199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_106_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_107_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_108_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_110_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_111_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_112_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_114_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_115_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_116_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_117_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_118_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_119_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_120_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_122_fu_335_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal overf_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_3_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_4_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_5_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_5_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_2_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_7_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_8_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_7_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_6_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_9_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_10_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_11_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_12_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_10_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_9_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_11_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_8_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_14_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_15_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_14_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_13_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_16_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_17_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_18_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_19_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_17_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_16_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_18_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_15_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_21_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_22_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_20_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_20_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_23_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_24_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1448_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_22_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_23_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_21_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_639_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_123_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln571_25_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_13_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln803_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_fu_677_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_685_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_695_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_124_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_711_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ufunc_call_i4_exp_32_32_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;



begin
    exp_x_msb_1_table_V_U : component ufunc_call_i4_exp_32_32_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 68,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln571_12_reg_739 <= or_ln571_12_fu_567_p2;
                or_ln571_19_reg_744 <= or_ln571_19_fu_603_p2;
                or_ln571_24_reg_749 <= or_ln571_24_fu_633_p2;
                or_ln571_6_reg_734 <= or_ln571_6_fu_531_p2;
                p_Result_121_reg_729 <= x(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv31_7FFFFFFF when (p_Result_124_fu_703_p3(0) = '1') else 
        tmp_fu_711_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln488_fu_653_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1448_fu_495_p2 <= "1" when (signed(p_Result_122_fu_335_p1) > signed(ap_const_lv6_16)) else "0";
    or_ln571_10_fu_555_p2 <= (xor_ln176_12_fu_417_p2 or xor_ln176_11_fu_411_p2);
    or_ln571_11_fu_561_p2 <= (or_ln571_9_fu_549_p2 or or_ln571_10_fu_555_p2);
    or_ln571_12_fu_567_p2 <= (or_ln571_8_fu_543_p2 or or_ln571_11_fu_561_p2);
    or_ln571_13_fu_658_p2 <= (or_ln571_6_reg_734 or or_ln571_12_reg_739);
    or_ln571_14_fu_573_p2 <= (xor_ln176_15_fu_435_p2 or xor_ln176_14_fu_429_p2);
    or_ln571_15_fu_579_p2 <= (xor_ln176_13_fu_423_p2 or or_ln571_14_fu_573_p2);
    or_ln571_16_fu_585_p2 <= (xor_ln176_17_fu_447_p2 or xor_ln176_16_fu_441_p2);
    or_ln571_17_fu_591_p2 <= (xor_ln176_19_fu_459_p2 or xor_ln176_18_fu_453_p2);
    or_ln571_18_fu_597_p2 <= (or_ln571_17_fu_591_p2 or or_ln571_16_fu_585_p2);
    or_ln571_19_fu_603_p2 <= (or_ln571_18_fu_597_p2 or or_ln571_15_fu_579_p2);
    or_ln571_1_fu_501_p2 <= (xor_ln176_1_fu_351_p2 or overf_fu_339_p2);
    or_ln571_20_fu_609_p2 <= (xor_ln176_22_fu_477_p2 or xor_ln176_21_fu_471_p2);
    or_ln571_21_fu_615_p2 <= (xor_ln176_20_fu_465_p2 or or_ln571_20_fu_609_p2);
    or_ln571_22_fu_621_p2 <= (xor_ln176_24_fu_489_p2 or xor_ln176_23_fu_483_p2);
    or_ln571_23_fu_627_p2 <= (or_ln571_22_fu_621_p2 or icmp_ln1448_fu_495_p2);
    or_ln571_24_fu_633_p2 <= (or_ln571_23_fu_627_p2 or or_ln571_21_fu_615_p2);
    or_ln571_25_fu_662_p2 <= (or_ln571_24_reg_749 or or_ln571_19_reg_744);
    or_ln571_2_fu_507_p2 <= (xor_ln176_fu_345_p2 or or_ln571_1_fu_501_p2);
    or_ln571_3_fu_513_p2 <= (xor_ln176_3_fu_363_p2 or xor_ln176_2_fu_357_p2);
    or_ln571_4_fu_519_p2 <= (xor_ln176_5_fu_375_p2 or xor_ln176_4_fu_369_p2);
    or_ln571_5_fu_525_p2 <= (or_ln571_4_fu_519_p2 or or_ln571_3_fu_513_p2);
    or_ln571_6_fu_531_p2 <= (or_ln571_5_fu_525_p2 or or_ln571_2_fu_507_p2);
    or_ln571_7_fu_537_p2 <= (xor_ln176_8_fu_393_p2 or xor_ln176_7_fu_387_p2);
    or_ln571_8_fu_543_p2 <= (xor_ln176_6_fu_381_p2 or or_ln571_7_fu_537_p2);
    or_ln571_9_fu_549_p2 <= (xor_ln176_9_fu_399_p2 or xor_ln176_10_fu_405_p2);
    or_ln571_fu_666_p2 <= (or_ln571_25_fu_662_p2 or or_ln571_13_fu_658_p2);
    overf_fu_339_p2 <= (p_Result_s_fu_119_p3 xor p_Result_121_fu_327_p3);
    p_Result_100_fu_159_p3 <= x(10 downto 10);
    p_Result_101_fu_167_p3 <= x(11 downto 11);
    p_Result_102_fu_175_p3 <= x(12 downto 12);
    p_Result_103_fu_183_p3 <= x(13 downto 13);
    p_Result_104_fu_191_p3 <= x(14 downto 14);
    p_Result_105_fu_199_p3 <= x(15 downto 15);
    p_Result_106_fu_207_p3 <= x(16 downto 16);
    p_Result_107_fu_215_p3 <= x(17 downto 17);
    p_Result_108_fu_223_p3 <= x(18 downto 18);
    p_Result_109_fu_231_p3 <= x(19 downto 19);
    p_Result_110_fu_239_p3 <= x(20 downto 20);
    p_Result_111_fu_247_p3 <= x(21 downto 21);
    p_Result_112_fu_255_p3 <= x(22 downto 22);
    p_Result_113_fu_263_p3 <= x(23 downto 23);
    p_Result_114_fu_271_p3 <= x(24 downto 24);
    p_Result_115_fu_279_p3 <= x(25 downto 25);
    p_Result_116_fu_287_p3 <= x(26 downto 26);
    p_Result_117_fu_295_p3 <= x(27 downto 27);
    p_Result_118_fu_303_p3 <= x(28 downto 28);
    p_Result_119_fu_311_p3 <= x(29 downto 29);
    p_Result_120_fu_319_p3 <= x(30 downto 30);
    p_Result_121_fu_327_p3 <= x(31 downto 31);
    p_Result_122_fu_335_p1 <= x(6 - 1 downto 0);
    p_Result_123_fu_643_p4 <= ((p_Result_121_fu_327_p3 & trunc_ln368_fu_639_p1) & ap_const_lv2_0);
    p_Result_124_fu_703_p3 <= p_Val2_s_fu_695_p3(63 downto 63);
    p_Result_96_fu_127_p3 <= x(6 downto 6);
    p_Result_97_fu_135_p3 <= x(7 downto 7);
    p_Result_98_fu_143_p3 <= x(8 downto 8);
    p_Result_99_fu_151_p3 <= x(9 downto 9);
    p_Result_s_fu_119_p3 <= x(5 downto 5);
    p_Val2_s_fu_695_p3 <= 
        select_ln368_fu_677_p3 when (or_ln571_fu_666_p2(0) = '1') else 
        y_V_fu_685_p4;
    select_ln368_fu_677_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln803_fu_672_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_fu_711_p4 <= p_Val2_s_fu_695_p3(62 downto 32);
    trunc_ln368_fu_639_p1 <= x(5 - 1 downto 0);
    xor_ln176_10_fu_405_p2 <= (p_Result_121_fu_327_p3 xor p_Result_106_fu_207_p3);
    xor_ln176_11_fu_411_p2 <= (p_Result_121_fu_327_p3 xor p_Result_107_fu_215_p3);
    xor_ln176_12_fu_417_p2 <= (p_Result_121_fu_327_p3 xor p_Result_108_fu_223_p3);
    xor_ln176_13_fu_423_p2 <= (p_Result_121_fu_327_p3 xor p_Result_109_fu_231_p3);
    xor_ln176_14_fu_429_p2 <= (p_Result_121_fu_327_p3 xor p_Result_110_fu_239_p3);
    xor_ln176_15_fu_435_p2 <= (p_Result_121_fu_327_p3 xor p_Result_111_fu_247_p3);
    xor_ln176_16_fu_441_p2 <= (p_Result_121_fu_327_p3 xor p_Result_112_fu_255_p3);
    xor_ln176_17_fu_447_p2 <= (p_Result_121_fu_327_p3 xor p_Result_113_fu_263_p3);
    xor_ln176_18_fu_453_p2 <= (p_Result_121_fu_327_p3 xor p_Result_114_fu_271_p3);
    xor_ln176_19_fu_459_p2 <= (p_Result_121_fu_327_p3 xor p_Result_115_fu_279_p3);
    xor_ln176_1_fu_351_p2 <= (p_Result_97_fu_135_p3 xor p_Result_121_fu_327_p3);
    xor_ln176_20_fu_465_p2 <= (p_Result_121_fu_327_p3 xor p_Result_116_fu_287_p3);
    xor_ln176_21_fu_471_p2 <= (p_Result_121_fu_327_p3 xor p_Result_117_fu_295_p3);
    xor_ln176_22_fu_477_p2 <= (p_Result_121_fu_327_p3 xor p_Result_118_fu_303_p3);
    xor_ln176_23_fu_483_p2 <= (p_Result_121_fu_327_p3 xor p_Result_119_fu_311_p3);
    xor_ln176_24_fu_489_p2 <= (p_Result_121_fu_327_p3 xor p_Result_120_fu_319_p3);
    xor_ln176_2_fu_357_p2 <= (p_Result_98_fu_143_p3 xor p_Result_121_fu_327_p3);
    xor_ln176_3_fu_363_p2 <= (p_Result_99_fu_151_p3 xor p_Result_121_fu_327_p3);
    xor_ln176_4_fu_369_p2 <= (p_Result_121_fu_327_p3 xor p_Result_100_fu_159_p3);
    xor_ln176_5_fu_375_p2 <= (p_Result_121_fu_327_p3 xor p_Result_101_fu_167_p3);
    xor_ln176_6_fu_381_p2 <= (p_Result_121_fu_327_p3 xor p_Result_102_fu_175_p3);
    xor_ln176_7_fu_387_p2 <= (p_Result_121_fu_327_p3 xor p_Result_103_fu_183_p3);
    xor_ln176_8_fu_393_p2 <= (p_Result_121_fu_327_p3 xor p_Result_104_fu_191_p3);
    xor_ln176_9_fu_399_p2 <= (p_Result_121_fu_327_p3 xor p_Result_105_fu_199_p3);
    xor_ln176_fu_345_p2 <= (p_Result_96_fu_127_p3 xor p_Result_121_fu_327_p3);
    xor_ln803_fu_672_p2 <= (p_Result_121_reg_729 xor ap_const_lv1_1);
    y_V_fu_685_p4 <= exp_x_msb_1_table_V_q0(67 downto 4);
    zext_ln488_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_123_fu_643_p4),64));
end behav;
