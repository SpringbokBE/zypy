// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ufunc_reduce_all_i4_do_operation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        op_read,
        x_read,
        y_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] op_read;
input  [31:0] x_read;
input  [31:0] y_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] y_read_1_reg_143;
reg  signed [31:0] y_read_1_reg_143_pp0_iter1_reg;
reg   [31:0] x_read_1_reg_150;
reg  signed [31:0] x_read_1_reg_150_pp0_iter1_reg;
wire   [7:0] op_read_1_read_fu_50_p2;
reg   [7:0] op_read_1_reg_162;
reg   [7:0] op_read_1_reg_162_pp0_iter1_reg;
reg   [7:0] op_read_1_reg_162_pp0_iter2_reg;
wire   [31:0] p_Val2_5_log_32_32_s_fu_75_ap_return;
reg   [31:0] p_Val2_5_reg_166;
wire   [31:0] grp_fu_87_p2;
reg   [31:0] out_first_3_reg_171;
wire   [31:0] grp_fu_93_p2;
reg   [31:0] out_first_2_reg_176;
wire   [31:0] out_first_4_fu_127_p3;
reg   [31:0] out_first_4_reg_181;
wire   [30:0] grp_exp_32_32_s_fu_80_ap_return;
reg   [30:0] p_Val2_4_reg_186;
wire   [31:0] out_first_fu_135_p2;
reg    ap_block_pp0_stage0_subdone;
wire    p_Val2_5_log_32_32_s_fu_75_ap_ready;
wire    grp_exp_32_32_s_fu_80_ap_start;
wire    grp_exp_32_32_s_fu_80_ap_done;
wire    grp_exp_32_32_s_fu_80_ap_idle;
wire    grp_exp_32_32_s_fu_80_ap_ready;
reg    grp_exp_32_32_s_fu_80_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call0;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call0;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call0;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call0;
wire    ap_block_pp0_stage0_11001_ignoreCallOp12;
reg   [31:0] ap_phi_mux_ufunc_out_first_phi_fu_59_p14;
wire   [31:0] ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56;
reg   [31:0] ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56;
reg   [31:0] ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56;
reg   [31:0] ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56;
wire   [31:0] zext_ln789_fu_139_p1;
reg    grp_exp_32_32_s_fu_80_ap_start_reg;
wire   [31:0] p_Val2_1_fu_99_p2;
wire   [31:0] p_Val2_s_fu_103_p2;
wire   [0:0] p_Result_s_fu_119_p3;
wire   [31:0] p_Result_32_fu_109_p4;
reg    grp_fu_87_ce;
reg    grp_fu_93_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_177;
reg    ap_condition_54;
reg    ap_condition_145;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 grp_exp_32_32_s_fu_80_ap_start_reg = 1'b0;
end

ufunc_reduce_all_i4_log_32_32_s p_Val2_5_log_32_32_s_fu_75(
    .ap_ready(p_Val2_5_log_32_32_s_fu_75_ap_ready),
    .x(x_read_1_reg_150),
    .ap_return(p_Val2_5_log_32_32_s_fu_75_ap_return)
);

ufunc_reduce_all_i4_exp_32_32_s grp_exp_32_32_s_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_32_32_s_fu_80_ap_start),
    .ap_done(grp_exp_32_32_s_fu_80_ap_done),
    .ap_idle(grp_exp_32_32_s_fu_80_ap_idle),
    .ap_ready(grp_exp_32_32_s_fu_80_ap_ready),
    .ap_ce(grp_exp_32_32_s_fu_80_ap_ce),
    .x(x_read_1_reg_150),
    .ap_return(grp_exp_32_32_s_fu_80_ap_return)
);

ufunc_reduce_all_i4_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_read),
    .din1(x_read),
    .ce(grp_fu_87_ce),
    .dout(grp_fu_87_p2)
);

ufunc_reduce_all_i4_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_read),
    .din1(x_read),
    .ce(grp_fu_93_ce),
    .dout(grp_fu_93_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_32_32_s_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((op_read_1_read_fu_50_p2 == 8'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grp_exp_32_32_s_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_exp_32_32_s_fu_80_ap_ready == 1'b1)) begin
            grp_exp_32_32_s_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_54)) begin
        if ((1'b1 == ap_condition_177)) begin
            ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56 <= x_read;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_145)) begin
        if ((op_read_1_reg_162_pp0_iter1_reg == 8'd1)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_fu_135_p2;
        end else if ((op_read_1_reg_162_pp0_iter1_reg == 8'd2)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_2_reg_176;
        end else if ((op_read_1_reg_162_pp0_iter1_reg == 8'd3)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_3_reg_171;
        end else if ((op_read_1_reg_162_pp0_iter1_reg == 8'd5)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= p_Val2_5_reg_166;
        end else if ((op_read_1_reg_162_pp0_iter1_reg == 8'd6)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= out_first_4_reg_181;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_ufunc_out_first_reg_56 <= ap_phi_reg_pp0_iter1_ufunc_out_first_reg_56;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_read_1_reg_162 <= op_read;
        op_read_1_reg_162_pp0_iter1_reg <= op_read_1_reg_162;
        x_read_1_reg_150 <= x_read;
        x_read_1_reg_150_pp0_iter1_reg <= x_read_1_reg_150;
        y_read_1_reg_143 <= y_read;
        y_read_1_reg_143_pp0_iter1_reg <= y_read_1_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        op_read_1_reg_162_pp0_iter2_reg <= op_read_1_reg_162_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((op_read_1_reg_162 == 8'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_first_2_reg_176 <= grp_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((op_read_1_reg_162 == 8'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_first_3_reg_171 <= grp_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((op_read_1_reg_162 == 8'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_first_4_reg_181 <= out_first_4_fu_127_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((op_read_1_reg_162_pp0_iter1_reg == 8'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        p_Val2_4_reg_186 <= grp_exp_32_32_s_fu_80_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((op_read_1_reg_162 == 8'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_5_reg_166 <= p_Val2_5_log_32_32_s_fu_75_ap_return;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((op_read_1_reg_162_pp0_iter2_reg == 8'd4)) begin
        ap_phi_mux_ufunc_out_first_phi_fu_59_p14 = zext_ln789_fu_139_p1;
    end else begin
        ap_phi_mux_ufunc_out_first_phi_fu_59_p14 = ap_phi_reg_pp0_iter3_ufunc_out_first_reg_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp12) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_exp_32_32_s_fu_80_ap_ce = 1'b1;
    end else begin
        grp_exp_32_32_s_fu_80_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_87_ce = 1'b1;
    end else begin
        grp_fu_87_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_93_ce = 1'b1;
    end else begin
        grp_fu_93_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_145 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce));
end

always @ (*) begin
    ap_condition_177 = (~(op_read_1_read_fu_50_p2 == 8'd5) & ~(op_read_1_read_fu_50_p2 == 8'd4) & ~(op_read_1_read_fu_50_p2 == 8'd3) & ~(op_read_1_read_fu_50_p2 == 8'd2) & ~(op_read_1_read_fu_50_p2 == 8'd1) & ~(op_read_1_read_fu_50_p2 == 8'd6));
end

always @ (*) begin
    ap_condition_54 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_ufunc_out_first_reg_56 = 'bx;

assign ap_return = ap_phi_mux_ufunc_out_first_phi_fu_59_p14;

assign grp_exp_32_32_s_fu_80_ap_start = grp_exp_32_32_s_fu_80_ap_start_reg;

assign op_read_1_read_fu_50_p2 = op_read;

assign out_first_4_fu_127_p3 = ((p_Result_s_fu_119_p3[0:0] == 1'b1) ? p_Result_32_fu_109_p4 : p_Val2_1_fu_99_p2);

assign out_first_fu_135_p2 = ($signed(y_read_1_reg_143_pp0_iter1_reg) + $signed(x_read_1_reg_150_pp0_iter1_reg));

assign p_Result_32_fu_109_p4 = {|(1'd0), p_Val2_s_fu_103_p2[31 - 1:0]};

assign p_Result_s_fu_119_p3 = p_Val2_1_fu_99_p2[32'd31];

assign p_Val2_1_fu_99_p2 = ($signed(x_read_1_reg_150) - $signed(y_read_1_reg_143));

assign p_Val2_s_fu_103_p2 = (32'd0 - p_Val2_1_fu_99_p2);

assign zext_ln789_fu_139_p1 = p_Val2_4_reg_186;

endmodule //ufunc_reduce_all_i4_do_operation
