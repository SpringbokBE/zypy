// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter_avg_f4_filter_avg_f4,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3389,HLS_SYN_LUT=3340,HLS_VERSION=2020_2}" *)

module filter_avg_f4 (
        ap_clk,
        ap_rst_n,
        in_s_TDATA,
        in_s_TVALID,
        in_s_TREADY,
        in_s_TKEEP,
        in_s_TSTRB,
        in_s_TUSER,
        in_s_TLAST,
        in_s_TID,
        in_s_TDEST,
        out_s_TDATA,
        out_s_TVALID,
        out_s_TREADY,
        out_s_TKEEP,
        out_s_TSTRB,
        out_s_TUSER,
        out_s_TLAST,
        out_s_TID,
        out_s_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_pp0_stage0 = 35'd4;
parameter    ap_ST_fsm_state6 = 35'd8;
parameter    ap_ST_fsm_state7 = 35'd16;
parameter    ap_ST_fsm_pp1_stage0 = 35'd32;
parameter    ap_ST_fsm_state36 = 35'd64;
parameter    ap_ST_fsm_state37 = 35'd128;
parameter    ap_ST_fsm_state38 = 35'd256;
parameter    ap_ST_fsm_state39 = 35'd512;
parameter    ap_ST_fsm_state40 = 35'd1024;
parameter    ap_ST_fsm_pp2_stage0 = 35'd2048;
parameter    ap_ST_fsm_state44 = 35'd4096;
parameter    ap_ST_fsm_state45 = 35'd8192;
parameter    ap_ST_fsm_state46 = 35'd16384;
parameter    ap_ST_fsm_state47 = 35'd32768;
parameter    ap_ST_fsm_state48 = 35'd65536;
parameter    ap_ST_fsm_state49 = 35'd131072;
parameter    ap_ST_fsm_state50 = 35'd262144;
parameter    ap_ST_fsm_state51 = 35'd524288;
parameter    ap_ST_fsm_state52 = 35'd1048576;
parameter    ap_ST_fsm_state53 = 35'd2097152;
parameter    ap_ST_fsm_state54 = 35'd4194304;
parameter    ap_ST_fsm_state55 = 35'd8388608;
parameter    ap_ST_fsm_state56 = 35'd16777216;
parameter    ap_ST_fsm_state57 = 35'd33554432;
parameter    ap_ST_fsm_state58 = 35'd67108864;
parameter    ap_ST_fsm_state59 = 35'd134217728;
parameter    ap_ST_fsm_state60 = 35'd268435456;
parameter    ap_ST_fsm_state61 = 35'd536870912;
parameter    ap_ST_fsm_state62 = 35'd1073741824;
parameter    ap_ST_fsm_state63 = 35'd2147483648;
parameter    ap_ST_fsm_state64 = 35'd4294967296;
parameter    ap_ST_fsm_state65 = 35'd8589934592;
parameter    ap_ST_fsm_state66 = 35'd17179869184;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_s_TDATA;
input   in_s_TVALID;
output   in_s_TREADY;
input  [3:0] in_s_TKEEP;
input  [3:0] in_s_TSTRB;
input  [0:0] in_s_TUSER;
input  [0:0] in_s_TLAST;
input  [0:0] in_s_TID;
input  [0:0] in_s_TDEST;
output  [31:0] out_s_TDATA;
output   out_s_TVALID;
input   out_s_TREADY;
output  [3:0] out_s_TKEEP;
output  [3:0] out_s_TSTRB;
output  [0:0] out_s_TUSER;
output  [0:0] out_s_TLAST;
output  [0:0] out_s_TID;
output  [0:0] out_s_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] args;
reg    in_s_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln125_fu_484_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln136_fu_584_p2;
reg   [0:0] ap_phi_mux_first_1_phi_fu_296_p4;
wire    grp_write_stream_fu_333_out_s_TDATA_blk_n;
reg    out_s_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln128_reg_831;
reg    ap_enable_reg_pp1_iter26;
reg   [0:0] first_1_reg_293;
reg   [0:0] first_1_reg_293_pp1_iter25_reg;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln157_reg_933;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg   [15:0] i_reg_259;
reg   [15:0] x_reg_282;
reg   [0:0] first_1_reg_293_pp1_iter1_reg;
reg    ap_predicate_op162_read_state8;
reg    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
wire    ap_block_state12_pp1_stage0_iter4;
wire    ap_block_state13_pp1_stage0_iter5;
wire    ap_block_state14_pp1_stage0_iter6;
wire    ap_block_state15_pp1_stage0_iter7;
wire    ap_block_state16_pp1_stage0_iter8;
wire    ap_block_state17_pp1_stage0_iter9;
wire    ap_block_state18_pp1_stage0_iter10;
wire    ap_block_state19_pp1_stage0_iter11;
wire    ap_block_state20_pp1_stage0_iter12;
wire    ap_block_state21_pp1_stage0_iter13;
wire    ap_block_state22_pp1_stage0_iter14;
wire    ap_block_state23_pp1_stage0_iter15;
wire    ap_block_state24_pp1_stage0_iter16;
wire    ap_block_state25_pp1_stage0_iter17;
wire    ap_block_state26_pp1_stage0_iter18;
wire    ap_block_state27_pp1_stage0_iter19;
wire    ap_block_state28_pp1_stage0_iter20;
wire    ap_block_state29_pp1_stage0_iter21;
wire    ap_block_state30_pp1_stage0_iter22;
wire    ap_block_state31_pp1_stage0_iter23;
wire    ap_block_state32_pp1_stage0_iter24;
wire    ap_block_state33_pp1_stage0_iter25;
reg    ap_block_state34_pp1_stage0_iter26;
wire    ap_block_state35_pp1_stage0_iter27;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] first_1_reg_293_pp1_iter2_reg;
reg   [0:0] first_1_reg_293_pp1_iter3_reg;
reg   [0:0] first_1_reg_293_pp1_iter4_reg;
reg   [0:0] first_1_reg_293_pp1_iter5_reg;
reg   [0:0] first_1_reg_293_pp1_iter6_reg;
reg   [0:0] first_1_reg_293_pp1_iter7_reg;
reg   [0:0] first_1_reg_293_pp1_iter8_reg;
reg   [0:0] first_1_reg_293_pp1_iter9_reg;
reg   [0:0] first_1_reg_293_pp1_iter10_reg;
reg   [0:0] first_1_reg_293_pp1_iter11_reg;
reg   [0:0] first_1_reg_293_pp1_iter12_reg;
reg   [0:0] first_1_reg_293_pp1_iter13_reg;
reg   [0:0] first_1_reg_293_pp1_iter14_reg;
reg   [0:0] first_1_reg_293_pp1_iter15_reg;
reg   [0:0] first_1_reg_293_pp1_iter16_reg;
reg   [0:0] first_1_reg_293_pp1_iter17_reg;
reg   [0:0] first_1_reg_293_pp1_iter18_reg;
reg   [0:0] first_1_reg_293_pp1_iter19_reg;
reg   [0:0] first_1_reg_293_pp1_iter20_reg;
reg   [0:0] first_1_reg_293_pp1_iter21_reg;
reg   [0:0] first_1_reg_293_pp1_iter22_reg;
reg   [0:0] first_1_reg_293_pp1_iter23_reg;
reg   [0:0] first_1_reg_293_pp1_iter24_reg;
reg   [31:0] i55_034_reg_314;
reg   [63:0] i_3_reg_323;
reg   [31:0] reg_398;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln136_reg_870;
reg   [0:0] or_ln85_reg_879;
reg   [31:0] reg_398_pp1_iter2_reg;
reg   [31:0] reg_398_pp1_iter3_reg;
reg   [31:0] reg_398_pp1_iter4_reg;
reg   [31:0] reg_398_pp1_iter5_reg;
reg   [31:0] reg_398_pp1_iter6_reg;
wire   [15:0] args_height_fu_404_p1;
reg   [15:0] args_height_reg_730;
reg   [15:0] args_width_reg_735;
reg   [10:0] trunc_ln103_1_reg_743;
reg   [14:0] tmp_reg_748;
wire   [16:0] zext_ln103_fu_443_p1;
reg   [16:0] zext_ln103_reg_753;
wire    ap_CS_fsm_state2;
wire   [15:0] lb_size_fu_446_p3;
reg   [15:0] lb_size_reg_758;
wire  signed [31:0] Addr_assign_2_cast_fu_459_p1;
reg  signed [31:0] Addr_assign_2_cast_reg_763;
wire   [63:0] idxprom_i_cast_cast_cast_cast_fu_463_p1;
reg   [63:0] idxprom_i_cast_cast_cast_cast_reg_773;
reg   [10:0] lb_5_Array_addr_1_reg_778;
reg   [10:0] lb_1_Array_addr_reg_784;
wire   [15:0] i_1_fu_478_p2;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] new_value_fu_489_p1;
reg   [31:0] new_value_reg_821;
reg   [31:0] DataOut_3_reg_826;
wire   [0:0] icmp_ln128_fu_520_p2;
wire   [16:0] sub19_fu_545_p2;
reg   [16:0] sub19_reg_842;
wire    ap_CS_fsm_state6;
wire   [0:0] cmp2335_fu_551_p2;
reg   [0:0] cmp2335_reg_847;
wire   [16:0] sub_i_fu_556_p2;
reg   [16:0] sub_i_reg_851;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln135_fu_573_p2;
wire   [15:0] x_1_fu_578_p2;
reg   [0:0] icmp_ln136_reg_870_pp1_iter1_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter2_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter3_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter4_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter5_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter6_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter7_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter8_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter9_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter10_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter11_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter12_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter13_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter14_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter15_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter16_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter17_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter18_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter19_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter20_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter21_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter22_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter23_reg;
reg   [0:0] icmp_ln136_reg_870_pp1_iter24_reg;
wire   [31:0] new_value_1_fu_593_p1;
reg   [31:0] new_value_1_reg_874;
reg   [31:0] new_value_1_reg_874_pp1_iter1_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter2_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter3_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter4_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter5_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter6_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter7_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter8_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter9_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter10_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter11_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter12_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter13_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter14_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter15_reg;
reg   [31:0] new_value_1_reg_874_pp1_iter16_reg;
wire   [0:0] or_ln85_fu_608_p2;
reg   [0:0] or_ln85_reg_879_pp1_iter1_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter2_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter3_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter4_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter5_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter6_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter7_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter8_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter9_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter10_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter11_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter12_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter13_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter14_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter15_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter16_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter17_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter18_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter19_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter20_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter21_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter22_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter23_reg;
reg   [0:0] or_ln85_reg_879_pp1_iter24_reg;
reg   [31:0] DataOut_5_reg_883;
reg   [31:0] p_4_reg_888;
reg   [31:0] p_5_reg_893;
reg   [31:0] p_7_reg_898;
reg   [31:0] p_7_reg_898_pp1_iter2_reg;
reg   [31:0] p_7_reg_898_pp1_iter3_reg;
reg   [31:0] p_7_reg_898_pp1_iter4_reg;
reg   [31:0] p_7_reg_898_pp1_iter5_reg;
reg   [31:0] p_7_reg_898_pp1_iter6_reg;
reg   [31:0] p_7_reg_898_pp1_iter7_reg;
reg   [31:0] p_7_reg_898_pp1_iter8_reg;
reg   [31:0] p_7_reg_898_pp1_iter9_reg;
reg   [31:0] p_7_reg_898_pp1_iter10_reg;
reg   [31:0] p_7_reg_898_pp1_iter11_reg;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] add_reg_903;
wire   [31:0] grp_fu_357_p2;
reg   [31:0] add1_reg_908;
wire   [31:0] grp_fu_361_p2;
reg   [31:0] add2_reg_913;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] add3_reg_918;
wire   [31:0] grp_fu_369_p2;
wire   [15:0] y_1_fu_681_p2;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln157_fu_687_p2;
wire    ap_block_state41_pp2_stage0_iter0;
reg    ap_block_state42_pp2_stage0_iter1;
wire    ap_block_state43_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [31:0] i_4_fu_693_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] add_ln157_fu_710_p2;
wire   [31:0] c_data_V_2_fu_725_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter27;
wire    ap_CS_fsm_state40;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_condition_pp2_exit_iter1_state42;
reg    ap_enable_reg_pp2_iter2;
reg    lb_1_Array_ce0;
reg    lb_1_Array_we0;
reg   [31:0] lb_1_Array_d0;
wire   [31:0] lb_1_Array_q0;
wire   [0:0] lb_2_Array_address0;
reg    lb_2_Array_ce0;
reg    lb_2_Array_we0;
reg   [31:0] lb_2_Array_d0;
wire   [31:0] lb_2_Array_q0;
wire   [0:0] lb_3_Array_address0;
reg    lb_3_Array_ce0;
reg    lb_3_Array_we0;
reg   [31:0] lb_3_Array_d0;
wire   [31:0] lb_3_Array_q0;
wire   [0:0] lb_4_Array_address0;
reg    lb_4_Array_ce0;
reg    lb_4_Array_we0;
reg   [31:0] lb_4_Array_d0;
wire   [31:0] lb_4_Array_q0;
reg   [10:0] lb_5_Array_address0;
reg    lb_5_Array_ce0;
reg    lb_5_Array_we0;
reg   [31:0] lb_5_Array_d0;
wire   [31:0] lb_5_Array_q0;
reg    grp_write_stream_fu_333_ap_start;
wire    grp_write_stream_fu_333_ap_done;
wire    grp_write_stream_fu_333_ap_idle;
wire    grp_write_stream_fu_333_ap_ready;
wire    grp_write_stream_fu_333_out_s_TREADY;
reg    grp_write_stream_fu_333_ap_ce;
wire   [31:0] grp_write_stream_fu_333_out_s_TDATA;
wire    grp_write_stream_fu_333_out_s_TVALID;
wire   [3:0] grp_write_stream_fu_333_out_s_TKEEP;
wire   [3:0] grp_write_stream_fu_333_out_s_TSTRB;
wire   [0:0] grp_write_stream_fu_333_out_s_TUSER;
wire   [0:0] grp_write_stream_fu_333_out_s_TLAST;
wire   [0:0] grp_write_stream_fu_333_out_s_TID;
wire   [0:0] grp_write_stream_fu_333_out_s_TDEST;
reg   [31:0] grp_write_stream_fu_333_value_r;
reg    ap_block_state1;
reg    ap_block_state1_ignore_call36;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call0;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call0;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call0;
reg    ap_block_pp0_stage0_11001_ignoreCallOp135;
reg    ap_block_state8_pp1_stage0_iter0_ignore_call1;
wire    ap_block_state9_pp1_stage0_iter1_ignore_call1;
wire    ap_block_state10_pp1_stage0_iter2_ignore_call1;
wire    ap_block_state11_pp1_stage0_iter3_ignore_call1;
wire    ap_block_state12_pp1_stage0_iter4_ignore_call1;
wire    ap_block_state13_pp1_stage0_iter5_ignore_call1;
wire    ap_block_state14_pp1_stage0_iter6_ignore_call1;
wire    ap_block_state15_pp1_stage0_iter7_ignore_call1;
wire    ap_block_state16_pp1_stage0_iter8_ignore_call1;
wire    ap_block_state17_pp1_stage0_iter9_ignore_call1;
wire    ap_block_state18_pp1_stage0_iter10_ignore_call1;
wire    ap_block_state19_pp1_stage0_iter11_ignore_call1;
wire    ap_block_state20_pp1_stage0_iter12_ignore_call1;
wire    ap_block_state21_pp1_stage0_iter13_ignore_call1;
wire    ap_block_state22_pp1_stage0_iter14_ignore_call1;
wire    ap_block_state23_pp1_stage0_iter15_ignore_call1;
wire    ap_block_state24_pp1_stage0_iter16_ignore_call1;
wire    ap_block_state25_pp1_stage0_iter17_ignore_call1;
wire    ap_block_state26_pp1_stage0_iter18_ignore_call1;
wire    ap_block_state27_pp1_stage0_iter19_ignore_call1;
wire    ap_block_state28_pp1_stage0_iter20_ignore_call1;
wire    ap_block_state29_pp1_stage0_iter21_ignore_call1;
wire    ap_block_state30_pp1_stage0_iter22_ignore_call1;
wire    ap_block_state31_pp1_stage0_iter23_ignore_call1;
wire    ap_block_state32_pp1_stage0_iter24_ignore_call1;
wire    ap_block_state33_pp1_stage0_iter25_ignore_call1;
wire    ap_block_state34_pp1_stage0_iter26_ignore_call1;
wire    ap_block_state35_pp1_stage0_iter27_ignore_call1;
reg    ap_block_pp1_stage0_11001_ignoreCallOp207;
wire    ap_CS_fsm_state38;
wire    ap_block_state41_pp2_stage0_iter0_ignore_call3;
wire    ap_block_state42_pp2_stage0_iter1_ignore_call3;
wire    ap_block_state43_pp2_stage0_iter2_ignore_call3;
wire    ap_block_pp2_stage0_11001_ignoreCallOp229;
reg   [15:0] y_reg_270;
wire   [31:0] ap_phi_reg_pp1_iter0_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter1_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter2_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter3_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter4_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter5_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter6_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter7_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter8_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter9_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter10_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter11_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter12_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter13_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter14_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter15_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter16_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter17_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter18_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter19_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter20_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter21_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter22_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter23_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter24_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter25_cond_reg_304;
reg   [31:0] ap_phi_reg_pp1_iter26_cond_reg_304;
reg    grp_write_stream_fu_333_ap_start_reg;
reg   [34:0] ap_NS_fsm;
wire    ap_NS_fsm_state37;
wire    ap_NS_fsm_state39;
wire   [31:0] bitcast_ln45_fu_438_p1;
wire   [63:0] idxprom_i10_fu_473_p1;
reg   [0:0] first_fu_154;
wire   [31:0] DataOut_6_fu_641_p4;
wire   [31:0] DataOut_4_fu_658_p4;
wire   [16:0] i_2_fu_453_p2;
wire   [10:0] Addr_assign_1_fu_468_p2;
wire   [16:0] args_height_cast_fu_542_p1;
wire   [16:0] zext_ln135_fu_569_p1;
wire   [16:0] x_2_cast_fu_589_p1;
wire   [0:0] icmp_ln85_fu_597_p2;
wire   [0:0] icmp_ln85_1_fu_603_p2;
reg    grp_fu_353_ce;
reg    grp_fu_357_ce;
reg    grp_fu_361_ce;
reg    grp_fu_365_ce;
reg    grp_fu_369_ce;
wire    ap_CS_fsm_state66;
wire    regslice_both_out_s_V_data_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_in_s_V_data_V_U_apdone_blk;
wire   [31:0] in_s_TDATA_int_regslice;
wire    in_s_TVALID_int_regslice;
reg    in_s_TREADY_int_regslice;
wire    regslice_both_in_s_V_data_V_U_ack_in;
wire    regslice_both_in_s_V_keep_V_U_apdone_blk;
wire   [3:0] in_s_TKEEP_int_regslice;
wire    regslice_both_in_s_V_keep_V_U_vld_out;
wire    regslice_both_in_s_V_keep_V_U_ack_in;
wire    regslice_both_in_s_V_strb_V_U_apdone_blk;
wire   [3:0] in_s_TSTRB_int_regslice;
wire    regslice_both_in_s_V_strb_V_U_vld_out;
wire    regslice_both_in_s_V_strb_V_U_ack_in;
wire    regslice_both_in_s_V_user_V_U_apdone_blk;
wire   [0:0] in_s_TUSER_int_regslice;
wire    regslice_both_in_s_V_user_V_U_vld_out;
wire    regslice_both_in_s_V_user_V_U_ack_in;
wire    regslice_both_in_s_V_last_V_U_apdone_blk;
wire   [0:0] in_s_TLAST_int_regslice;
wire    regslice_both_in_s_V_last_V_U_vld_out;
wire    regslice_both_in_s_V_last_V_U_ack_in;
wire    regslice_both_in_s_V_id_V_U_apdone_blk;
wire   [0:0] in_s_TID_int_regslice;
wire    regslice_both_in_s_V_id_V_U_vld_out;
wire    regslice_both_in_s_V_id_V_U_ack_in;
wire    regslice_both_in_s_V_dest_V_U_apdone_blk;
wire   [0:0] in_s_TDEST_int_regslice;
wire    regslice_both_in_s_V_dest_V_U_vld_out;
wire    regslice_both_in_s_V_dest_V_U_ack_in;
reg   [31:0] out_s_TDATA_int_regslice;
reg    out_s_TVALID_int_regslice;
wire    out_s_TREADY_int_regslice;
wire    regslice_both_out_s_V_data_V_U_vld_out;
wire    regslice_both_out_s_V_keep_V_U_apdone_blk;
reg   [3:0] out_s_TKEEP_int_regslice;
wire    regslice_both_out_s_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_keep_V_U_vld_out;
wire    regslice_both_out_s_V_strb_V_U_apdone_blk;
reg   [3:0] out_s_TSTRB_int_regslice;
wire    regslice_both_out_s_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_strb_V_U_vld_out;
wire    regslice_both_out_s_V_user_V_U_apdone_blk;
reg   [0:0] out_s_TUSER_int_regslice;
wire    regslice_both_out_s_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_user_V_U_vld_out;
wire    regslice_both_out_s_V_last_V_U_apdone_blk;
reg   [0:0] out_s_TLAST_int_regslice;
wire    regslice_both_out_s_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_last_V_U_vld_out;
wire    regslice_both_out_s_V_id_V_U_apdone_blk;
reg   [0:0] out_s_TID_int_regslice;
wire    regslice_both_out_s_V_id_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_id_V_U_vld_out;
wire    regslice_both_out_s_V_dest_V_U_apdone_blk;
reg   [0:0] out_s_TDEST_int_regslice;
wire    regslice_both_out_s_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out_s_V_dest_V_U_vld_out;
reg    ap_condition_567;
reg    ap_condition_312;
reg    ap_condition_292;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 grp_write_stream_fu_333_ap_start_reg = 1'b0;
end

filter_avg_f4_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .args(args),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

filter_avg_f4_lb_1_Array #(
    .DataWidth( 32 ),
    .AddressRange( 2047 ),
    .AddressWidth( 11 ))
lb_1_Array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_1_Array_addr_reg_784),
    .ce0(lb_1_Array_ce0),
    .we0(lb_1_Array_we0),
    .d0(lb_1_Array_d0),
    .q0(lb_1_Array_q0)
);

filter_avg_f4_lb_2_Array #(
    .DataWidth( 32 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
lb_2_Array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_2_Array_address0),
    .ce0(lb_2_Array_ce0),
    .we0(lb_2_Array_we0),
    .d0(lb_2_Array_d0),
    .q0(lb_2_Array_q0)
);

filter_avg_f4_lb_2_Array #(
    .DataWidth( 32 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
lb_3_Array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_3_Array_address0),
    .ce0(lb_3_Array_ce0),
    .we0(lb_3_Array_we0),
    .d0(lb_3_Array_d0),
    .q0(lb_3_Array_q0)
);

filter_avg_f4_lb_2_Array #(
    .DataWidth( 32 ),
    .AddressRange( 1 ),
    .AddressWidth( 1 ))
lb_4_Array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_4_Array_address0),
    .ce0(lb_4_Array_ce0),
    .we0(lb_4_Array_we0),
    .d0(lb_4_Array_d0),
    .q0(lb_4_Array_q0)
);

filter_avg_f4_lb_5_Array #(
    .DataWidth( 32 ),
    .AddressRange( 2046 ),
    .AddressWidth( 11 ))
lb_5_Array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_5_Array_address0),
    .ce0(lb_5_Array_ce0),
    .we0(lb_5_Array_we0),
    .d0(lb_5_Array_d0),
    .q0(lb_5_Array_q0)
);

filter_avg_f4_write_stream grp_write_stream_fu_333(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_stream_fu_333_ap_start),
    .ap_done(grp_write_stream_fu_333_ap_done),
    .ap_idle(grp_write_stream_fu_333_ap_idle),
    .ap_ready(grp_write_stream_fu_333_ap_ready),
    .out_s_TREADY(grp_write_stream_fu_333_out_s_TREADY),
    .ap_ce(grp_write_stream_fu_333_ap_ce),
    .out_s_TDATA(grp_write_stream_fu_333_out_s_TDATA),
    .out_s_TVALID(grp_write_stream_fu_333_out_s_TVALID),
    .out_s_TKEEP(grp_write_stream_fu_333_out_s_TKEEP),
    .out_s_TSTRB(grp_write_stream_fu_333_out_s_TSTRB),
    .out_s_TUSER(grp_write_stream_fu_333_out_s_TUSER),
    .out_s_TLAST(grp_write_stream_fu_333_out_s_TLAST),
    .out_s_TID(grp_write_stream_fu_333_out_s_TID),
    .out_s_TDEST(grp_write_stream_fu_333_out_s_TDEST),
    .value_r(grp_write_stream_fu_333_value_r),
    .out_s_TDATA_blk_n(grp_write_stream_fu_333_out_s_TDATA_blk_n)
);

filter_avg_f4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_4_reg_888),
    .din1(p_5_reg_893),
    .ce(grp_fu_353_ce),
    .dout(grp_fu_353_p2)
);

filter_avg_f4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_reg_903),
    .din1(reg_398_pp1_iter6_reg),
    .ce(grp_fu_357_ce),
    .dout(grp_fu_357_p2)
);

filter_avg_f4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add1_reg_908),
    .din1(p_7_reg_898_pp1_iter11_reg),
    .ce(grp_fu_361_ce),
    .dout(grp_fu_361_p2)
);

filter_avg_f4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add2_reg_913),
    .din1(new_value_1_reg_874_pp1_iter16_reg),
    .ce(grp_fu_365_ce),
    .dout(grp_fu_365_p2)
);

filter_avg_f4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add3_reg_918),
    .din1(32'd1045220557),
    .ce(grp_fu_369_ce),
    .dout(grp_fu_369_p2)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TDATA),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_data_V_U_ack_in),
    .data_out(in_s_TDATA_int_regslice),
    .vld_out(in_s_TVALID_int_regslice),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_data_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TKEEP),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_keep_V_U_ack_in),
    .data_out(in_s_TKEEP_int_regslice),
    .vld_out(regslice_both_in_s_V_keep_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_keep_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TSTRB),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_strb_V_U_ack_in),
    .data_out(in_s_TSTRB_int_regslice),
    .vld_out(regslice_both_in_s_V_strb_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_strb_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TUSER),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_user_V_U_ack_in),
    .data_out(in_s_TUSER_int_regslice),
    .vld_out(regslice_both_in_s_V_user_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_user_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TLAST),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_last_V_U_ack_in),
    .data_out(in_s_TLAST_int_regslice),
    .vld_out(regslice_both_in_s_V_last_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_last_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TID),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_id_V_U_ack_in),
    .data_out(in_s_TID_int_regslice),
    .vld_out(regslice_both_in_s_V_id_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_id_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TDEST),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_dest_V_U_ack_in),
    .data_out(in_s_TDEST_int_regslice),
    .vld_out(regslice_both_in_s_V_dest_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_dest_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TDATA_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(out_s_TREADY_int_regslice),
    .data_out(out_s_TDATA),
    .vld_out(regslice_both_out_s_V_data_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_data_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TKEEP_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_keep_V_U_ack_in_dummy),
    .data_out(out_s_TKEEP),
    .vld_out(regslice_both_out_s_V_keep_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_keep_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TSTRB_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_strb_V_U_ack_in_dummy),
    .data_out(out_s_TSTRB),
    .vld_out(regslice_both_out_s_V_strb_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_strb_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_s_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TUSER_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_user_V_U_ack_in_dummy),
    .data_out(out_s_TUSER),
    .vld_out(regslice_both_out_s_V_user_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_user_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TLAST_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_last_V_U_ack_in_dummy),
    .data_out(out_s_TLAST),
    .vld_out(regslice_both_out_s_V_last_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_last_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_s_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TID_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_id_V_U_ack_in_dummy),
    .data_out(out_s_TID),
    .vld_out(regslice_both_out_s_V_id_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_id_V_U_apdone_blk)
);

filter_avg_f4_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_s_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_s_TDEST_int_regslice),
    .vld_in(out_s_TVALID_int_regslice),
    .ack_in(regslice_both_out_s_V_dest_V_U_ack_in_dummy),
    .data_out(out_s_TDEST),
    .vld_out(regslice_both_out_s_V_dest_V_U_vld_out),
    .ack_out(out_s_TREADY),
    .apdone_blk(regslice_both_out_s_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end else if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state40) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter1_state42)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter1_state42))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_stream_fu_333_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state39) & (1'b1 == ap_CS_fsm_state38)) | ((1'b1 == ap_NS_fsm_state37) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln157_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln128_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter25 == 1'b1) & (first_1_reg_293_pp1_iter24_reg == 1'd0)))) begin
            grp_write_stream_fu_333_ap_start_reg <= 1'b1;
        end else if ((grp_write_stream_fu_333_ap_ready == 1'b1)) begin
            grp_write_stream_fu_333_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter25 == 1'b1))) begin
        if ((1'b1 == ap_condition_567)) begin
            ap_phi_reg_pp1_iter26_cond_reg_304 <= grp_fu_369_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter26_cond_reg_304 <= ap_phi_reg_pp1_iter25_cond_reg_304;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((1'b1 == ap_condition_312)) begin
            ap_phi_reg_pp1_iter2_cond_reg_304 <= lb_3_Array_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter2_cond_reg_304 <= ap_phi_reg_pp1_iter1_cond_reg_304;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        first_1_reg_293 <= first_fu_154;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln136_reg_870 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        first_1_reg_293 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        first_fu_154 <= 1'd1;
    end else if (((cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        first_fu_154 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i55_034_reg_314 <= Addr_assign_2_cast_reg_763;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln157_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i55_034_reg_314 <= i_4_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_3_reg_323 <= idxprom_i_cast_cast_cast_cast_reg_773;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_3_reg_323 <= add_ln157_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_259 <= i_1_fu_478_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_259 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        x_reg_282 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        x_reg_282 <= x_1_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_reg_270 <= y_1_fu_681_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_270 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Addr_assign_2_cast_reg_763 <= Addr_assign_2_cast_fu_459_p1;
        idxprom_i_cast_cast_cast_cast_reg_773[31 : 0] <= idxprom_i_cast_cast_cast_cast_fu_463_p1[31 : 0];
        lb_1_Array_addr_reg_784 <= idxprom_i10_fu_473_p1;
        lb_5_Array_addr_1_reg_778 <= idxprom_i_cast_cast_cast_cast_fu_463_p1;
        lb_size_reg_758[15 : 1] <= lb_size_fu_446_p3[15 : 1];
        zext_ln103_reg_753[15 : 0] <= zext_ln103_fu_443_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataOut_3_reg_826 <= lb_3_Array_q0;
        icmp_ln128_reg_831 <= icmp_ln128_fu_520_p2;
        new_value_reg_821 <= new_value_fu_489_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0))) begin
        DataOut_5_reg_883 <= lb_5_Array_q0;
        new_value_1_reg_874 <= new_value_1_fu_593_p1;
        or_ln85_reg_879 <= or_ln85_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879_pp1_iter10_reg == 1'd0) & (icmp_ln136_reg_870_pp1_iter10_reg == 1'd0) & (first_1_reg_293_pp1_iter10_reg == 1'd0))) begin
        add1_reg_908 <= grp_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879_pp1_iter15_reg == 1'd0) & (icmp_ln136_reg_870_pp1_iter15_reg == 1'd0) & (first_1_reg_293_pp1_iter15_reg == 1'd0))) begin
        add2_reg_913 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879_pp1_iter20_reg == 1'd0) & (icmp_ln136_reg_870_pp1_iter20_reg == 1'd0) & (first_1_reg_293_pp1_iter20_reg == 1'd0))) begin
        add3_reg_918 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879_pp1_iter5_reg == 1'd0) & (icmp_ln136_reg_870_pp1_iter5_reg == 1'd0) & (first_1_reg_293_pp1_iter5_reg == 1'd0))) begin
        add_reg_903 <= grp_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        ap_phi_reg_pp1_iter10_cond_reg_304 <= ap_phi_reg_pp1_iter9_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        ap_phi_reg_pp1_iter11_cond_reg_304 <= ap_phi_reg_pp1_iter10_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_phi_reg_pp1_iter12_cond_reg_304 <= ap_phi_reg_pp1_iter11_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter12 == 1'b1))) begin
        ap_phi_reg_pp1_iter13_cond_reg_304 <= ap_phi_reg_pp1_iter12_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter13 == 1'b1))) begin
        ap_phi_reg_pp1_iter14_cond_reg_304 <= ap_phi_reg_pp1_iter13_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        ap_phi_reg_pp1_iter15_cond_reg_304 <= ap_phi_reg_pp1_iter14_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1))) begin
        ap_phi_reg_pp1_iter16_cond_reg_304 <= ap_phi_reg_pp1_iter15_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1))) begin
        ap_phi_reg_pp1_iter17_cond_reg_304 <= ap_phi_reg_pp1_iter16_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter17 == 1'b1))) begin
        ap_phi_reg_pp1_iter18_cond_reg_304 <= ap_phi_reg_pp1_iter17_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter18 == 1'b1))) begin
        ap_phi_reg_pp1_iter19_cond_reg_304 <= ap_phi_reg_pp1_iter18_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ap_phi_reg_pp1_iter1_cond_reg_304 <= ap_phi_reg_pp1_iter0_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter19 == 1'b1))) begin
        ap_phi_reg_pp1_iter20_cond_reg_304 <= ap_phi_reg_pp1_iter19_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter20 == 1'b1))) begin
        ap_phi_reg_pp1_iter21_cond_reg_304 <= ap_phi_reg_pp1_iter20_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter21 == 1'b1))) begin
        ap_phi_reg_pp1_iter22_cond_reg_304 <= ap_phi_reg_pp1_iter21_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter22 == 1'b1))) begin
        ap_phi_reg_pp1_iter23_cond_reg_304 <= ap_phi_reg_pp1_iter22_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter23 == 1'b1))) begin
        ap_phi_reg_pp1_iter24_cond_reg_304 <= ap_phi_reg_pp1_iter23_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter24 == 1'b1))) begin
        ap_phi_reg_pp1_iter25_cond_reg_304 <= ap_phi_reg_pp1_iter24_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_reg_pp1_iter3_cond_reg_304 <= ap_phi_reg_pp1_iter2_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ap_phi_reg_pp1_iter4_cond_reg_304 <= ap_phi_reg_pp1_iter3_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_reg_pp1_iter5_cond_reg_304 <= ap_phi_reg_pp1_iter4_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_reg_pp1_iter6_cond_reg_304 <= ap_phi_reg_pp1_iter5_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter6 == 1'b1))) begin
        ap_phi_reg_pp1_iter7_cond_reg_304 <= ap_phi_reg_pp1_iter6_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        ap_phi_reg_pp1_iter8_cond_reg_304 <= ap_phi_reg_pp1_iter7_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        ap_phi_reg_pp1_iter9_cond_reg_304 <= ap_phi_reg_pp1_iter8_cond_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        args_height_reg_730 <= args_height_fu_404_p1;
        args_width_reg_735 <= {{args[31:16]}};
        tmp_reg_748 <= {{args[30:16]}};
        trunc_ln103_1_reg_743 <= {{args[26:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cmp2335_reg_847 <= cmp2335_fu_551_p2;
        sub19_reg_842 <= sub19_fu_545_p2;
        sub_i_reg_851 <= sub_i_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        first_1_reg_293_pp1_iter10_reg <= first_1_reg_293_pp1_iter9_reg;
        first_1_reg_293_pp1_iter11_reg <= first_1_reg_293_pp1_iter10_reg;
        first_1_reg_293_pp1_iter12_reg <= first_1_reg_293_pp1_iter11_reg;
        first_1_reg_293_pp1_iter13_reg <= first_1_reg_293_pp1_iter12_reg;
        first_1_reg_293_pp1_iter14_reg <= first_1_reg_293_pp1_iter13_reg;
        first_1_reg_293_pp1_iter15_reg <= first_1_reg_293_pp1_iter14_reg;
        first_1_reg_293_pp1_iter16_reg <= first_1_reg_293_pp1_iter15_reg;
        first_1_reg_293_pp1_iter17_reg <= first_1_reg_293_pp1_iter16_reg;
        first_1_reg_293_pp1_iter18_reg <= first_1_reg_293_pp1_iter17_reg;
        first_1_reg_293_pp1_iter19_reg <= first_1_reg_293_pp1_iter18_reg;
        first_1_reg_293_pp1_iter20_reg <= first_1_reg_293_pp1_iter19_reg;
        first_1_reg_293_pp1_iter21_reg <= first_1_reg_293_pp1_iter20_reg;
        first_1_reg_293_pp1_iter22_reg <= first_1_reg_293_pp1_iter21_reg;
        first_1_reg_293_pp1_iter23_reg <= first_1_reg_293_pp1_iter22_reg;
        first_1_reg_293_pp1_iter24_reg <= first_1_reg_293_pp1_iter23_reg;
        first_1_reg_293_pp1_iter25_reg <= first_1_reg_293_pp1_iter24_reg;
        first_1_reg_293_pp1_iter2_reg <= first_1_reg_293_pp1_iter1_reg;
        first_1_reg_293_pp1_iter3_reg <= first_1_reg_293_pp1_iter2_reg;
        first_1_reg_293_pp1_iter4_reg <= first_1_reg_293_pp1_iter3_reg;
        first_1_reg_293_pp1_iter5_reg <= first_1_reg_293_pp1_iter4_reg;
        first_1_reg_293_pp1_iter6_reg <= first_1_reg_293_pp1_iter5_reg;
        first_1_reg_293_pp1_iter7_reg <= first_1_reg_293_pp1_iter6_reg;
        first_1_reg_293_pp1_iter8_reg <= first_1_reg_293_pp1_iter7_reg;
        first_1_reg_293_pp1_iter9_reg <= first_1_reg_293_pp1_iter8_reg;
        icmp_ln136_reg_870_pp1_iter10_reg <= icmp_ln136_reg_870_pp1_iter9_reg;
        icmp_ln136_reg_870_pp1_iter11_reg <= icmp_ln136_reg_870_pp1_iter10_reg;
        icmp_ln136_reg_870_pp1_iter12_reg <= icmp_ln136_reg_870_pp1_iter11_reg;
        icmp_ln136_reg_870_pp1_iter13_reg <= icmp_ln136_reg_870_pp1_iter12_reg;
        icmp_ln136_reg_870_pp1_iter14_reg <= icmp_ln136_reg_870_pp1_iter13_reg;
        icmp_ln136_reg_870_pp1_iter15_reg <= icmp_ln136_reg_870_pp1_iter14_reg;
        icmp_ln136_reg_870_pp1_iter16_reg <= icmp_ln136_reg_870_pp1_iter15_reg;
        icmp_ln136_reg_870_pp1_iter17_reg <= icmp_ln136_reg_870_pp1_iter16_reg;
        icmp_ln136_reg_870_pp1_iter18_reg <= icmp_ln136_reg_870_pp1_iter17_reg;
        icmp_ln136_reg_870_pp1_iter19_reg <= icmp_ln136_reg_870_pp1_iter18_reg;
        icmp_ln136_reg_870_pp1_iter20_reg <= icmp_ln136_reg_870_pp1_iter19_reg;
        icmp_ln136_reg_870_pp1_iter21_reg <= icmp_ln136_reg_870_pp1_iter20_reg;
        icmp_ln136_reg_870_pp1_iter22_reg <= icmp_ln136_reg_870_pp1_iter21_reg;
        icmp_ln136_reg_870_pp1_iter23_reg <= icmp_ln136_reg_870_pp1_iter22_reg;
        icmp_ln136_reg_870_pp1_iter24_reg <= icmp_ln136_reg_870_pp1_iter23_reg;
        icmp_ln136_reg_870_pp1_iter2_reg <= icmp_ln136_reg_870_pp1_iter1_reg;
        icmp_ln136_reg_870_pp1_iter3_reg <= icmp_ln136_reg_870_pp1_iter2_reg;
        icmp_ln136_reg_870_pp1_iter4_reg <= icmp_ln136_reg_870_pp1_iter3_reg;
        icmp_ln136_reg_870_pp1_iter5_reg <= icmp_ln136_reg_870_pp1_iter4_reg;
        icmp_ln136_reg_870_pp1_iter6_reg <= icmp_ln136_reg_870_pp1_iter5_reg;
        icmp_ln136_reg_870_pp1_iter7_reg <= icmp_ln136_reg_870_pp1_iter6_reg;
        icmp_ln136_reg_870_pp1_iter8_reg <= icmp_ln136_reg_870_pp1_iter7_reg;
        icmp_ln136_reg_870_pp1_iter9_reg <= icmp_ln136_reg_870_pp1_iter8_reg;
        new_value_1_reg_874_pp1_iter10_reg <= new_value_1_reg_874_pp1_iter9_reg;
        new_value_1_reg_874_pp1_iter11_reg <= new_value_1_reg_874_pp1_iter10_reg;
        new_value_1_reg_874_pp1_iter12_reg <= new_value_1_reg_874_pp1_iter11_reg;
        new_value_1_reg_874_pp1_iter13_reg <= new_value_1_reg_874_pp1_iter12_reg;
        new_value_1_reg_874_pp1_iter14_reg <= new_value_1_reg_874_pp1_iter13_reg;
        new_value_1_reg_874_pp1_iter15_reg <= new_value_1_reg_874_pp1_iter14_reg;
        new_value_1_reg_874_pp1_iter16_reg <= new_value_1_reg_874_pp1_iter15_reg;
        new_value_1_reg_874_pp1_iter2_reg <= new_value_1_reg_874_pp1_iter1_reg;
        new_value_1_reg_874_pp1_iter3_reg <= new_value_1_reg_874_pp1_iter2_reg;
        new_value_1_reg_874_pp1_iter4_reg <= new_value_1_reg_874_pp1_iter3_reg;
        new_value_1_reg_874_pp1_iter5_reg <= new_value_1_reg_874_pp1_iter4_reg;
        new_value_1_reg_874_pp1_iter6_reg <= new_value_1_reg_874_pp1_iter5_reg;
        new_value_1_reg_874_pp1_iter7_reg <= new_value_1_reg_874_pp1_iter6_reg;
        new_value_1_reg_874_pp1_iter8_reg <= new_value_1_reg_874_pp1_iter7_reg;
        new_value_1_reg_874_pp1_iter9_reg <= new_value_1_reg_874_pp1_iter8_reg;
        or_ln85_reg_879_pp1_iter10_reg <= or_ln85_reg_879_pp1_iter9_reg;
        or_ln85_reg_879_pp1_iter11_reg <= or_ln85_reg_879_pp1_iter10_reg;
        or_ln85_reg_879_pp1_iter12_reg <= or_ln85_reg_879_pp1_iter11_reg;
        or_ln85_reg_879_pp1_iter13_reg <= or_ln85_reg_879_pp1_iter12_reg;
        or_ln85_reg_879_pp1_iter14_reg <= or_ln85_reg_879_pp1_iter13_reg;
        or_ln85_reg_879_pp1_iter15_reg <= or_ln85_reg_879_pp1_iter14_reg;
        or_ln85_reg_879_pp1_iter16_reg <= or_ln85_reg_879_pp1_iter15_reg;
        or_ln85_reg_879_pp1_iter17_reg <= or_ln85_reg_879_pp1_iter16_reg;
        or_ln85_reg_879_pp1_iter18_reg <= or_ln85_reg_879_pp1_iter17_reg;
        or_ln85_reg_879_pp1_iter19_reg <= or_ln85_reg_879_pp1_iter18_reg;
        or_ln85_reg_879_pp1_iter20_reg <= or_ln85_reg_879_pp1_iter19_reg;
        or_ln85_reg_879_pp1_iter21_reg <= or_ln85_reg_879_pp1_iter20_reg;
        or_ln85_reg_879_pp1_iter22_reg <= or_ln85_reg_879_pp1_iter21_reg;
        or_ln85_reg_879_pp1_iter23_reg <= or_ln85_reg_879_pp1_iter22_reg;
        or_ln85_reg_879_pp1_iter24_reg <= or_ln85_reg_879_pp1_iter23_reg;
        or_ln85_reg_879_pp1_iter2_reg <= or_ln85_reg_879_pp1_iter1_reg;
        or_ln85_reg_879_pp1_iter3_reg <= or_ln85_reg_879_pp1_iter2_reg;
        or_ln85_reg_879_pp1_iter4_reg <= or_ln85_reg_879_pp1_iter3_reg;
        or_ln85_reg_879_pp1_iter5_reg <= or_ln85_reg_879_pp1_iter4_reg;
        or_ln85_reg_879_pp1_iter6_reg <= or_ln85_reg_879_pp1_iter5_reg;
        or_ln85_reg_879_pp1_iter7_reg <= or_ln85_reg_879_pp1_iter6_reg;
        or_ln85_reg_879_pp1_iter8_reg <= or_ln85_reg_879_pp1_iter7_reg;
        or_ln85_reg_879_pp1_iter9_reg <= or_ln85_reg_879_pp1_iter8_reg;
        p_7_reg_898_pp1_iter10_reg <= p_7_reg_898_pp1_iter9_reg;
        p_7_reg_898_pp1_iter11_reg <= p_7_reg_898_pp1_iter10_reg;
        p_7_reg_898_pp1_iter2_reg <= p_7_reg_898;
        p_7_reg_898_pp1_iter3_reg <= p_7_reg_898_pp1_iter2_reg;
        p_7_reg_898_pp1_iter4_reg <= p_7_reg_898_pp1_iter3_reg;
        p_7_reg_898_pp1_iter5_reg <= p_7_reg_898_pp1_iter4_reg;
        p_7_reg_898_pp1_iter6_reg <= p_7_reg_898_pp1_iter5_reg;
        p_7_reg_898_pp1_iter7_reg <= p_7_reg_898_pp1_iter6_reg;
        p_7_reg_898_pp1_iter8_reg <= p_7_reg_898_pp1_iter7_reg;
        p_7_reg_898_pp1_iter9_reg <= p_7_reg_898_pp1_iter8_reg;
        reg_398_pp1_iter2_reg <= reg_398;
        reg_398_pp1_iter3_reg <= reg_398_pp1_iter2_reg;
        reg_398_pp1_iter4_reg <= reg_398_pp1_iter3_reg;
        reg_398_pp1_iter5_reg <= reg_398_pp1_iter4_reg;
        reg_398_pp1_iter6_reg <= reg_398_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        first_1_reg_293_pp1_iter1_reg <= first_1_reg_293;
        icmp_ln136_reg_870 <= icmp_ln136_fu_584_p2;
        icmp_ln136_reg_870_pp1_iter1_reg <= icmp_ln136_reg_870;
        new_value_1_reg_874_pp1_iter1_reg <= new_value_1_reg_874;
        or_ln85_reg_879_pp1_iter1_reg <= or_ln85_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln157_reg_933 <= icmp_ln157_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879 == 1'd0) & (icmp_ln136_reg_870 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        p_4_reg_888 <= lb_1_Array_q0;
        p_5_reg_893 <= lb_2_Array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879 == 1'd0) & (icmp_ln136_reg_870 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        p_7_reg_898 <= lb_4_Array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879 == 1'd1) & (icmp_ln136_reg_870 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (or_ln85_reg_879 == 1'd0) & (icmp_ln136_reg_870 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        reg_398 <= lb_3_Array_q0;
    end
end

always @ (*) begin
    if ((icmp_ln125_fu_484_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln136_fu_584_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_condition_pp2_exit_iter1_state42 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter1_state42 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln157_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (regslice_both_out_s_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln136_reg_870 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_first_1_phi_fu_296_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_1_phi_fu_296_p4 = first_1_reg_293;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (regslice_both_out_s_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_353_ce = 1'b1;
    end else begin
        grp_fu_353_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_357_ce = 1'b1;
    end else begin
        grp_fu_357_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_361_ce = 1'b1;
    end else begin
        grp_fu_361_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_365_ce = 1'b1;
    end else begin
        grp_fu_365_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_369_ce = 1'b1;
    end else begin
        grp_fu_369_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_pp2_stage0_11001_ignoreCallOp229) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001_ignoreCallOp207) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp135) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_write_stream_fu_333_ap_ce = 1'b1;
    end else begin
        grp_write_stream_fu_333_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_write_stream_fu_333_ap_start = 1'b1;
    end else begin
        grp_write_stream_fu_333_ap_start = grp_write_stream_fu_333_ap_start_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        grp_write_stream_fu_333_value_r = lb_5_Array_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_write_stream_fu_333_value_r = lb_4_Array_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_write_stream_fu_333_value_r = lb_3_Array_q0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1))) begin
        grp_write_stream_fu_333_value_r = ap_phi_reg_pp1_iter26_cond_reg_304;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_write_stream_fu_333_value_r = new_value_reg_821;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_write_stream_fu_333_value_r = bitcast_ln45_fu_438_p1;
    end else begin
        grp_write_stream_fu_333_value_r = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        in_s_TDATA_blk_n = in_s_TVALID_int_regslice;
    end else begin
        in_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op162_read_state8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0) | (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_s_TREADY_int_regslice = 1'b1;
    end else begin
        in_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_1_Array_ce0 = 1'd1;
    end else begin
        lb_1_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        lb_1_Array_d0 = DataOut_4_fu_658_p4;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lb_1_Array_d0 = lb_2_Array_q0;
    end else begin
        lb_1_Array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_1_Array_we0 = 1'd1;
    end else begin
        lb_1_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_2_Array_ce0 = 1'd1;
    end else begin
        lb_2_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        lb_2_Array_d0 = lb_3_Array_q0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lb_2_Array_d0 = DataOut_3_reg_826;
    end else begin
        lb_2_Array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_2_Array_we0 = 1'd1;
    end else begin
        lb_2_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_3_Array_ce0 = 1'd1;
    end else begin
        lb_3_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        lb_3_Array_d0 = DataOut_6_fu_641_p4;
    end else if (((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_3_Array_d0 = lb_4_Array_q0;
    end else begin
        lb_3_Array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_3_Array_we0 = 1'd1;
    end else begin
        lb_3_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_4_Array_ce0 = 1'd1;
    end else begin
        lb_4_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0))) begin
        lb_4_Array_d0 = DataOut_5_reg_883;
    end else if (((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_4_Array_d0 = lb_5_Array_q0;
    end else begin
        lb_4_Array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (first_1_reg_293 == 1'd0)))) begin
        lb_4_Array_we0 = 1'd1;
    end else begin
        lb_4_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        lb_5_Array_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        lb_5_Array_address0 = i_3_reg_323;
    end else if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        lb_5_Array_address0 = lb_5_Array_addr_1_reg_778;
    end else begin
        lb_5_Array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        lb_5_Array_ce0 = 1'd1;
    end else begin
        lb_5_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        lb_5_Array_d0 = new_value_1_fu_593_p1;
    end else if (((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_5_Array_d0 = new_value_fu_489_p1;
    end else begin
        lb_5_Array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln125_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        lb_5_Array_we0 = 1'd1;
    end else begin
        lb_5_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        out_s_TDATA_blk_n = out_s_TREADY_int_regslice;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TDATA_blk_n = grp_write_stream_fu_333_out_s_TDATA_blk_n;
    end else begin
        out_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TDATA_int_regslice = c_data_V_2_fu_725_p1;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TDATA_int_regslice = grp_write_stream_fu_333_out_s_TDATA;
    end else begin
        out_s_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TDEST_int_regslice = 1'd0;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TDEST_int_regslice = grp_write_stream_fu_333_out_s_TDEST;
    end else begin
        out_s_TDEST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TID_int_regslice = 1'd0;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TID_int_regslice = grp_write_stream_fu_333_out_s_TID;
    end else begin
        out_s_TID_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TKEEP_int_regslice = 4'd15;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TKEEP_int_regslice = grp_write_stream_fu_333_out_s_TKEEP;
    end else begin
        out_s_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TLAST_int_regslice = 1'd1;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TLAST_int_regslice = grp_write_stream_fu_333_out_s_TLAST;
    end else begin
        out_s_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TSTRB_int_regslice = 4'd0;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TSTRB_int_regslice = grp_write_stream_fu_333_out_s_TSTRB;
    end else begin
        out_s_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TUSER_int_regslice = 1'd0;
    end else if ((((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_pp0_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (grp_write_stream_fu_333_out_s_TVALID == 1'b1) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TUSER_int_regslice = grp_write_stream_fu_333_out_s_TUSER;
    end else begin
        out_s_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
        out_s_TVALID_int_regslice = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1)))) begin
        out_s_TVALID_int_regslice = grp_write_stream_fu_333_out_s_TVALID;
    end else begin
        out_s_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0) | (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln125_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln125_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln135_fu_573_p2 == 1'd1) & (cmp2335_reg_847 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln136_fu_584_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter27 == 1'b1) & (ap_enable_reg_pp1_iter26 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln136_fu_584_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter27 == 1'b1) & (ap_enable_reg_pp1_iter26 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (out_s_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (out_s_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (regslice_both_out_s_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Addr_assign_1_fu_468_p2 = ($signed(trunc_ln103_1_reg_743) + $signed(11'd2046));

assign Addr_assign_2_cast_fu_459_p1 = $signed(i_2_fu_453_p2);

assign DataOut_4_fu_658_p4 = lb_2_Array_q0;

assign DataOut_6_fu_641_p4 = lb_4_Array_q0;

assign add_ln157_fu_710_p2 = ($signed(i_3_reg_323) + $signed(64'd18446744073709551615));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_NS_fsm_state37 = ap_NS_fsm[32'd7];

assign ap_NS_fsm_state39 = ap_NS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln125_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0)) | ((icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp135 = ((icmp_ln125_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln125_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0)) | ((icmp_ln128_reg_831 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_predicate_op162_read_state8 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_ignoreCallOp207 = ((ap_predicate_op162_read_state8 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_predicate_op162_read_state8 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((first_1_reg_293_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

assign ap_block_pp2_stage0_11001_ignoreCallOp229 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((icmp_ln157_reg_933 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0) | (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter4_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter5_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter6_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter7_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter8_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter9_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter10_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter11_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_ignore_call36 = ((ap_start == 1'b0) | (in_s_TVALID_int_regslice == 1'b0));
end

assign ap_block_state20_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter12_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter13_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter14_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter15_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter16_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter17_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter18_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter19_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter20_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter21_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter22_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter23_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter24_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter25_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp1_stage0_iter26 = ((first_1_reg_293_pp1_iter25_reg == 1'd0) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

assign ap_block_state34_pp1_stage0_iter26_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter27_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln125_fu_484_p2 == 1'd0) & (in_s_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call0 = ((icmp_ln125_fu_484_p2 == 1'd0) & (in_s_TVALID_int_regslice == 1'b0));
end

assign ap_block_state41_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter0_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_pp2_stage0_iter1 = ((icmp_ln157_reg_933 == 1'd1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

assign ap_block_state42_pp2_stage0_iter1_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln128_reg_831 == 1'd1) & (grp_write_stream_fu_333_out_s_TDATA_blk_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter0 = ((ap_predicate_op162_read_state8 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter0_ignore_call1 = ((ap_predicate_op162_read_state8 == 1'b1) & (in_s_TVALID_int_regslice == 1'b0));
end

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_292 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_312 = ((or_ln85_reg_879 == 1'd1) & (icmp_ln136_reg_870 == 1'd0) & (first_1_reg_293 == 1'd0));
end

always @ (*) begin
    ap_condition_567 = ((or_ln85_reg_879_pp1_iter24_reg == 1'd0) & (icmp_ln136_reg_870_pp1_iter24_reg == 1'd0) & (first_1_reg_293_pp1_iter24_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_cond_reg_304 = 'bx;

always @ (*) begin
    ap_predicate_op162_read_state8 = ((ap_phi_mux_first_1_phi_fu_296_p4 == 1'd0) & (icmp_ln136_fu_584_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign args_height_cast_fu_542_p1 = args_height_reg_730;

assign args_height_fu_404_p1 = args[15:0];

assign bitcast_ln45_fu_438_p1 = in_s_TDATA_int_regslice;

assign c_data_V_2_fu_725_p1 = lb_5_Array_q0;

assign cmp2335_fu_551_p2 = ((args_width_reg_735 == 16'd0) ? 1'b1 : 1'b0);

assign grp_write_stream_fu_333_out_s_TREADY = ((out_s_TREADY_int_regslice & ap_CS_fsm_pp0_stage0) | (out_s_TREADY_int_regslice & ap_CS_fsm_state1) | (out_s_TREADY_int_regslice & ap_CS_fsm_pp2_stage0) | (out_s_TREADY_int_regslice & ap_CS_fsm_state39) | (out_s_TREADY_int_regslice & ap_CS_fsm_state37) | (out_s_TREADY_int_regslice & ap_CS_fsm_pp1_stage0));

assign i_1_fu_478_p2 = (i_reg_259 + 16'd1);

assign i_2_fu_453_p2 = ($signed(zext_ln103_fu_443_p1) + $signed(17'd131069));

assign i_4_fu_693_p2 = ($signed(i55_034_reg_314) + $signed(32'd4294967295));

assign icmp_ln125_fu_484_p2 = ((i_reg_259 == lb_size_reg_758) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_520_p2 = ((i_reg_259 < args_width_reg_735) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_573_p2 = (($signed(zext_ln135_fu_569_p1) < $signed(sub19_reg_842)) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_584_p2 = ((x_reg_282 == args_width_reg_735) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_687_p2 = (($signed(i55_034_reg_314) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_603_p2 = ((x_2_cast_fu_589_p1 == sub_i_reg_851) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_597_p2 = ((x_reg_282 == 16'd0) ? 1'b1 : 1'b0);

assign idxprom_i10_fu_473_p1 = Addr_assign_1_fu_468_p2;

assign idxprom_i_cast_cast_cast_cast_fu_463_p1 = $unsigned(Addr_assign_2_cast_fu_459_p1);

assign in_s_TREADY = regslice_both_in_s_V_data_V_U_ack_in;

assign lb_2_Array_address0 = 64'd0;

assign lb_3_Array_address0 = 64'd0;

assign lb_4_Array_address0 = 64'd0;

assign lb_size_fu_446_p3 = {{tmp_reg_748}, {1'd0}};

assign new_value_1_fu_593_p1 = in_s_TDATA_int_regslice;

assign new_value_fu_489_p1 = in_s_TDATA_int_regslice;

assign or_ln85_fu_608_p2 = (icmp_ln85_fu_597_p2 | icmp_ln85_1_fu_603_p2);

assign out_s_TVALID = regslice_both_out_s_V_data_V_U_vld_out;

assign sub19_fu_545_p2 = ($signed(args_height_cast_fu_542_p1) + $signed(17'd131071));

assign sub_i_fu_556_p2 = ($signed(zext_ln103_reg_753) + $signed(17'd131071));

assign x_1_fu_578_p2 = (x_reg_282 + 16'd1);

assign x_2_cast_fu_589_p1 = x_reg_282;

assign y_1_fu_681_p2 = (y_reg_270 + 16'd1);

assign zext_ln103_fu_443_p1 = args_width_reg_735;

assign zext_ln135_fu_569_p1 = y_reg_270;

always @ (posedge ap_clk) begin
    zext_ln103_reg_753[16] <= 1'b0;
    lb_size_reg_758[0] <= 1'b0;
    idxprom_i_cast_cast_cast_cast_reg_773[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //filter_avg_f4
